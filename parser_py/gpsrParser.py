# Generated from gpsr.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,145,951,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,1,0,4,0,134,8,0,11,0,12,0,135,1,1,1,1,3,1,140,8,1,1,2,3,2,143,
        8,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,156,8,3,1,4,
        1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,172,8,4,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,219,8,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,229,8,7,1,7,1,7,1,7,1,7,3,7,
        235,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,277,8,7,1,8,1,8,1,9,
        1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,
        1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,
        1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,326,8,9,1,10,
        1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,3,11,424,8,11,1,12,1,12,1,12,1,12,1,12,1,12,
        1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,439,8,12,1,12,1,12,3,12,
        443,8,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
        1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
        1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
        1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
        1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
        1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
        1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,528,8,12,1,13,1,13,1,13,
        1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,1,13,3,13,548,8,13,1,13,1,13,3,13,552,8,13,1,13,1,13,1,13,3,
        13,557,8,13,1,13,1,13,1,13,1,13,3,13,563,8,13,1,14,1,14,1,14,1,14,
        1,14,3,14,570,8,14,1,15,1,15,1,15,1,15,1,16,1,16,1,17,1,17,1,17,
        1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
        1,17,1,17,3,17,596,8,17,1,17,1,17,1,17,3,17,601,8,17,1,17,1,17,1,
        17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,612,8,17,1,17,1,17,3,17,616,
        8,17,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,
        1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,3,20,638,8,20,1,20,1,20,
        1,20,3,20,643,8,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
        3,20,654,8,20,1,20,1,20,1,20,3,20,659,8,20,1,20,1,20,1,20,1,20,1,
        20,3,20,666,8,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,
        21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,
        21,1,21,1,21,1,21,1,21,3,21,695,8,21,1,21,1,21,1,21,3,21,700,8,21,
        1,21,1,21,1,21,1,21,3,21,706,8,21,1,22,1,22,1,23,1,23,1,23,1,23,
        1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
        1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
        1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
        1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,3,23,763,8,23,
        1,24,1,24,1,24,1,24,3,24,769,8,24,1,25,1,25,1,26,1,26,1,26,1,26,
        1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,29,1,29,3,29,786,8,29,1,30,
        1,30,1,30,1,30,3,30,792,8,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
        1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,808,8,31,1,32,1,32,1,33,
        1,33,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,3,35,822,8,35,1,36,
        1,36,1,37,1,37,1,37,3,37,829,8,37,1,38,1,38,1,38,1,38,1,38,1,38,
        1,38,1,38,3,38,839,8,38,1,39,1,39,1,40,1,40,1,41,1,41,3,41,847,8,
        41,1,42,1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,44,1,44,1,44,1,44,1,
        44,1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,46,1,47,1,47,1,
        47,1,47,1,48,1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,49,1,49,1,50,1,
        50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,52,1,
        52,3,52,901,8,52,1,53,1,53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,1,
        57,1,57,3,57,914,8,57,1,58,1,58,1,58,1,58,1,58,3,58,921,8,58,1,59,
        1,59,1,60,1,60,1,61,1,61,3,61,929,8,61,1,62,1,62,1,62,1,62,3,62,
        935,8,62,1,63,1,63,1,64,1,64,1,65,1,65,1,65,1,65,1,65,1,65,1,65,
        1,65,3,65,949,8,65,1,65,0,0,66,0,2,4,6,8,10,12,14,16,18,20,22,24,
        26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,
        70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,
        110,112,114,116,118,120,122,124,126,128,130,0,17,1,0,31,33,2,0,27,
        27,41,45,1,0,46,49,2,0,41,42,50,53,1,0,65,70,1,0,71,75,1,0,76,78,
        2,0,34,34,81,83,1,0,93,98,2,0,29,29,99,101,1,0,102,107,2,0,84,84,
        108,108,1,0,109,110,2,0,97,97,108,108,2,0,13,13,114,114,1,0,115,
        116,2,0,84,84,121,124,994,0,133,1,0,0,0,2,139,1,0,0,0,4,142,1,0,
        0,0,6,155,1,0,0,0,8,171,1,0,0,0,10,173,1,0,0,0,12,180,1,0,0,0,14,
        276,1,0,0,0,16,278,1,0,0,0,18,325,1,0,0,0,20,327,1,0,0,0,22,423,
        1,0,0,0,24,527,1,0,0,0,26,562,1,0,0,0,28,569,1,0,0,0,30,571,1,0,
        0,0,32,575,1,0,0,0,34,615,1,0,0,0,36,617,1,0,0,0,38,623,1,0,0,0,
        40,665,1,0,0,0,42,705,1,0,0,0,44,707,1,0,0,0,46,762,1,0,0,0,48,768,
        1,0,0,0,50,770,1,0,0,0,52,772,1,0,0,0,54,777,1,0,0,0,56,779,1,0,
        0,0,58,785,1,0,0,0,60,791,1,0,0,0,62,807,1,0,0,0,64,809,1,0,0,0,
        66,811,1,0,0,0,68,813,1,0,0,0,70,821,1,0,0,0,72,823,1,0,0,0,74,828,
        1,0,0,0,76,838,1,0,0,0,78,840,1,0,0,0,80,842,1,0,0,0,82,846,1,0,
        0,0,84,848,1,0,0,0,86,854,1,0,0,0,88,856,1,0,0,0,90,861,1,0,0,0,
        92,866,1,0,0,0,94,871,1,0,0,0,96,875,1,0,0,0,98,880,1,0,0,0,100,
        885,1,0,0,0,102,890,1,0,0,0,104,900,1,0,0,0,106,902,1,0,0,0,108,
        905,1,0,0,0,110,907,1,0,0,0,112,909,1,0,0,0,114,913,1,0,0,0,116,
        920,1,0,0,0,118,922,1,0,0,0,120,924,1,0,0,0,122,928,1,0,0,0,124,
        934,1,0,0,0,126,936,1,0,0,0,128,938,1,0,0,0,130,948,1,0,0,0,132,
        134,3,2,1,0,133,132,1,0,0,0,134,135,1,0,0,0,135,133,1,0,0,0,135,
        136,1,0,0,0,136,1,1,0,0,0,137,140,3,4,2,0,138,140,3,6,3,0,139,137,
        1,0,0,0,139,138,1,0,0,0,140,3,1,0,0,0,141,143,3,130,65,0,142,141,
        1,0,0,0,142,143,1,0,0,0,143,144,1,0,0,0,144,145,3,6,3,0,145,5,1,
        0,0,0,146,156,3,24,12,0,147,156,3,22,11,0,148,156,3,32,16,0,149,
        156,3,26,13,0,150,156,3,40,20,0,151,156,3,42,21,0,152,156,3,12,6,
        0,153,156,3,16,8,0,154,156,3,46,23,0,155,146,1,0,0,0,155,147,1,0,
        0,0,155,148,1,0,0,0,155,149,1,0,0,0,155,150,1,0,0,0,155,151,1,0,
        0,0,155,152,1,0,0,0,155,153,1,0,0,0,155,154,1,0,0,0,156,7,1,0,0,
        0,157,158,3,124,62,0,158,159,5,1,0,0,159,160,3,54,27,0,160,172,1,
        0,0,0,161,162,3,124,62,0,162,163,5,1,0,0,163,164,5,2,0,0,164,165,
        5,140,0,0,165,172,1,0,0,0,166,167,3,124,62,0,167,168,5,1,0,0,168,
        169,5,2,0,0,169,170,3,58,29,0,170,172,1,0,0,0,171,157,1,0,0,0,171,
        161,1,0,0,0,171,166,1,0,0,0,172,9,1,0,0,0,173,174,5,3,0,0,174,175,
        5,2,0,0,175,176,5,140,0,0,176,177,5,4,0,0,177,178,5,3,0,0,178,179,
        5,141,0,0,179,11,1,0,0,0,180,181,3,14,7,0,181,13,1,0,0,0,182,183,
        3,94,47,0,183,184,5,5,0,0,184,185,3,110,55,0,185,186,5,6,0,0,186,
        187,5,7,0,0,187,188,5,3,0,0,188,189,5,143,0,0,189,277,1,0,0,0,190,
        191,3,110,55,0,191,192,5,3,0,0,192,193,5,136,0,0,193,194,5,7,0,0,
        194,195,5,3,0,0,195,196,5,143,0,0,196,277,1,0,0,0,197,198,3,112,
        56,0,198,199,5,8,0,0,199,200,5,3,0,0,200,201,5,136,0,0,201,277,1,
        0,0,0,202,203,3,114,57,0,203,204,5,3,0,0,204,205,5,136,0,0,205,206,
        5,9,0,0,206,207,3,82,41,0,207,277,1,0,0,0,208,209,3,96,48,0,209,
        210,5,5,0,0,210,211,3,110,55,0,211,212,5,6,0,0,212,213,5,7,0,0,213,
        214,5,3,0,0,214,215,5,143,0,0,215,277,1,0,0,0,216,218,3,88,44,0,
        217,219,5,132,0,0,218,217,1,0,0,0,218,219,1,0,0,0,219,220,1,0,0,
        0,220,221,3,124,62,0,221,222,5,3,0,0,222,223,5,134,0,0,223,224,5,
        9,0,0,224,225,3,82,41,0,225,277,1,0,0,0,226,228,3,88,44,0,227,229,
        5,132,0,0,228,227,1,0,0,0,228,229,1,0,0,0,229,230,1,0,0,0,230,231,
        3,124,62,0,231,232,5,3,0,0,232,234,5,134,0,0,233,235,5,132,0,0,234,
        233,1,0,0,0,234,235,1,0,0,0,235,236,1,0,0,0,236,237,5,5,0,0,237,
        238,3,84,42,0,238,277,1,0,0,0,239,240,3,108,54,0,240,241,5,3,0,0,
        241,242,5,135,0,0,242,243,5,10,0,0,243,244,5,3,0,0,244,245,5,141,
        0,0,245,246,5,9,0,0,246,247,5,3,0,0,247,248,5,143,0,0,248,277,1,
        0,0,0,249,250,3,112,56,0,250,251,5,8,0,0,251,252,5,3,0,0,252,253,
        5,135,0,0,253,254,5,10,0,0,254,255,5,3,0,0,255,256,5,143,0,0,256,
        277,1,0,0,0,257,258,3,96,48,0,258,259,5,5,0,0,259,260,3,98,49,0,
        260,277,1,0,0,0,261,262,3,96,48,0,262,263,5,5,0,0,263,264,3,102,
        51,0,264,277,1,0,0,0,265,266,3,96,48,0,266,267,5,5,0,0,267,268,3,
        84,42,0,268,277,1,0,0,0,269,270,3,108,54,0,270,271,5,11,0,0,271,
        272,3,66,33,0,272,273,5,9,0,0,273,274,5,3,0,0,274,275,3,68,34,0,
        275,277,1,0,0,0,276,182,1,0,0,0,276,190,1,0,0,0,276,197,1,0,0,0,
        276,202,1,0,0,0,276,208,1,0,0,0,276,216,1,0,0,0,276,226,1,0,0,0,
        276,239,1,0,0,0,276,249,1,0,0,0,276,257,1,0,0,0,276,261,1,0,0,0,
        276,265,1,0,0,0,276,269,1,0,0,0,277,15,1,0,0,0,278,279,3,18,9,0,
        279,17,1,0,0,0,280,281,3,108,54,0,281,282,5,3,0,0,282,283,5,136,
        0,0,283,284,5,9,0,0,284,285,5,3,0,0,285,286,5,143,0,0,286,326,1,
        0,0,0,287,288,3,112,56,0,288,289,5,8,0,0,289,290,5,3,0,0,290,291,
        3,60,30,0,291,292,5,12,0,0,292,293,3,20,10,0,293,326,1,0,0,0,294,
        295,3,112,56,0,295,296,5,8,0,0,296,297,5,3,0,0,297,298,5,12,0,0,
        298,299,3,62,31,0,299,300,5,3,0,0,300,301,5,134,0,0,301,302,3,20,
        10,0,302,326,1,0,0,0,303,304,3,112,56,0,304,305,5,8,0,0,305,306,
        5,3,0,0,306,307,3,86,43,0,307,308,5,12,0,0,308,309,3,20,10,0,309,
        326,1,0,0,0,310,311,3,112,56,0,311,312,5,8,0,0,312,313,5,3,0,0,313,
        314,3,86,43,0,314,315,5,133,0,0,315,316,3,20,10,0,316,326,1,0,0,
        0,317,318,3,76,38,0,318,319,5,3,0,0,319,320,5,141,0,0,320,326,1,
        0,0,0,321,322,3,74,37,0,322,323,5,3,0,0,323,324,3,64,32,0,324,326,
        1,0,0,0,325,280,1,0,0,0,325,287,1,0,0,0,325,294,1,0,0,0,325,303,
        1,0,0,0,325,310,1,0,0,0,325,317,1,0,0,0,325,321,1,0,0,0,326,19,1,
        0,0,0,327,328,5,10,0,0,328,329,5,3,0,0,329,330,5,143,0,0,330,21,
        1,0,0,0,331,332,5,13,0,0,332,333,5,8,0,0,333,334,5,14,0,0,334,335,
        5,15,0,0,335,336,5,134,0,0,336,337,5,16,0,0,337,338,5,17,0,0,338,
        339,5,7,0,0,339,340,5,3,0,0,340,424,5,143,0,0,341,342,3,124,62,0,
        342,343,5,3,0,0,343,344,5,134,0,0,344,345,5,4,0,0,345,346,5,3,0,
        0,346,347,5,141,0,0,347,424,1,0,0,0,348,349,3,124,62,0,349,350,5,
        3,0,0,350,351,5,137,0,0,351,352,5,4,0,0,352,353,5,3,0,0,353,354,
        5,141,0,0,354,424,1,0,0,0,355,356,5,13,0,0,356,357,5,8,0,0,357,358,
        5,14,0,0,358,359,5,15,0,0,359,360,5,133,0,0,360,361,5,16,0,0,361,
        362,5,17,0,0,362,363,5,7,0,0,363,364,5,3,0,0,364,424,5,143,0,0,365,
        366,5,13,0,0,366,367,5,8,0,0,367,368,5,18,0,0,368,369,5,3,0,0,369,
        370,3,86,43,0,370,371,5,12,0,0,371,372,5,7,0,0,372,373,5,3,0,0,373,
        374,5,143,0,0,374,424,1,0,0,0,375,376,5,13,0,0,376,377,5,8,0,0,377,
        378,5,18,0,0,378,379,5,3,0,0,379,380,3,86,43,0,380,381,5,133,0,0,
        381,382,5,7,0,0,382,383,5,3,0,0,383,384,5,143,0,0,384,424,1,0,0,
        0,385,386,3,124,62,0,386,387,5,3,0,0,387,388,5,133,0,0,388,389,5,
        4,0,0,389,390,5,3,0,0,390,391,5,141,0,0,391,424,1,0,0,0,392,393,
        5,13,0,0,393,394,5,8,0,0,394,395,5,19,0,0,395,396,5,17,0,0,396,397,
        5,3,0,0,397,398,5,20,0,0,398,399,3,86,43,0,399,400,5,21,0,0,400,
        401,5,7,0,0,401,402,5,3,0,0,402,403,5,143,0,0,403,424,1,0,0,0,404,
        405,5,13,0,0,405,406,5,8,0,0,406,407,5,19,0,0,407,408,5,17,0,0,408,
        409,5,3,0,0,409,410,5,20,0,0,410,411,3,86,43,0,411,412,5,133,0,0,
        412,413,5,7,0,0,413,414,5,3,0,0,414,415,5,143,0,0,415,424,1,0,0,
        0,416,417,3,124,62,0,417,418,5,20,0,0,418,419,5,133,0,0,419,420,
        5,4,0,0,420,421,5,3,0,0,421,422,5,141,0,0,422,424,1,0,0,0,423,331,
        1,0,0,0,423,341,1,0,0,0,423,348,1,0,0,0,423,355,1,0,0,0,423,365,
        1,0,0,0,423,375,1,0,0,0,423,385,1,0,0,0,423,392,1,0,0,0,423,404,
        1,0,0,0,423,416,1,0,0,0,424,23,1,0,0,0,425,426,3,104,52,0,426,427,
        5,9,0,0,427,428,3,10,5,0,428,528,1,0,0,0,429,430,3,8,4,0,430,431,
        5,4,0,0,431,432,5,3,0,0,432,433,5,141,0,0,433,434,5,5,0,0,434,435,
        3,104,52,0,435,528,1,0,0,0,436,438,3,92,46,0,437,439,5,132,0,0,438,
        437,1,0,0,0,438,439,1,0,0,0,439,440,1,0,0,0,440,442,3,8,4,0,441,
        443,5,132,0,0,442,441,1,0,0,0,442,443,1,0,0,0,443,444,1,0,0,0,444,
        445,5,5,0,0,445,446,3,104,52,0,446,528,1,0,0,0,447,448,5,13,0,0,
        448,449,5,8,0,0,449,450,5,3,0,0,450,451,5,22,0,0,451,452,5,23,0,
        0,452,453,5,3,0,0,453,454,5,2,0,0,454,455,5,24,0,0,455,456,5,3,0,
        0,456,528,5,142,0,0,457,458,5,13,0,0,458,459,5,8,0,0,459,460,5,3,
        0,0,460,461,5,25,0,0,461,462,5,23,0,0,462,463,5,3,0,0,463,464,5,
        2,0,0,464,465,5,24,0,0,465,466,5,3,0,0,466,528,5,142,0,0,467,468,
        5,13,0,0,468,469,5,8,0,0,469,470,5,3,0,0,470,471,5,26,0,0,471,472,
        5,23,0,0,472,473,5,3,0,0,473,474,5,2,0,0,474,475,5,24,0,0,475,476,
        5,3,0,0,476,528,5,142,0,0,477,478,5,13,0,0,478,479,5,8,0,0,479,480,
        5,3,0,0,480,481,5,22,0,0,481,482,5,23,0,0,482,483,5,3,0,0,483,484,
        5,2,0,0,484,485,5,4,0,0,485,486,5,3,0,0,486,528,5,141,0,0,487,488,
        5,13,0,0,488,489,5,8,0,0,489,490,5,3,0,0,490,491,5,25,0,0,491,492,
        5,23,0,0,492,493,5,3,0,0,493,494,5,2,0,0,494,495,5,4,0,0,495,496,
        5,3,0,0,496,528,5,141,0,0,497,498,5,13,0,0,498,499,5,8,0,0,499,500,
        5,3,0,0,500,501,5,26,0,0,501,502,5,23,0,0,502,503,5,3,0,0,503,504,
        5,2,0,0,504,505,5,4,0,0,505,506,5,3,0,0,506,528,5,141,0,0,507,508,
        5,13,0,0,508,509,5,8,0,0,509,510,5,14,0,0,510,511,5,15,0,0,511,512,
        5,27,0,0,512,513,5,4,0,0,513,514,5,3,0,0,514,515,5,141,0,0,515,516,
        5,17,0,0,516,528,3,56,28,0,517,518,5,13,0,0,518,519,5,8,0,0,519,
        520,5,14,0,0,520,521,5,15,0,0,521,522,5,27,0,0,522,523,5,4,0,0,523,
        524,5,3,0,0,524,525,5,141,0,0,525,526,5,17,0,0,526,528,3,58,29,0,
        527,425,1,0,0,0,527,429,1,0,0,0,527,436,1,0,0,0,527,447,1,0,0,0,
        527,457,1,0,0,0,527,467,1,0,0,0,527,477,1,0,0,0,527,487,1,0,0,0,
        527,497,1,0,0,0,527,507,1,0,0,0,527,517,1,0,0,0,528,25,1,0,0,0,529,
        530,3,128,64,0,530,531,5,145,0,0,531,532,5,10,0,0,532,533,5,3,0,
        0,533,534,5,142,0,0,534,535,5,9,0,0,535,536,5,3,0,0,536,537,5,141,
        0,0,537,563,1,0,0,0,538,539,5,28,0,0,539,540,5,145,0,0,540,541,5,
        24,0,0,541,542,5,3,0,0,542,543,5,142,0,0,543,544,5,5,0,0,544,545,
        3,128,64,0,545,547,5,139,0,0,546,548,3,30,15,0,547,546,1,0,0,0,547,
        548,1,0,0,0,548,563,1,0,0,0,549,551,3,90,45,0,550,552,5,132,0,0,
        551,550,1,0,0,0,551,552,1,0,0,0,552,553,1,0,0,0,553,554,5,28,0,0,
        554,556,5,145,0,0,555,557,5,132,0,0,556,555,1,0,0,0,556,557,1,0,
        0,0,557,558,1,0,0,0,558,559,5,5,0,0,559,560,3,128,64,0,560,561,5,
        139,0,0,561,563,1,0,0,0,562,529,1,0,0,0,562,538,1,0,0,0,562,549,
        1,0,0,0,563,27,1,0,0,0,564,565,5,28,0,0,565,570,5,145,0,0,566,567,
        5,29,0,0,567,568,5,1,0,0,568,570,5,2,0,0,569,564,1,0,0,0,569,566,
        1,0,0,0,570,29,1,0,0,0,571,572,5,9,0,0,572,573,5,3,0,0,573,574,5,
        141,0,0,574,31,1,0,0,0,575,576,3,34,17,0,576,33,1,0,0,0,577,578,
        3,126,63,0,578,579,5,145,0,0,579,580,5,10,0,0,580,581,5,3,0,0,581,
        582,5,142,0,0,582,583,5,9,0,0,583,584,5,3,0,0,584,585,5,142,0,0,
        585,616,1,0,0,0,586,587,5,28,0,0,587,588,5,145,0,0,588,589,5,24,
        0,0,589,590,5,3,0,0,590,591,5,142,0,0,591,592,5,5,0,0,592,616,3,
        36,18,0,593,595,3,90,45,0,594,596,5,132,0,0,595,594,1,0,0,0,595,
        596,1,0,0,0,596,597,1,0,0,0,597,598,5,28,0,0,598,600,5,145,0,0,599,
        601,5,132,0,0,600,599,1,0,0,0,600,601,1,0,0,0,601,602,1,0,0,0,602,
        603,5,5,0,0,603,604,3,36,18,0,604,616,1,0,0,0,605,606,3,126,63,0,
        606,607,5,145,0,0,607,608,5,9,0,0,608,609,5,3,0,0,609,611,5,142,
        0,0,610,612,5,132,0,0,611,610,1,0,0,0,611,612,1,0,0,0,612,613,1,
        0,0,0,613,614,3,38,19,0,614,616,1,0,0,0,615,577,1,0,0,0,615,586,
        1,0,0,0,615,593,1,0,0,0,615,605,1,0,0,0,616,35,1,0,0,0,617,618,3,
        126,63,0,618,619,5,139,0,0,619,620,5,9,0,0,620,621,5,3,0,0,621,622,
        5,142,0,0,622,37,1,0,0,0,623,624,5,30,0,0,624,625,7,0,0,0,625,626,
        5,29,0,0,626,627,5,139,0,0,627,628,5,24,0,0,628,629,5,3,0,0,629,
        630,5,142,0,0,630,39,1,0,0,0,631,632,5,28,0,0,632,633,5,145,0,0,
        633,634,5,24,0,0,634,635,5,3,0,0,635,637,5,142,0,0,636,638,5,132,
        0,0,637,636,1,0,0,0,637,638,1,0,0,0,638,639,1,0,0,0,639,640,3,128,
        64,0,640,642,5,139,0,0,641,643,5,132,0,0,642,641,1,0,0,0,642,643,
        1,0,0,0,643,644,1,0,0,0,644,645,5,5,0,0,645,646,3,92,46,0,646,666,
        1,0,0,0,647,648,5,28,0,0,648,649,5,145,0,0,649,650,5,24,0,0,650,
        651,5,3,0,0,651,653,5,142,0,0,652,654,5,132,0,0,653,652,1,0,0,0,
        653,654,1,0,0,0,654,655,1,0,0,0,655,656,3,128,64,0,656,658,5,139,
        0,0,657,659,5,132,0,0,658,657,1,0,0,0,658,659,1,0,0,0,659,660,1,
        0,0,0,660,661,5,5,0,0,661,662,3,126,63,0,662,663,5,139,0,0,663,664,
        5,34,0,0,664,666,1,0,0,0,665,631,1,0,0,0,665,647,1,0,0,0,666,41,
        1,0,0,0,667,668,3,128,64,0,668,669,5,145,0,0,669,706,1,0,0,0,670,
        671,3,112,56,0,671,672,5,8,0,0,672,673,5,3,0,0,673,674,5,138,0,0,
        674,706,1,0,0,0,675,676,3,114,57,0,676,677,5,138,0,0,677,678,5,9,
        0,0,678,679,3,82,41,0,679,706,1,0,0,0,680,681,3,126,63,0,681,682,
        5,145,0,0,682,683,5,9,0,0,683,684,5,3,0,0,684,685,5,142,0,0,685,
        706,1,0,0,0,686,687,5,28,0,0,687,688,3,44,22,0,688,689,5,5,0,0,689,
        690,3,126,63,0,690,691,5,139,0,0,691,706,1,0,0,0,692,694,3,90,45,
        0,693,695,5,132,0,0,694,693,1,0,0,0,694,695,1,0,0,0,695,696,1,0,
        0,0,696,697,5,28,0,0,697,699,3,44,22,0,698,700,5,132,0,0,699,698,
        1,0,0,0,699,700,1,0,0,0,700,701,1,0,0,0,701,702,5,5,0,0,702,703,
        3,126,63,0,703,704,5,139,0,0,704,706,1,0,0,0,705,667,1,0,0,0,705,
        670,1,0,0,0,705,675,1,0,0,0,705,680,1,0,0,0,705,686,1,0,0,0,705,
        692,1,0,0,0,706,43,1,0,0,0,707,708,5,145,0,0,708,45,1,0,0,0,709,
        710,3,78,39,0,710,711,5,35,0,0,711,712,5,9,0,0,712,713,3,52,26,0,
        713,763,1,0,0,0,714,715,3,80,40,0,715,716,5,145,0,0,716,717,5,24,
        0,0,717,718,5,3,0,0,718,719,3,70,35,0,719,720,5,5,0,0,720,721,5,
        36,0,0,721,722,5,139,0,0,722,723,5,9,0,0,723,724,3,52,26,0,724,763,
        1,0,0,0,725,726,3,80,40,0,726,727,5,145,0,0,727,728,5,24,0,0,728,
        729,5,3,0,0,729,730,5,142,0,0,730,731,5,5,0,0,731,732,5,37,0,0,732,
        733,5,139,0,0,733,734,5,9,0,0,734,735,5,38,0,0,735,763,1,0,0,0,736,
        737,3,80,40,0,737,738,5,145,0,0,738,739,5,24,0,0,739,740,5,3,0,0,
        740,741,5,142,0,0,741,742,5,5,0,0,742,743,5,36,0,0,743,744,5,139,
        0,0,744,745,5,9,0,0,745,746,5,145,0,0,746,747,5,24,0,0,747,748,5,
        3,0,0,748,749,5,142,0,0,749,763,1,0,0,0,750,751,3,80,40,0,751,752,
        5,145,0,0,752,753,5,24,0,0,753,754,5,3,0,0,754,755,5,142,0,0,755,
        756,5,5,0,0,756,757,3,126,63,0,757,758,5,139,0,0,758,759,5,9,0,0,
        759,760,5,139,0,0,760,761,3,68,34,0,761,763,1,0,0,0,762,709,1,0,
        0,0,762,714,1,0,0,0,762,725,1,0,0,0,762,736,1,0,0,0,762,750,1,0,
        0,0,763,47,1,0,0,0,764,769,5,39,0,0,765,766,5,40,0,0,766,767,5,3,
        0,0,767,769,3,50,25,0,768,764,1,0,0,0,768,765,1,0,0,0,769,49,1,0,
        0,0,770,771,7,1,0,0,771,51,1,0,0,0,772,773,3,48,24,0,773,774,5,4,
        0,0,774,775,5,3,0,0,775,776,5,141,0,0,776,53,1,0,0,0,777,778,7,2,
        0,0,778,55,1,0,0,0,779,780,7,3,0,0,780,57,1,0,0,0,781,786,5,54,0,
        0,782,786,5,55,0,0,783,784,5,56,0,0,784,786,5,57,0,0,785,781,1,0,
        0,0,785,782,1,0,0,0,785,783,1,0,0,0,786,59,1,0,0,0,787,788,5,58,
        0,0,788,792,5,59,0,0,789,790,5,60,0,0,790,792,5,59,0,0,791,787,1,
        0,0,0,791,789,1,0,0,0,792,61,1,0,0,0,793,794,5,24,0,0,794,795,5,
        3,0,0,795,796,5,58,0,0,796,808,5,23,0,0,797,798,5,24,0,0,798,799,
        5,3,0,0,799,800,5,60,0,0,800,808,5,23,0,0,801,802,5,7,0,0,802,803,
        5,61,0,0,803,808,5,23,0,0,804,808,5,62,0,0,805,808,5,63,0,0,806,
        808,5,64,0,0,807,793,1,0,0,0,807,797,1,0,0,0,807,801,1,0,0,0,807,
        804,1,0,0,0,807,805,1,0,0,0,807,806,1,0,0,0,808,63,1,0,0,0,809,810,
        7,4,0,0,810,65,1,0,0,0,811,812,7,5,0,0,812,67,1,0,0,0,813,814,7,
        6,0,0,814,69,1,0,0,0,815,816,3,72,36,0,816,817,5,79,0,0,817,822,
        1,0,0,0,818,819,3,72,36,0,819,820,5,80,0,0,820,822,1,0,0,0,821,815,
        1,0,0,0,821,818,1,0,0,0,822,71,1,0,0,0,823,824,7,7,0,0,824,73,1,
        0,0,0,825,826,5,84,0,0,826,829,5,85,0,0,827,829,5,86,0,0,828,825,
        1,0,0,0,828,827,1,0,0,0,829,75,1,0,0,0,830,831,5,87,0,0,831,839,
        5,85,0,0,832,833,5,87,0,0,833,839,5,88,0,0,834,835,5,89,0,0,835,
        839,5,90,0,0,836,839,5,91,0,0,837,839,5,92,0,0,838,830,1,0,0,0,838,
        832,1,0,0,0,838,834,1,0,0,0,838,836,1,0,0,0,838,837,1,0,0,0,839,
        77,1,0,0,0,840,841,7,8,0,0,841,79,1,0,0,0,842,843,7,9,0,0,843,81,
        1,0,0,0,844,847,5,8,0,0,845,847,3,10,5,0,846,844,1,0,0,0,846,845,
        1,0,0,0,847,83,1,0,0,0,848,849,3,110,55,0,849,850,5,6,0,0,850,851,
        5,7,0,0,851,852,5,3,0,0,852,853,5,143,0,0,853,85,1,0,0,0,854,855,
        7,10,0,0,855,87,1,0,0,0,856,857,3,120,60,0,857,858,5,9,0,0,858,859,
        5,3,0,0,859,860,5,143,0,0,860,89,1,0,0,0,861,862,3,120,60,0,862,
        863,5,9,0,0,863,864,5,3,0,0,864,865,5,142,0,0,865,91,1,0,0,0,866,
        867,3,120,60,0,867,868,5,9,0,0,868,869,5,3,0,0,869,870,5,141,0,0,
        870,93,1,0,0,0,871,872,3,116,58,0,872,873,5,3,0,0,873,874,5,134,
        0,0,874,95,1,0,0,0,875,876,3,94,47,0,876,877,5,10,0,0,877,878,5,
        3,0,0,878,879,5,143,0,0,879,97,1,0,0,0,880,881,3,114,57,0,881,882,
        5,6,0,0,882,883,5,9,0,0,883,884,5,8,0,0,884,99,1,0,0,0,885,886,3,
        114,57,0,886,887,5,6,0,0,887,888,5,9,0,0,888,889,5,145,0,0,889,101,
        1,0,0,0,890,891,3,114,57,0,891,892,5,6,0,0,892,893,5,9,0,0,893,894,
        5,145,0,0,894,895,5,24,0,0,895,896,5,3,0,0,896,897,5,142,0,0,897,
        103,1,0,0,0,898,901,5,130,0,0,899,901,3,106,53,0,900,898,1,0,0,0,
        900,899,1,0,0,0,901,105,1,0,0,0,902,903,3,118,59,0,903,904,5,131,
        0,0,904,107,1,0,0,0,905,906,7,11,0,0,906,109,1,0,0,0,907,908,7,12,
        0,0,908,111,1,0,0,0,909,910,7,13,0,0,910,113,1,0,0,0,911,914,3,112,
        56,0,912,914,5,95,0,0,913,911,1,0,0,0,913,912,1,0,0,0,914,115,1,
        0,0,0,915,921,5,111,0,0,916,921,5,112,0,0,917,921,5,84,0,0,918,919,
        5,113,0,0,919,921,5,88,0,0,920,915,1,0,0,0,920,916,1,0,0,0,920,917,
        1,0,0,0,920,918,1,0,0,0,921,117,1,0,0,0,922,923,7,14,0,0,923,119,
        1,0,0,0,924,925,7,15,0,0,925,121,1,0,0,0,926,929,3,120,60,0,927,
        929,5,117,0,0,928,926,1,0,0,0,928,927,1,0,0,0,929,123,1,0,0,0,930,
        935,5,29,0,0,931,935,5,118,0,0,932,933,5,119,0,0,933,935,5,120,0,
        0,934,930,1,0,0,0,934,931,1,0,0,0,934,932,1,0,0,0,935,125,1,0,0,
        0,936,937,7,16,0,0,937,127,1,0,0,0,938,939,5,125,0,0,939,129,1,0,
        0,0,940,949,5,126,0,0,941,942,5,127,0,0,942,949,5,30,0,0,943,944,
        5,128,0,0,944,949,5,129,0,0,945,946,5,127,0,0,946,947,5,30,0,0,947,
        949,5,129,0,0,948,940,1,0,0,0,948,941,1,0,0,0,948,943,1,0,0,0,948,
        945,1,0,0,0,949,131,1,0,0,0,46,135,139,142,155,171,218,228,234,276,
        325,423,438,442,527,547,551,556,562,569,595,600,611,615,637,642,
        653,658,665,694,699,705,762,768,785,791,807,821,828,838,846,900,
        913,920,928,934,948
    ]

class gpsrParser ( Parser ):

    grammarFileName = "gpsr.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'a'", "'person'", "'the'", "'in'", "'and'", 
                     "'it'", "'on'", "'me'", "'to'", "'from'", "'my'", "'object'", 
                     "'tell'", "'how'", "'many'", "'there'", "'are'", "'what's'", 
                     "'which'", "'three'", "'objects'", "'name'", "'of'", 
                     "'at'", "'gender'", "'pose'", "'people'", "'meet'", 
                     "'find'", "'you'", "'may'", "'can'", "'will'", "'back'", 
                     "'drinks'", "'introduce'", "'ask'", "'leave'", "'everyone'", 
                     "'all'", "'men'", "'women'", "'guests'", "'elders'", 
                     "'children'", "'man'", "'woman'", "'boy'", "'girl'", 
                     "'boys'", "'girls'", "'male'", "'female'", "'sitting'", 
                     "'standing'", "'lying'", "'down'", "'left'", "'most'", 
                     "'right'", "'top'", "'above'", "'behind'", "'under'", 
                     "'litter'", "'garbage'", "'trash'", "'waste'", "'debris'", 
                     "'junk'", "'bag'", "'baggage'", "'valise'", "'suitcase'", 
                     "'trolley'", "'taxi'", "'cab'", "'uber'", "'entrance'", 
                     "'door'", "'front'", "'main'", "'rear'", "'take'", 
                     "'out'", "'dump'", "'clean'", "'up'", "'tidy'", "'op'", 
                     "'neaten'", "'order'", "'serve'", "'arrange'", "'deliver'", 
                     "'distribute'", "'give'", "'provide'", "'contact'", 
                     "'face'", "'greet'", "'biggest'", "'largest'", "'smallest'", 
                     "'heaviest'", "'lightest'", "'thinnest'", "'bring'", 
                     "'put'", "'place'", "'get'", "'grasp'", "'pick'", "'say'", 
                     "'go'", "'navigate'", "'enter'", "'locate'", "'look'", 
                     "'for'", "'guide'", "'escort'", "'lead'", "'accompany'", 
                     "'follow'", "'Please'", "'Could'", "'Robot'", "'please'", 
                     "<INVALID>", "<INVALID>", "','" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "Answer", "Whattosay", "Comma", 
                      "Category", "Object", "Object_alike", "Object_known", 
                      "Object_alike_obfuscated", "Object_obfuscated", "Pron", 
                      "Gesture", "Room", "Beacon", "Placement", "Location_except_room", 
                      "Name" ]

    RULE_instruction = 0
    RULE_mainSentence = 1
    RULE_pmain = 2
    RULE_main = 3
    RULE_findp = 4
    RULE_whoWhere = 5
    RULE_man = 6
    RULE_deliver = 7
    RULE_complexman = 8
    RULE_cmancmd = 9
    RULE_cmanobjsrc = 10
    RULE_fndobj = 11
    RULE_fndppl = 12
    RULE_follow = 13
    RULE_fllmeet = 14
    RULE_fllwdest = 15
    RULE_guide = 16
    RULE_gdcmd = 17
    RULE_guideto = 18
    RULE_gdwhere = 19
    RULE_followout = 20
    RULE_incomplete = 21
    RULE_inguidewho = 22
    RULE_partyhost = 23
    RULE_phpeople = 24
    RULE_peopletype = 25
    RULE_phpeopler = 26
    RULE_pgenders = 27
    RULE_pgenderp = 28
    RULE_pose = 29
    RULE_abspos = 30
    RULE_relpos = 31
    RULE_garbage = 32
    RULE_luggage = 33
    RULE_taxi = 34
    RULE_door = 35
    RULE_doorpos = 36
    RULE_vbtakeout = 37
    RULE_vbcleanup = 38
    RULE_vbserve = 39
    RULE_vbmeet = 40
    RULE_someone = 41
    RULE_place = 42
    RULE_oprop = 43
    RULE_goplace = 44
    RULE_gobeacon = 45
    RULE_goroom = 46
    RULE_take = 47
    RULE_takefrom = 48
    RULE_delivme = 49
    RULE_delivto = 50
    RULE_delivat = 51
    RULE_talk = 52
    RULE_speak = 53
    RULE_vbbtake = 54
    RULE_vbplace = 55
    RULE_vbbring = 56
    RULE_vbdeliver = 57
    RULE_vbtake = 58
    RULE_vbspeak = 59
    RULE_vbgopl = 60
    RULE_vbgor = 61
    RULE_vbfind = 62
    RULE_vbguide = 63
    RULE_vbfollow = 64
    RULE_polite = 65

    ruleNames =  [ "instruction", "mainSentence", "pmain", "main", "findp", 
                   "whoWhere", "man", "deliver", "complexman", "cmancmd", 
                   "cmanobjsrc", "fndobj", "fndppl", "follow", "fllmeet", 
                   "fllwdest", "guide", "gdcmd", "guideto", "gdwhere", "followout", 
                   "incomplete", "inguidewho", "partyhost", "phpeople", 
                   "peopletype", "phpeopler", "pgenders", "pgenderp", "pose", 
                   "abspos", "relpos", "garbage", "luggage", "taxi", "door", 
                   "doorpos", "vbtakeout", "vbcleanup", "vbserve", "vbmeet", 
                   "someone", "place", "oprop", "goplace", "gobeacon", "goroom", 
                   "take", "takefrom", "delivme", "delivto", "delivat", 
                   "talk", "speak", "vbbtake", "vbplace", "vbbring", "vbdeliver", 
                   "vbtake", "vbspeak", "vbgopl", "vbgor", "vbfind", "vbguide", 
                   "vbfollow", "polite" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    T__73=74
    T__74=75
    T__75=76
    T__76=77
    T__77=78
    T__78=79
    T__79=80
    T__80=81
    T__81=82
    T__82=83
    T__83=84
    T__84=85
    T__85=86
    T__86=87
    T__87=88
    T__88=89
    T__89=90
    T__90=91
    T__91=92
    T__92=93
    T__93=94
    T__94=95
    T__95=96
    T__96=97
    T__97=98
    T__98=99
    T__99=100
    T__100=101
    T__101=102
    T__102=103
    T__103=104
    T__104=105
    T__105=106
    T__106=107
    T__107=108
    T__108=109
    T__109=110
    T__110=111
    T__111=112
    T__112=113
    T__113=114
    T__114=115
    T__115=116
    T__116=117
    T__117=118
    T__118=119
    T__119=120
    T__120=121
    T__121=122
    T__122=123
    T__123=124
    T__124=125
    T__125=126
    T__126=127
    T__127=128
    T__128=129
    Answer=130
    Whattosay=131
    Comma=132
    Category=133
    Object=134
    Object_alike=135
    Object_known=136
    Object_alike_obfuscated=137
    Object_obfuscated=138
    Pron=139
    Gesture=140
    Room=141
    Beacon=142
    Placement=143
    Location_except_room=144
    Name=145

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class InstructionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mainSentence(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(gpsrParser.MainSentenceContext)
            else:
                return self.getTypedRuleContext(gpsrParser.MainSentenceContext,i)


        def getRuleIndex(self):
            return gpsrParser.RULE_instruction

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInstruction" ):
                return visitor.visitInstruction(self)
            else:
                return visitor.visitChildren(self)




    def instruction(self):

        localctx = gpsrParser.InstructionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_instruction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 133 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 132
                self.mainSentence()
                self.state = 135 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 805314560) != 0) or ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & 105475790340013) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MainSentenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pmain(self):
            return self.getTypedRuleContext(gpsrParser.PmainContext,0)


        def main(self):
            return self.getTypedRuleContext(gpsrParser.MainContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_mainSentence

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMainSentence" ):
                return visitor.visitMainSentence(self)
            else:
                return visitor.visitChildren(self)




    def mainSentence(self):

        localctx = gpsrParser.MainSentenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_mainSentence)
        try:
            self.state = 139
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 137
                self.pmain()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 138
                self.main()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PmainContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def main(self):
            return self.getTypedRuleContext(gpsrParser.MainContext,0)


        def polite(self):
            return self.getTypedRuleContext(gpsrParser.PoliteContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_pmain

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPmain" ):
                return visitor.visitPmain(self)
            else:
                return visitor.visitChildren(self)




    def pmain(self):

        localctx = gpsrParser.PmainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_pmain)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 142
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 126)) & ~0x3f) == 0 and ((1 << (_la - 126)) & 7) != 0):
                self.state = 141
                self.polite()


            self.state = 144
            self.main()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MainContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fndppl(self):
            return self.getTypedRuleContext(gpsrParser.FndpplContext,0)


        def fndobj(self):
            return self.getTypedRuleContext(gpsrParser.FndobjContext,0)


        def guide(self):
            return self.getTypedRuleContext(gpsrParser.GuideContext,0)


        def follow(self):
            return self.getTypedRuleContext(gpsrParser.FollowContext,0)


        def followout(self):
            return self.getTypedRuleContext(gpsrParser.FollowoutContext,0)


        def incomplete(self):
            return self.getTypedRuleContext(gpsrParser.IncompleteContext,0)


        def man(self):
            return self.getTypedRuleContext(gpsrParser.ManContext,0)


        def complexman(self):
            return self.getTypedRuleContext(gpsrParser.ComplexmanContext,0)


        def partyhost(self):
            return self.getTypedRuleContext(gpsrParser.PartyhostContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_main

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMain" ):
                return visitor.visitMain(self)
            else:
                return visitor.visitChildren(self)




    def main(self):

        localctx = gpsrParser.MainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_main)
        try:
            self.state = 155
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 146
                self.fndppl()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 147
                self.fndobj()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 148
                self.guide()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 149
                self.follow()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 150
                self.followout()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 151
                self.incomplete()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 152
                self.man()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 153
                self.complexman()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 154
                self.partyhost()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FindpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_findp

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Find_genderContext(FindpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FindpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def vbfind(self):
            return self.getTypedRuleContext(gpsrParser.VbfindContext,0)

        def pgenders(self):
            return self.getTypedRuleContext(gpsrParser.PgendersContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFind_gender" ):
                return visitor.visitFind_gender(self)
            else:
                return visitor.visitChildren(self)


    class Find_gestureContext(FindpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FindpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def vbfind(self):
            return self.getTypedRuleContext(gpsrParser.VbfindContext,0)

        def Gesture(self):
            return self.getToken(gpsrParser.Gesture, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFind_gesture" ):
                return visitor.visitFind_gesture(self)
            else:
                return visitor.visitChildren(self)


    class Find_poseContext(FindpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FindpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def vbfind(self):
            return self.getTypedRuleContext(gpsrParser.VbfindContext,0)

        def pose(self):
            return self.getTypedRuleContext(gpsrParser.PoseContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFind_pose" ):
                return visitor.visitFind_pose(self)
            else:
                return visitor.visitChildren(self)



    def findp(self):

        localctx = gpsrParser.FindpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_findp)
        try:
            self.state = 171
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                localctx = gpsrParser.Find_genderContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 157
                self.vbfind()
                self.state = 158
                self.match(gpsrParser.T__0)
                self.state = 159
                self.pgenders()
                pass

            elif la_ == 2:
                localctx = gpsrParser.Find_gestureContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 161
                self.vbfind()
                self.state = 162
                self.match(gpsrParser.T__0)
                self.state = 163
                self.match(gpsrParser.T__1)
                self.state = 164
                self.match(gpsrParser.Gesture)
                pass

            elif la_ == 3:
                localctx = gpsrParser.Find_poseContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 166
                self.vbfind()
                self.state = 167
                self.match(gpsrParser.T__0)
                self.state = 168
                self.match(gpsrParser.T__1)
                self.state = 169
                self.pose()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhoWhereContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Gesture(self):
            return self.getToken(gpsrParser.Gesture, 0)

        def Room(self):
            return self.getToken(gpsrParser.Room, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_whoWhere

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhoWhere" ):
                return visitor.visitWhoWhere(self)
            else:
                return visitor.visitChildren(self)




    def whoWhere(self):

        localctx = gpsrParser.WhoWhereContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_whoWhere)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 173
            self.match(gpsrParser.T__2)
            self.state = 174
            self.match(gpsrParser.T__1)
            self.state = 175
            self.match(gpsrParser.Gesture)
            self.state = 176
            self.match(gpsrParser.T__3)
            self.state = 177
            self.match(gpsrParser.T__2)
            self.state = 178
            self.match(gpsrParser.Room)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ManContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def deliver(self):
            return self.getTypedRuleContext(gpsrParser.DeliverContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_man

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMan" ):
                return visitor.visitMan(self)
            else:
                return visitor.visitChildren(self)




    def man(self):

        localctx = gpsrParser.ManContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_man)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 180
            self.deliver()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeliverContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def take(self):
            return self.getTypedRuleContext(gpsrParser.TakeContext,0)


        def vbplace(self):
            return self.getTypedRuleContext(gpsrParser.VbplaceContext,0)


        def Placement(self):
            return self.getToken(gpsrParser.Placement, 0)

        def Object_known(self):
            return self.getToken(gpsrParser.Object_known, 0)

        def vbbring(self):
            return self.getTypedRuleContext(gpsrParser.VbbringContext,0)


        def vbdeliver(self):
            return self.getTypedRuleContext(gpsrParser.VbdeliverContext,0)


        def someone(self):
            return self.getTypedRuleContext(gpsrParser.SomeoneContext,0)


        def takefrom(self):
            return self.getTypedRuleContext(gpsrParser.TakefromContext,0)


        def goplace(self):
            return self.getTypedRuleContext(gpsrParser.GoplaceContext,0)


        def vbfind(self):
            return self.getTypedRuleContext(gpsrParser.VbfindContext,0)


        def Object(self):
            return self.getToken(gpsrParser.Object, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(gpsrParser.Comma)
            else:
                return self.getToken(gpsrParser.Comma, i)

        def place(self):
            return self.getTypedRuleContext(gpsrParser.PlaceContext,0)


        def vbbtake(self):
            return self.getTypedRuleContext(gpsrParser.VbbtakeContext,0)


        def Object_alike(self):
            return self.getToken(gpsrParser.Object_alike, 0)

        def Room(self):
            return self.getToken(gpsrParser.Room, 0)

        def delivme(self):
            return self.getTypedRuleContext(gpsrParser.DelivmeContext,0)


        def delivat(self):
            return self.getTypedRuleContext(gpsrParser.DelivatContext,0)


        def luggage(self):
            return self.getTypedRuleContext(gpsrParser.LuggageContext,0)


        def taxi(self):
            return self.getTypedRuleContext(gpsrParser.TaxiContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_deliver

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeliver" ):
                return visitor.visitDeliver(self)
            else:
                return visitor.visitChildren(self)




    def deliver(self):

        localctx = gpsrParser.DeliverContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_deliver)
        self._la = 0 # Token type
        try:
            self.state = 276
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 182
                self.take()
                self.state = 183
                self.match(gpsrParser.T__4)
                self.state = 184
                self.vbplace()
                self.state = 185
                self.match(gpsrParser.T__5)
                self.state = 186
                self.match(gpsrParser.T__6)
                self.state = 187
                self.match(gpsrParser.T__2)
                self.state = 188
                self.match(gpsrParser.Placement)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 190
                self.vbplace()
                self.state = 191
                self.match(gpsrParser.T__2)
                self.state = 192
                self.match(gpsrParser.Object_known)
                self.state = 193
                self.match(gpsrParser.T__6)
                self.state = 194
                self.match(gpsrParser.T__2)
                self.state = 195
                self.match(gpsrParser.Placement)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 197
                self.vbbring()
                self.state = 198
                self.match(gpsrParser.T__7)
                self.state = 199
                self.match(gpsrParser.T__2)
                self.state = 200
                self.match(gpsrParser.Object_known)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 202
                self.vbdeliver()
                self.state = 203
                self.match(gpsrParser.T__2)
                self.state = 204
                self.match(gpsrParser.Object_known)
                self.state = 205
                self.match(gpsrParser.T__8)
                self.state = 206
                self.someone()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 208
                self.takefrom()
                self.state = 209
                self.match(gpsrParser.T__4)
                self.state = 210
                self.vbplace()
                self.state = 211
                self.match(gpsrParser.T__5)
                self.state = 212
                self.match(gpsrParser.T__6)
                self.state = 213
                self.match(gpsrParser.T__2)
                self.state = 214
                self.match(gpsrParser.Placement)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 216
                self.goplace()
                self.state = 218
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==132:
                    self.state = 217
                    self.match(gpsrParser.Comma)


                self.state = 220
                self.vbfind()
                self.state = 221
                self.match(gpsrParser.T__2)
                self.state = 222
                self.match(gpsrParser.Object)
                self.state = 223
                self.match(gpsrParser.T__8)
                self.state = 224
                self.someone()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 226
                self.goplace()
                self.state = 228
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==132:
                    self.state = 227
                    self.match(gpsrParser.Comma)


                self.state = 230
                self.vbfind()
                self.state = 231
                self.match(gpsrParser.T__2)
                self.state = 232
                self.match(gpsrParser.Object)
                self.state = 234
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==132:
                    self.state = 233
                    self.match(gpsrParser.Comma)


                self.state = 236
                self.match(gpsrParser.T__4)
                self.state = 237
                self.place()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 239
                self.vbbtake()
                self.state = 240
                self.match(gpsrParser.T__2)
                self.state = 241
                self.match(gpsrParser.Object_alike)
                self.state = 242
                self.match(gpsrParser.T__9)
                self.state = 243
                self.match(gpsrParser.T__2)
                self.state = 244
                self.match(gpsrParser.Room)
                self.state = 245
                self.match(gpsrParser.T__8)
                self.state = 246
                self.match(gpsrParser.T__2)
                self.state = 247
                self.match(gpsrParser.Placement)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 249
                self.vbbring()
                self.state = 250
                self.match(gpsrParser.T__7)
                self.state = 251
                self.match(gpsrParser.T__2)
                self.state = 252
                self.match(gpsrParser.Object_alike)
                self.state = 253
                self.match(gpsrParser.T__9)
                self.state = 254
                self.match(gpsrParser.T__2)
                self.state = 255
                self.match(gpsrParser.Placement)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 257
                self.takefrom()
                self.state = 258
                self.match(gpsrParser.T__4)
                self.state = 259
                self.delivme()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 261
                self.takefrom()
                self.state = 262
                self.match(gpsrParser.T__4)
                self.state = 263
                self.delivat()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 265
                self.takefrom()
                self.state = 266
                self.match(gpsrParser.T__4)
                self.state = 267
                self.place()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 269
                self.vbbtake()
                self.state = 270
                self.match(gpsrParser.T__10)
                self.state = 271
                self.luggage()
                self.state = 272
                self.match(gpsrParser.T__8)
                self.state = 273
                self.match(gpsrParser.T__2)
                self.state = 274
                self.taxi()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComplexmanContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cmancmd(self):
            return self.getTypedRuleContext(gpsrParser.CmancmdContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_complexman

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComplexman" ):
                return visitor.visitComplexman(self)
            else:
                return visitor.visitChildren(self)




    def complexman(self):

        localctx = gpsrParser.ComplexmanContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_complexman)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 278
            self.cmancmd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CmancmdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbbtake(self):
            return self.getTypedRuleContext(gpsrParser.VbbtakeContext,0)


        def Object_known(self):
            return self.getToken(gpsrParser.Object_known, 0)

        def Placement(self):
            return self.getToken(gpsrParser.Placement, 0)

        def vbbring(self):
            return self.getTypedRuleContext(gpsrParser.VbbringContext,0)


        def abspos(self):
            return self.getTypedRuleContext(gpsrParser.AbsposContext,0)


        def cmanobjsrc(self):
            return self.getTypedRuleContext(gpsrParser.CmanobjsrcContext,0)


        def relpos(self):
            return self.getTypedRuleContext(gpsrParser.RelposContext,0)


        def Object(self):
            return self.getToken(gpsrParser.Object, 0)

        def oprop(self):
            return self.getTypedRuleContext(gpsrParser.OpropContext,0)


        def Category(self):
            return self.getToken(gpsrParser.Category, 0)

        def vbcleanup(self):
            return self.getTypedRuleContext(gpsrParser.VbcleanupContext,0)


        def Room(self):
            return self.getToken(gpsrParser.Room, 0)

        def vbtakeout(self):
            return self.getTypedRuleContext(gpsrParser.VbtakeoutContext,0)


        def garbage(self):
            return self.getTypedRuleContext(gpsrParser.GarbageContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_cmancmd

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCmancmd" ):
                return visitor.visitCmancmd(self)
            else:
                return visitor.visitChildren(self)




    def cmancmd(self):

        localctx = gpsrParser.CmancmdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_cmancmd)
        try:
            self.state = 325
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 280
                self.vbbtake()
                self.state = 281
                self.match(gpsrParser.T__2)
                self.state = 282
                self.match(gpsrParser.Object_known)
                self.state = 283
                self.match(gpsrParser.T__8)
                self.state = 284
                self.match(gpsrParser.T__2)
                self.state = 285
                self.match(gpsrParser.Placement)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 287
                self.vbbring()
                self.state = 288
                self.match(gpsrParser.T__7)
                self.state = 289
                self.match(gpsrParser.T__2)
                self.state = 290
                self.abspos()
                self.state = 291
                self.match(gpsrParser.T__11)
                self.state = 292
                self.cmanobjsrc()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 294
                self.vbbring()
                self.state = 295
                self.match(gpsrParser.T__7)
                self.state = 296
                self.match(gpsrParser.T__2)
                self.state = 297
                self.match(gpsrParser.T__11)
                self.state = 298
                self.relpos()
                self.state = 299
                self.match(gpsrParser.T__2)
                self.state = 300
                self.match(gpsrParser.Object)
                self.state = 301
                self.cmanobjsrc()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 303
                self.vbbring()
                self.state = 304
                self.match(gpsrParser.T__7)
                self.state = 305
                self.match(gpsrParser.T__2)
                self.state = 306
                self.oprop()
                self.state = 307
                self.match(gpsrParser.T__11)
                self.state = 308
                self.cmanobjsrc()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 310
                self.vbbring()
                self.state = 311
                self.match(gpsrParser.T__7)
                self.state = 312
                self.match(gpsrParser.T__2)
                self.state = 313
                self.oprop()
                self.state = 314
                self.match(gpsrParser.Category)
                self.state = 315
                self.cmanobjsrc()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 317
                self.vbcleanup()
                self.state = 318
                self.match(gpsrParser.T__2)
                self.state = 319
                self.match(gpsrParser.Room)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 321
                self.vbtakeout()
                self.state = 322
                self.match(gpsrParser.T__2)
                self.state = 323
                self.garbage()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CmanobjsrcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Placement(self):
            return self.getToken(gpsrParser.Placement, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_cmanobjsrc

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCmanobjsrc" ):
                return visitor.visitCmanobjsrc(self)
            else:
                return visitor.visitChildren(self)




    def cmanobjsrc(self):

        localctx = gpsrParser.CmanobjsrcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_cmanobjsrc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 327
            self.match(gpsrParser.T__9)
            self.state = 328
            self.match(gpsrParser.T__2)
            self.state = 329
            self.match(gpsrParser.Placement)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FndobjContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Object(self):
            return self.getToken(gpsrParser.Object, 0)

        def Placement(self):
            return self.getToken(gpsrParser.Placement, 0)

        def vbfind(self):
            return self.getTypedRuleContext(gpsrParser.VbfindContext,0)


        def Room(self):
            return self.getToken(gpsrParser.Room, 0)

        def Object_alike_obfuscated(self):
            return self.getToken(gpsrParser.Object_alike_obfuscated, 0)

        def Category(self):
            return self.getToken(gpsrParser.Category, 0)

        def oprop(self):
            return self.getTypedRuleContext(gpsrParser.OpropContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_fndobj

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFndobj" ):
                return visitor.visitFndobj(self)
            else:
                return visitor.visitChildren(self)




    def fndobj(self):

        localctx = gpsrParser.FndobjContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_fndobj)
        try:
            self.state = 423
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 331
                self.match(gpsrParser.T__12)
                self.state = 332
                self.match(gpsrParser.T__7)
                self.state = 333
                self.match(gpsrParser.T__13)
                self.state = 334
                self.match(gpsrParser.T__14)
                self.state = 335
                self.match(gpsrParser.Object)
                self.state = 336
                self.match(gpsrParser.T__15)
                self.state = 337
                self.match(gpsrParser.T__16)
                self.state = 338
                self.match(gpsrParser.T__6)
                self.state = 339
                self.match(gpsrParser.T__2)
                self.state = 340
                self.match(gpsrParser.Placement)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 341
                self.vbfind()
                self.state = 342
                self.match(gpsrParser.T__2)
                self.state = 343
                self.match(gpsrParser.Object)
                self.state = 344
                self.match(gpsrParser.T__3)
                self.state = 345
                self.match(gpsrParser.T__2)
                self.state = 346
                self.match(gpsrParser.Room)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 348
                self.vbfind()
                self.state = 349
                self.match(gpsrParser.T__2)
                self.state = 350
                self.match(gpsrParser.Object_alike_obfuscated)
                self.state = 351
                self.match(gpsrParser.T__3)
                self.state = 352
                self.match(gpsrParser.T__2)
                self.state = 353
                self.match(gpsrParser.Room)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 355
                self.match(gpsrParser.T__12)
                self.state = 356
                self.match(gpsrParser.T__7)
                self.state = 357
                self.match(gpsrParser.T__13)
                self.state = 358
                self.match(gpsrParser.T__14)
                self.state = 359
                self.match(gpsrParser.Category)
                self.state = 360
                self.match(gpsrParser.T__15)
                self.state = 361
                self.match(gpsrParser.T__16)
                self.state = 362
                self.match(gpsrParser.T__6)
                self.state = 363
                self.match(gpsrParser.T__2)
                self.state = 364
                self.match(gpsrParser.Placement)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 365
                self.match(gpsrParser.T__12)
                self.state = 366
                self.match(gpsrParser.T__7)
                self.state = 367
                self.match(gpsrParser.T__17)
                self.state = 368
                self.match(gpsrParser.T__2)
                self.state = 369
                self.oprop()
                self.state = 370
                self.match(gpsrParser.T__11)
                self.state = 371
                self.match(gpsrParser.T__6)
                self.state = 372
                self.match(gpsrParser.T__2)
                self.state = 373
                self.match(gpsrParser.Placement)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 375
                self.match(gpsrParser.T__12)
                self.state = 376
                self.match(gpsrParser.T__7)
                self.state = 377
                self.match(gpsrParser.T__17)
                self.state = 378
                self.match(gpsrParser.T__2)
                self.state = 379
                self.oprop()
                self.state = 380
                self.match(gpsrParser.Category)
                self.state = 381
                self.match(gpsrParser.T__6)
                self.state = 382
                self.match(gpsrParser.T__2)
                self.state = 383
                self.match(gpsrParser.Placement)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 385
                self.vbfind()
                self.state = 386
                self.match(gpsrParser.T__2)
                self.state = 387
                self.match(gpsrParser.Category)
                self.state = 388
                self.match(gpsrParser.T__3)
                self.state = 389
                self.match(gpsrParser.T__2)
                self.state = 390
                self.match(gpsrParser.Room)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 392
                self.match(gpsrParser.T__12)
                self.state = 393
                self.match(gpsrParser.T__7)
                self.state = 394
                self.match(gpsrParser.T__18)
                self.state = 395
                self.match(gpsrParser.T__16)
                self.state = 396
                self.match(gpsrParser.T__2)
                self.state = 397
                self.match(gpsrParser.T__19)
                self.state = 398
                self.oprop()
                self.state = 399
                self.match(gpsrParser.T__20)
                self.state = 400
                self.match(gpsrParser.T__6)
                self.state = 401
                self.match(gpsrParser.T__2)
                self.state = 402
                self.match(gpsrParser.Placement)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 404
                self.match(gpsrParser.T__12)
                self.state = 405
                self.match(gpsrParser.T__7)
                self.state = 406
                self.match(gpsrParser.T__18)
                self.state = 407
                self.match(gpsrParser.T__16)
                self.state = 408
                self.match(gpsrParser.T__2)
                self.state = 409
                self.match(gpsrParser.T__19)
                self.state = 410
                self.oprop()
                self.state = 411
                self.match(gpsrParser.Category)
                self.state = 412
                self.match(gpsrParser.T__6)
                self.state = 413
                self.match(gpsrParser.T__2)
                self.state = 414
                self.match(gpsrParser.Placement)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 416
                self.vbfind()
                self.state = 417
                self.match(gpsrParser.T__19)
                self.state = 418
                self.match(gpsrParser.Category)
                self.state = 419
                self.match(gpsrParser.T__3)
                self.state = 420
                self.match(gpsrParser.T__2)
                self.state = 421
                self.match(gpsrParser.Room)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FndpplContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_fndppl

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Tell_gender_numberContext(FndpplContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FndpplContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Room(self):
            return self.getToken(gpsrParser.Room, 0)
        def pgenderp(self):
            return self.getTypedRuleContext(gpsrParser.PgenderpContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTell_gender_number" ):
                return visitor.visitTell_gender_number(self)
            else:
                return visitor.visitChildren(self)


    class Tell_name_beaconContext(FndpplContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FndpplContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Beacon(self):
            return self.getToken(gpsrParser.Beacon, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTell_name_beacon" ):
                return visitor.visitTell_name_beacon(self)
            else:
                return visitor.visitChildren(self)


    class Tell_gender_beaconContext(FndpplContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FndpplContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Beacon(self):
            return self.getToken(gpsrParser.Beacon, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTell_gender_beacon" ):
                return visitor.visitTell_gender_beacon(self)
            else:
                return visitor.visitChildren(self)


    class Tell_pose_roomContext(FndpplContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FndpplContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Room(self):
            return self.getToken(gpsrParser.Room, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTell_pose_room" ):
                return visitor.visitTell_pose_room(self)
            else:
                return visitor.visitChildren(self)


    class Find_talk_in_roomContext(FndpplContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FndpplContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def findp(self):
            return self.getTypedRuleContext(gpsrParser.FindpContext,0)

        def Room(self):
            return self.getToken(gpsrParser.Room, 0)
        def talk(self):
            return self.getTypedRuleContext(gpsrParser.TalkContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFind_talk_in_room" ):
                return visitor.visitFind_talk_in_room(self)
            else:
                return visitor.visitChildren(self)


    class Tell_pose_beaconContext(FndpplContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FndpplContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Beacon(self):
            return self.getToken(gpsrParser.Beacon, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTell_pose_beacon" ):
                return visitor.visitTell_pose_beacon(self)
            else:
                return visitor.visitChildren(self)


    class Tell_name_roomContext(FndpplContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FndpplContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Room(self):
            return self.getToken(gpsrParser.Room, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTell_name_room" ):
                return visitor.visitTell_name_room(self)
            else:
                return visitor.visitChildren(self)


    class Tell_pose_numberContext(FndpplContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FndpplContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Room(self):
            return self.getToken(gpsrParser.Room, 0)
        def pose(self):
            return self.getTypedRuleContext(gpsrParser.PoseContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTell_pose_number" ):
                return visitor.visitTell_pose_number(self)
            else:
                return visitor.visitChildren(self)


    class Talk_to_whowhereContext(FndpplContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FndpplContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def talk(self):
            return self.getTypedRuleContext(gpsrParser.TalkContext,0)

        def whoWhere(self):
            return self.getTypedRuleContext(gpsrParser.WhoWhereContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTalk_to_whowhere" ):
                return visitor.visitTalk_to_whowhere(self)
            else:
                return visitor.visitChildren(self)


    class Go_room_talkContext(FndpplContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FndpplContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def goroom(self):
            return self.getTypedRuleContext(gpsrParser.GoroomContext,0)

        def findp(self):
            return self.getTypedRuleContext(gpsrParser.FindpContext,0)

        def talk(self):
            return self.getTypedRuleContext(gpsrParser.TalkContext,0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(gpsrParser.Comma)
            else:
                return self.getToken(gpsrParser.Comma, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGo_room_talk" ):
                return visitor.visitGo_room_talk(self)
            else:
                return visitor.visitChildren(self)


    class Tell_gender_roomContext(FndpplContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FndpplContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Room(self):
            return self.getToken(gpsrParser.Room, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTell_gender_room" ):
                return visitor.visitTell_gender_room(self)
            else:
                return visitor.visitChildren(self)



    def fndppl(self):

        localctx = gpsrParser.FndpplContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_fndppl)
        self._la = 0 # Token type
        try:
            self.state = 527
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                localctx = gpsrParser.Talk_to_whowhereContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 425
                self.talk()
                self.state = 426
                self.match(gpsrParser.T__8)
                self.state = 427
                self.whoWhere()
                pass

            elif la_ == 2:
                localctx = gpsrParser.Find_talk_in_roomContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 429
                self.findp()
                self.state = 430
                self.match(gpsrParser.T__3)
                self.state = 431
                self.match(gpsrParser.T__2)
                self.state = 432
                self.match(gpsrParser.Room)
                self.state = 433
                self.match(gpsrParser.T__4)
                self.state = 434
                self.talk()
                pass

            elif la_ == 3:
                localctx = gpsrParser.Go_room_talkContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 436
                self.goroom()
                self.state = 438
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==132:
                    self.state = 437
                    self.match(gpsrParser.Comma)


                self.state = 440
                self.findp()
                self.state = 442
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==132:
                    self.state = 441
                    self.match(gpsrParser.Comma)


                self.state = 444
                self.match(gpsrParser.T__4)
                self.state = 445
                self.talk()
                pass

            elif la_ == 4:
                localctx = gpsrParser.Tell_name_beaconContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 447
                self.match(gpsrParser.T__12)
                self.state = 448
                self.match(gpsrParser.T__7)
                self.state = 449
                self.match(gpsrParser.T__2)
                self.state = 450
                self.match(gpsrParser.T__21)
                self.state = 451
                self.match(gpsrParser.T__22)
                self.state = 452
                self.match(gpsrParser.T__2)
                self.state = 453
                self.match(gpsrParser.T__1)
                self.state = 454
                self.match(gpsrParser.T__23)
                self.state = 455
                self.match(gpsrParser.T__2)
                self.state = 456
                self.match(gpsrParser.Beacon)
                pass

            elif la_ == 5:
                localctx = gpsrParser.Tell_gender_beaconContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 457
                self.match(gpsrParser.T__12)
                self.state = 458
                self.match(gpsrParser.T__7)
                self.state = 459
                self.match(gpsrParser.T__2)
                self.state = 460
                self.match(gpsrParser.T__24)
                self.state = 461
                self.match(gpsrParser.T__22)
                self.state = 462
                self.match(gpsrParser.T__2)
                self.state = 463
                self.match(gpsrParser.T__1)
                self.state = 464
                self.match(gpsrParser.T__23)
                self.state = 465
                self.match(gpsrParser.T__2)
                self.state = 466
                self.match(gpsrParser.Beacon)
                pass

            elif la_ == 6:
                localctx = gpsrParser.Tell_pose_beaconContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 467
                self.match(gpsrParser.T__12)
                self.state = 468
                self.match(gpsrParser.T__7)
                self.state = 469
                self.match(gpsrParser.T__2)
                self.state = 470
                self.match(gpsrParser.T__25)
                self.state = 471
                self.match(gpsrParser.T__22)
                self.state = 472
                self.match(gpsrParser.T__2)
                self.state = 473
                self.match(gpsrParser.T__1)
                self.state = 474
                self.match(gpsrParser.T__23)
                self.state = 475
                self.match(gpsrParser.T__2)
                self.state = 476
                self.match(gpsrParser.Beacon)
                pass

            elif la_ == 7:
                localctx = gpsrParser.Tell_name_roomContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 477
                self.match(gpsrParser.T__12)
                self.state = 478
                self.match(gpsrParser.T__7)
                self.state = 479
                self.match(gpsrParser.T__2)
                self.state = 480
                self.match(gpsrParser.T__21)
                self.state = 481
                self.match(gpsrParser.T__22)
                self.state = 482
                self.match(gpsrParser.T__2)
                self.state = 483
                self.match(gpsrParser.T__1)
                self.state = 484
                self.match(gpsrParser.T__3)
                self.state = 485
                self.match(gpsrParser.T__2)
                self.state = 486
                self.match(gpsrParser.Room)
                pass

            elif la_ == 8:
                localctx = gpsrParser.Tell_gender_roomContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 487
                self.match(gpsrParser.T__12)
                self.state = 488
                self.match(gpsrParser.T__7)
                self.state = 489
                self.match(gpsrParser.T__2)
                self.state = 490
                self.match(gpsrParser.T__24)
                self.state = 491
                self.match(gpsrParser.T__22)
                self.state = 492
                self.match(gpsrParser.T__2)
                self.state = 493
                self.match(gpsrParser.T__1)
                self.state = 494
                self.match(gpsrParser.T__3)
                self.state = 495
                self.match(gpsrParser.T__2)
                self.state = 496
                self.match(gpsrParser.Room)
                pass

            elif la_ == 9:
                localctx = gpsrParser.Tell_pose_roomContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 497
                self.match(gpsrParser.T__12)
                self.state = 498
                self.match(gpsrParser.T__7)
                self.state = 499
                self.match(gpsrParser.T__2)
                self.state = 500
                self.match(gpsrParser.T__25)
                self.state = 501
                self.match(gpsrParser.T__22)
                self.state = 502
                self.match(gpsrParser.T__2)
                self.state = 503
                self.match(gpsrParser.T__1)
                self.state = 504
                self.match(gpsrParser.T__3)
                self.state = 505
                self.match(gpsrParser.T__2)
                self.state = 506
                self.match(gpsrParser.Room)
                pass

            elif la_ == 10:
                localctx = gpsrParser.Tell_gender_numberContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 507
                self.match(gpsrParser.T__12)
                self.state = 508
                self.match(gpsrParser.T__7)
                self.state = 509
                self.match(gpsrParser.T__13)
                self.state = 510
                self.match(gpsrParser.T__14)
                self.state = 511
                self.match(gpsrParser.T__26)
                self.state = 512
                self.match(gpsrParser.T__3)
                self.state = 513
                self.match(gpsrParser.T__2)
                self.state = 514
                self.match(gpsrParser.Room)
                self.state = 515
                self.match(gpsrParser.T__16)
                self.state = 516
                self.pgenderp()
                pass

            elif la_ == 11:
                localctx = gpsrParser.Tell_pose_numberContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 517
                self.match(gpsrParser.T__12)
                self.state = 518
                self.match(gpsrParser.T__7)
                self.state = 519
                self.match(gpsrParser.T__13)
                self.state = 520
                self.match(gpsrParser.T__14)
                self.state = 521
                self.match(gpsrParser.T__26)
                self.state = 522
                self.match(gpsrParser.T__3)
                self.state = 523
                self.match(gpsrParser.T__2)
                self.state = 524
                self.match(gpsrParser.Room)
                self.state = 525
                self.match(gpsrParser.T__16)
                self.state = 526
                self.pose()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FollowContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_follow

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class From_beacon_to_whereContext(FollowContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FollowContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def gobeacon(self):
            return self.getTypedRuleContext(gpsrParser.GobeaconContext,0)

        def Name(self):
            return self.getToken(gpsrParser.Name, 0)
        def vbfollow(self):
            return self.getTypedRuleContext(gpsrParser.VbfollowContext,0)

        def Pron(self):
            return self.getToken(gpsrParser.Pron, 0)
        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(gpsrParser.Comma)
            else:
                return self.getToken(gpsrParser.Comma, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrom_beacon_to_where" ):
                return visitor.visitFrom_beacon_to_where(self)
            else:
                return visitor.visitChildren(self)


    class From_beacon_to_roomContext(FollowContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FollowContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def vbfollow(self):
            return self.getTypedRuleContext(gpsrParser.VbfollowContext,0)

        def Name(self):
            return self.getToken(gpsrParser.Name, 0)
        def Beacon(self):
            return self.getToken(gpsrParser.Beacon, 0)
        def Room(self):
            return self.getToken(gpsrParser.Room, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrom_beacon_to_room" ):
                return visitor.visitFrom_beacon_to_room(self)
            else:
                return visitor.visitChildren(self)


    class From_beacon_to_room_indirectContext(FollowContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FollowContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Name(self):
            return self.getToken(gpsrParser.Name, 0)
        def Beacon(self):
            return self.getToken(gpsrParser.Beacon, 0)
        def vbfollow(self):
            return self.getTypedRuleContext(gpsrParser.VbfollowContext,0)

        def Pron(self):
            return self.getToken(gpsrParser.Pron, 0)
        def fllwdest(self):
            return self.getTypedRuleContext(gpsrParser.FllwdestContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrom_beacon_to_room_indirect" ):
                return visitor.visitFrom_beacon_to_room_indirect(self)
            else:
                return visitor.visitChildren(self)



    def follow(self):

        localctx = gpsrParser.FollowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_follow)
        self._la = 0 # Token type
        try:
            self.state = 562
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [125]:
                localctx = gpsrParser.From_beacon_to_roomContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 529
                self.vbfollow()
                self.state = 530
                self.match(gpsrParser.Name)
                self.state = 531
                self.match(gpsrParser.T__9)
                self.state = 532
                self.match(gpsrParser.T__2)
                self.state = 533
                self.match(gpsrParser.Beacon)
                self.state = 534
                self.match(gpsrParser.T__8)
                self.state = 535
                self.match(gpsrParser.T__2)
                self.state = 536
                self.match(gpsrParser.Room)
                pass
            elif token in [28]:
                localctx = gpsrParser.From_beacon_to_room_indirectContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 538
                self.match(gpsrParser.T__27)
                self.state = 539
                self.match(gpsrParser.Name)
                self.state = 540
                self.match(gpsrParser.T__23)
                self.state = 541
                self.match(gpsrParser.T__2)
                self.state = 542
                self.match(gpsrParser.Beacon)
                self.state = 543
                self.match(gpsrParser.T__4)
                self.state = 544
                self.vbfollow()
                self.state = 545
                self.match(gpsrParser.Pron)
                self.state = 547
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==9:
                    self.state = 546
                    self.fllwdest()


                pass
            elif token in [115, 116]:
                localctx = gpsrParser.From_beacon_to_whereContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 549
                self.gobeacon()
                self.state = 551
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==132:
                    self.state = 550
                    self.match(gpsrParser.Comma)


                self.state = 553
                self.match(gpsrParser.T__27)
                self.state = 554
                self.match(gpsrParser.Name)
                self.state = 556
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==132:
                    self.state = 555
                    self.match(gpsrParser.Comma)


                self.state = 558
                self.match(gpsrParser.T__4)
                self.state = 559
                self.vbfollow()
                self.state = 560
                self.match(gpsrParser.Pron)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FllmeetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Name(self):
            return self.getToken(gpsrParser.Name, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_fllmeet

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFllmeet" ):
                return visitor.visitFllmeet(self)
            else:
                return visitor.visitChildren(self)




    def fllmeet(self):

        localctx = gpsrParser.FllmeetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_fllmeet)
        try:
            self.state = 569
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [28]:
                self.enterOuterAlt(localctx, 1)
                self.state = 564
                self.match(gpsrParser.T__27)
                self.state = 565
                self.match(gpsrParser.Name)
                pass
            elif token in [29]:
                self.enterOuterAlt(localctx, 2)
                self.state = 566
                self.match(gpsrParser.T__28)
                self.state = 567
                self.match(gpsrParser.T__0)
                self.state = 568
                self.match(gpsrParser.T__1)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FllwdestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Room(self):
            return self.getToken(gpsrParser.Room, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_fllwdest

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFllwdest" ):
                return visitor.visitFllwdest(self)
            else:
                return visitor.visitChildren(self)




    def fllwdest(self):

        localctx = gpsrParser.FllwdestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_fllwdest)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 571
            self.match(gpsrParser.T__8)
            self.state = 572
            self.match(gpsrParser.T__2)
            self.state = 573
            self.match(gpsrParser.Room)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GuideContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def gdcmd(self):
            return self.getTypedRuleContext(gpsrParser.GdcmdContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_guide

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGuide" ):
                return visitor.visitGuide(self)
            else:
                return visitor.visitChildren(self)




    def guide(self):

        localctx = gpsrParser.GuideContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_guide)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 575
            self.gdcmd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GdcmdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_gdcmd

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Beacon_to_beacon_gobeacon_guidetoContext(GdcmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.GdcmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def gobeacon(self):
            return self.getTypedRuleContext(gpsrParser.GobeaconContext,0)

        def Name(self):
            return self.getToken(gpsrParser.Name, 0)
        def guideto(self):
            return self.getTypedRuleContext(gpsrParser.GuidetoContext,0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(gpsrParser.Comma)
            else:
                return self.getToken(gpsrParser.Comma, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBeacon_to_beacon_gobeacon_guideto" ):
                return visitor.visitBeacon_to_beacon_gobeacon_guideto(self)
            else:
                return visitor.visitChildren(self)


    class Beacon_to_beaconContext(GdcmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.GdcmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def vbguide(self):
            return self.getTypedRuleContext(gpsrParser.VbguideContext,0)

        def Name(self):
            return self.getToken(gpsrParser.Name, 0)
        def Beacon(self, i:int=None):
            if i is None:
                return self.getTokens(gpsrParser.Beacon)
            else:
                return self.getToken(gpsrParser.Beacon, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBeacon_to_beacon" ):
                return visitor.visitBeacon_to_beacon(self)
            else:
                return visitor.visitChildren(self)


    class Beacon_to_beacon_guide_toContext(GdcmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.GdcmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Name(self):
            return self.getToken(gpsrParser.Name, 0)
        def Beacon(self):
            return self.getToken(gpsrParser.Beacon, 0)
        def guideto(self):
            return self.getTypedRuleContext(gpsrParser.GuidetoContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBeacon_to_beacon_guide_to" ):
                return visitor.visitBeacon_to_beacon_guide_to(self)
            else:
                return visitor.visitChildren(self)


    class Beacon_to_beacon_gdwhereContext(GdcmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.GdcmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def vbguide(self):
            return self.getTypedRuleContext(gpsrParser.VbguideContext,0)

        def Name(self):
            return self.getToken(gpsrParser.Name, 0)
        def Beacon(self):
            return self.getToken(gpsrParser.Beacon, 0)
        def gdwhere(self):
            return self.getTypedRuleContext(gpsrParser.GdwhereContext,0)

        def Comma(self):
            return self.getToken(gpsrParser.Comma, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBeacon_to_beacon_gdwhere" ):
                return visitor.visitBeacon_to_beacon_gdwhere(self)
            else:
                return visitor.visitChildren(self)



    def gdcmd(self):

        localctx = gpsrParser.GdcmdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_gdcmd)
        self._la = 0 # Token type
        try:
            self.state = 615
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                localctx = gpsrParser.Beacon_to_beaconContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 577
                self.vbguide()
                self.state = 578
                self.match(gpsrParser.Name)
                self.state = 579
                self.match(gpsrParser.T__9)
                self.state = 580
                self.match(gpsrParser.T__2)
                self.state = 581
                self.match(gpsrParser.Beacon)
                self.state = 582
                self.match(gpsrParser.T__8)
                self.state = 583
                self.match(gpsrParser.T__2)
                self.state = 584
                self.match(gpsrParser.Beacon)
                pass

            elif la_ == 2:
                localctx = gpsrParser.Beacon_to_beacon_guide_toContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 586
                self.match(gpsrParser.T__27)
                self.state = 587
                self.match(gpsrParser.Name)
                self.state = 588
                self.match(gpsrParser.T__23)
                self.state = 589
                self.match(gpsrParser.T__2)
                self.state = 590
                self.match(gpsrParser.Beacon)
                self.state = 591
                self.match(gpsrParser.T__4)
                self.state = 592
                self.guideto()
                pass

            elif la_ == 3:
                localctx = gpsrParser.Beacon_to_beacon_gobeacon_guidetoContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 593
                self.gobeacon()
                self.state = 595
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==132:
                    self.state = 594
                    self.match(gpsrParser.Comma)


                self.state = 597
                self.match(gpsrParser.T__27)
                self.state = 598
                self.match(gpsrParser.Name)
                self.state = 600
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==132:
                    self.state = 599
                    self.match(gpsrParser.Comma)


                self.state = 602
                self.match(gpsrParser.T__4)
                self.state = 603
                self.guideto()
                pass

            elif la_ == 4:
                localctx = gpsrParser.Beacon_to_beacon_gdwhereContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 605
                self.vbguide()
                self.state = 606
                self.match(gpsrParser.Name)
                self.state = 607
                self.match(gpsrParser.T__8)
                self.state = 608
                self.match(gpsrParser.T__2)
                self.state = 609
                self.match(gpsrParser.Beacon)
                self.state = 611
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==132:
                    self.state = 610
                    self.match(gpsrParser.Comma)


                self.state = 613
                self.gdwhere()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GuidetoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbguide(self):
            return self.getTypedRuleContext(gpsrParser.VbguideContext,0)


        def Pron(self):
            return self.getToken(gpsrParser.Pron, 0)

        def Beacon(self):
            return self.getToken(gpsrParser.Beacon, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_guideto

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGuideto" ):
                return visitor.visitGuideto(self)
            else:
                return visitor.visitChildren(self)




    def guideto(self):

        localctx = gpsrParser.GuidetoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_guideto)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 617
            self.vbguide()
            self.state = 618
            self.match(gpsrParser.Pron)
            self.state = 619
            self.match(gpsrParser.T__8)
            self.state = 620
            self.match(gpsrParser.T__2)
            self.state = 621
            self.match(gpsrParser.Beacon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GdwhereContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Pron(self):
            return self.getToken(gpsrParser.Pron, 0)

        def Beacon(self):
            return self.getToken(gpsrParser.Beacon, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_gdwhere

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGdwhere" ):
                return visitor.visitGdwhere(self)
            else:
                return visitor.visitChildren(self)




    def gdwhere(self):

        localctx = gpsrParser.GdwhereContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_gdwhere)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 623
            self.match(gpsrParser.T__29)
            self.state = 624
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 15032385536) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 625
            self.match(gpsrParser.T__28)
            self.state = 626
            self.match(gpsrParser.Pron)
            self.state = 627
            self.match(gpsrParser.T__23)
            self.state = 628
            self.match(gpsrParser.T__2)
            self.state = 629
            self.match(gpsrParser.Beacon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FollowoutContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_followout

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Beacon_to_roomContext(FollowoutContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FollowoutContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Name(self):
            return self.getToken(gpsrParser.Name, 0)
        def Beacon(self):
            return self.getToken(gpsrParser.Beacon, 0)
        def vbfollow(self):
            return self.getTypedRuleContext(gpsrParser.VbfollowContext,0)

        def Pron(self):
            return self.getToken(gpsrParser.Pron, 0)
        def goroom(self):
            return self.getTypedRuleContext(gpsrParser.GoroomContext,0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(gpsrParser.Comma)
            else:
                return self.getToken(gpsrParser.Comma, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBeacon_to_room" ):
                return visitor.visitBeacon_to_room(self)
            else:
                return visitor.visitChildren(self)


    class Beacon_to_backContext(FollowoutContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FollowoutContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Name(self):
            return self.getToken(gpsrParser.Name, 0)
        def Beacon(self):
            return self.getToken(gpsrParser.Beacon, 0)
        def vbfollow(self):
            return self.getTypedRuleContext(gpsrParser.VbfollowContext,0)

        def Pron(self, i:int=None):
            if i is None:
                return self.getTokens(gpsrParser.Pron)
            else:
                return self.getToken(gpsrParser.Pron, i)
        def vbguide(self):
            return self.getTypedRuleContext(gpsrParser.VbguideContext,0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(gpsrParser.Comma)
            else:
                return self.getToken(gpsrParser.Comma, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBeacon_to_back" ):
                return visitor.visitBeacon_to_back(self)
            else:
                return visitor.visitChildren(self)



    def followout(self):

        localctx = gpsrParser.FollowoutContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_followout)
        self._la = 0 # Token type
        try:
            self.state = 665
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                localctx = gpsrParser.Beacon_to_roomContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 631
                self.match(gpsrParser.T__27)
                self.state = 632
                self.match(gpsrParser.Name)
                self.state = 633
                self.match(gpsrParser.T__23)
                self.state = 634
                self.match(gpsrParser.T__2)
                self.state = 635
                self.match(gpsrParser.Beacon)
                self.state = 637
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==132:
                    self.state = 636
                    self.match(gpsrParser.Comma)


                self.state = 639
                self.vbfollow()
                self.state = 640
                self.match(gpsrParser.Pron)
                self.state = 642
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==132:
                    self.state = 641
                    self.match(gpsrParser.Comma)


                self.state = 644
                self.match(gpsrParser.T__4)
                self.state = 645
                self.goroom()
                pass

            elif la_ == 2:
                localctx = gpsrParser.Beacon_to_backContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 647
                self.match(gpsrParser.T__27)
                self.state = 648
                self.match(gpsrParser.Name)
                self.state = 649
                self.match(gpsrParser.T__23)
                self.state = 650
                self.match(gpsrParser.T__2)
                self.state = 651
                self.match(gpsrParser.Beacon)
                self.state = 653
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==132:
                    self.state = 652
                    self.match(gpsrParser.Comma)


                self.state = 655
                self.vbfollow()
                self.state = 656
                self.match(gpsrParser.Pron)
                self.state = 658
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==132:
                    self.state = 657
                    self.match(gpsrParser.Comma)


                self.state = 660
                self.match(gpsrParser.T__4)
                self.state = 661
                self.vbguide()
                self.state = 662
                self.match(gpsrParser.Pron)
                self.state = 663
                self.match(gpsrParser.T__33)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IncompleteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbfollow(self):
            return self.getTypedRuleContext(gpsrParser.VbfollowContext,0)


        def Name(self):
            return self.getToken(gpsrParser.Name, 0)

        def vbbring(self):
            return self.getTypedRuleContext(gpsrParser.VbbringContext,0)


        def Object_obfuscated(self):
            return self.getToken(gpsrParser.Object_obfuscated, 0)

        def vbdeliver(self):
            return self.getTypedRuleContext(gpsrParser.VbdeliverContext,0)


        def someone(self):
            return self.getTypedRuleContext(gpsrParser.SomeoneContext,0)


        def vbguide(self):
            return self.getTypedRuleContext(gpsrParser.VbguideContext,0)


        def Beacon(self):
            return self.getToken(gpsrParser.Beacon, 0)

        def inguidewho(self):
            return self.getTypedRuleContext(gpsrParser.InguidewhoContext,0)


        def Pron(self):
            return self.getToken(gpsrParser.Pron, 0)

        def gobeacon(self):
            return self.getTypedRuleContext(gpsrParser.GobeaconContext,0)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(gpsrParser.Comma)
            else:
                return self.getToken(gpsrParser.Comma, i)

        def getRuleIndex(self):
            return gpsrParser.RULE_incomplete

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIncomplete" ):
                return visitor.visitIncomplete(self)
            else:
                return visitor.visitChildren(self)




    def incomplete(self):

        localctx = gpsrParser.IncompleteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_incomplete)
        self._la = 0 # Token type
        try:
            self.state = 705
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 667
                self.vbfollow()
                self.state = 668
                self.match(gpsrParser.Name)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 670
                self.vbbring()
                self.state = 671
                self.match(gpsrParser.T__7)
                self.state = 672
                self.match(gpsrParser.T__2)
                self.state = 673
                self.match(gpsrParser.Object_obfuscated)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 675
                self.vbdeliver()
                self.state = 676
                self.match(gpsrParser.Object_obfuscated)
                self.state = 677
                self.match(gpsrParser.T__8)
                self.state = 678
                self.someone()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 680
                self.vbguide()
                self.state = 681
                self.match(gpsrParser.Name)
                self.state = 682
                self.match(gpsrParser.T__8)
                self.state = 683
                self.match(gpsrParser.T__2)
                self.state = 684
                self.match(gpsrParser.Beacon)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 686
                self.match(gpsrParser.T__27)
                self.state = 687
                self.inguidewho()
                self.state = 688
                self.match(gpsrParser.T__4)
                self.state = 689
                self.vbguide()
                self.state = 690
                self.match(gpsrParser.Pron)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 692
                self.gobeacon()
                self.state = 694
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==132:
                    self.state = 693
                    self.match(gpsrParser.Comma)


                self.state = 696
                self.match(gpsrParser.T__27)
                self.state = 697
                self.inguidewho()
                self.state = 699
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==132:
                    self.state = 698
                    self.match(gpsrParser.Comma)


                self.state = 701
                self.match(gpsrParser.T__4)
                self.state = 702
                self.vbguide()
                self.state = 703
                self.match(gpsrParser.Pron)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InguidewhoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Name(self):
            return self.getToken(gpsrParser.Name, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_inguidewho

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInguidewho" ):
                return visitor.visitInguidewho(self)
            else:
                return visitor.visitChildren(self)




    def inguidewho(self):

        localctx = gpsrParser.InguidewhoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_inguidewho)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 707
            self.match(gpsrParser.Name)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartyhostContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbserve(self):
            return self.getTypedRuleContext(gpsrParser.VbserveContext,0)


        def phpeopler(self):
            return self.getTypedRuleContext(gpsrParser.PhpeoplerContext,0)


        def vbmeet(self):
            return self.getTypedRuleContext(gpsrParser.VbmeetContext,0)


        def Name(self, i:int=None):
            if i is None:
                return self.getTokens(gpsrParser.Name)
            else:
                return self.getToken(gpsrParser.Name, i)

        def door(self):
            return self.getTypedRuleContext(gpsrParser.DoorContext,0)


        def Pron(self, i:int=None):
            if i is None:
                return self.getTokens(gpsrParser.Pron)
            else:
                return self.getToken(gpsrParser.Pron, i)

        def Beacon(self, i:int=None):
            if i is None:
                return self.getTokens(gpsrParser.Beacon)
            else:
                return self.getToken(gpsrParser.Beacon, i)

        def vbguide(self):
            return self.getTypedRuleContext(gpsrParser.VbguideContext,0)


        def taxi(self):
            return self.getTypedRuleContext(gpsrParser.TaxiContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_partyhost

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartyhost" ):
                return visitor.visitPartyhost(self)
            else:
                return visitor.visitChildren(self)




    def partyhost(self):

        localctx = gpsrParser.PartyhostContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_partyhost)
        try:
            self.state = 762
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 709
                self.vbserve()
                self.state = 710
                self.match(gpsrParser.T__34)
                self.state = 711
                self.match(gpsrParser.T__8)
                self.state = 712
                self.phpeopler()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 714
                self.vbmeet()
                self.state = 715
                self.match(gpsrParser.Name)
                self.state = 716
                self.match(gpsrParser.T__23)
                self.state = 717
                self.match(gpsrParser.T__2)
                self.state = 718
                self.door()
                self.state = 719
                self.match(gpsrParser.T__4)
                self.state = 720
                self.match(gpsrParser.T__35)
                self.state = 721
                self.match(gpsrParser.Pron)
                self.state = 722
                self.match(gpsrParser.T__8)
                self.state = 723
                self.phpeopler()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 725
                self.vbmeet()
                self.state = 726
                self.match(gpsrParser.Name)
                self.state = 727
                self.match(gpsrParser.T__23)
                self.state = 728
                self.match(gpsrParser.T__2)
                self.state = 729
                self.match(gpsrParser.Beacon)
                self.state = 730
                self.match(gpsrParser.T__4)
                self.state = 731
                self.match(gpsrParser.T__36)
                self.state = 732
                self.match(gpsrParser.Pron)
                self.state = 733
                self.match(gpsrParser.T__8)
                self.state = 734
                self.match(gpsrParser.T__37)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 736
                self.vbmeet()
                self.state = 737
                self.match(gpsrParser.Name)
                self.state = 738
                self.match(gpsrParser.T__23)
                self.state = 739
                self.match(gpsrParser.T__2)
                self.state = 740
                self.match(gpsrParser.Beacon)
                self.state = 741
                self.match(gpsrParser.T__4)
                self.state = 742
                self.match(gpsrParser.T__35)
                self.state = 743
                self.match(gpsrParser.Pron)
                self.state = 744
                self.match(gpsrParser.T__8)
                self.state = 745
                self.match(gpsrParser.Name)
                self.state = 746
                self.match(gpsrParser.T__23)
                self.state = 747
                self.match(gpsrParser.T__2)
                self.state = 748
                self.match(gpsrParser.Beacon)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 750
                self.vbmeet()
                self.state = 751
                self.match(gpsrParser.Name)
                self.state = 752
                self.match(gpsrParser.T__23)
                self.state = 753
                self.match(gpsrParser.T__2)
                self.state = 754
                self.match(gpsrParser.Beacon)
                self.state = 755
                self.match(gpsrParser.T__4)
                self.state = 756
                self.vbguide()
                self.state = 757
                self.match(gpsrParser.Pron)
                self.state = 758
                self.match(gpsrParser.T__8)
                self.state = 759
                self.match(gpsrParser.Pron)
                self.state = 760
                self.taxi()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PhpeopleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def peopletype(self):
            return self.getTypedRuleContext(gpsrParser.PeopletypeContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_phpeople

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPhpeople" ):
                return visitor.visitPhpeople(self)
            else:
                return visitor.visitChildren(self)




    def phpeople(self):

        localctx = gpsrParser.PhpeopleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_phpeople)
        try:
            self.state = 768
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [39]:
                self.enterOuterAlt(localctx, 1)
                self.state = 764
                self.match(gpsrParser.T__38)
                pass
            elif token in [40]:
                self.enterOuterAlt(localctx, 2)
                self.state = 765
                self.match(gpsrParser.T__39)
                self.state = 766
                self.match(gpsrParser.T__2)
                self.state = 767
                self.peopletype()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PeopletypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_peopletype

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPeopletype" ):
                return visitor.visitPeopletype(self)
            else:
                return visitor.visitChildren(self)




    def peopletype(self):

        localctx = gpsrParser.PeopletypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_peopletype)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 770
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 68169855139840) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PhpeoplerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def phpeople(self):
            return self.getTypedRuleContext(gpsrParser.PhpeopleContext,0)


        def Room(self):
            return self.getToken(gpsrParser.Room, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_phpeopler

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPhpeopler" ):
                return visitor.visitPhpeopler(self)
            else:
                return visitor.visitChildren(self)




    def phpeopler(self):

        localctx = gpsrParser.PhpeoplerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_phpeopler)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 772
            self.phpeople()
            self.state = 773
            self.match(gpsrParser.T__3)
            self.state = 774
            self.match(gpsrParser.T__2)
            self.state = 775
            self.match(gpsrParser.Room)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PgendersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_pgenders

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPgenders" ):
                return visitor.visitPgenders(self)
            else:
                return visitor.visitChildren(self)




    def pgenders(self):

        localctx = gpsrParser.PgendersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_pgenders)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 777
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 1055531162664960) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PgenderpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_pgenderp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPgenderp" ):
                return visitor.visitPgenderp(self)
            else:
                return visitor.visitChildren(self)




    def pgenderp(self):

        localctx = gpsrParser.PgenderpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_pgenderp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 779
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 16895095672406016) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PoseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_pose

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPose" ):
                return visitor.visitPose(self)
            else:
                return visitor.visitChildren(self)




    def pose(self):

        localctx = gpsrParser.PoseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_pose)
        try:
            self.state = 785
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [54]:
                self.enterOuterAlt(localctx, 1)
                self.state = 781
                self.match(gpsrParser.T__53)
                pass
            elif token in [55]:
                self.enterOuterAlt(localctx, 2)
                self.state = 782
                self.match(gpsrParser.T__54)
                pass
            elif token in [56]:
                self.enterOuterAlt(localctx, 3)
                self.state = 783
                self.match(gpsrParser.T__55)
                self.state = 784
                self.match(gpsrParser.T__56)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AbsposContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_abspos

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAbspos" ):
                return visitor.visitAbspos(self)
            else:
                return visitor.visitChildren(self)




    def abspos(self):

        localctx = gpsrParser.AbsposContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_abspos)
        try:
            self.state = 791
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [58]:
                self.enterOuterAlt(localctx, 1)
                self.state = 787
                self.match(gpsrParser.T__57)
                self.state = 788
                self.match(gpsrParser.T__58)
                pass
            elif token in [60]:
                self.enterOuterAlt(localctx, 2)
                self.state = 789
                self.match(gpsrParser.T__59)
                self.state = 790
                self.match(gpsrParser.T__58)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelposContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_relpos

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelpos" ):
                return visitor.visitRelpos(self)
            else:
                return visitor.visitChildren(self)




    def relpos(self):

        localctx = gpsrParser.RelposContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_relpos)
        try:
            self.state = 807
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 793
                self.match(gpsrParser.T__23)
                self.state = 794
                self.match(gpsrParser.T__2)
                self.state = 795
                self.match(gpsrParser.T__57)
                self.state = 796
                self.match(gpsrParser.T__22)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 797
                self.match(gpsrParser.T__23)
                self.state = 798
                self.match(gpsrParser.T__2)
                self.state = 799
                self.match(gpsrParser.T__59)
                self.state = 800
                self.match(gpsrParser.T__22)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 801
                self.match(gpsrParser.T__6)
                self.state = 802
                self.match(gpsrParser.T__60)
                self.state = 803
                self.match(gpsrParser.T__22)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 804
                self.match(gpsrParser.T__61)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 805
                self.match(gpsrParser.T__62)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 806
                self.match(gpsrParser.T__63)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GarbageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_garbage

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGarbage" ):
                return visitor.visitGarbage(self)
            else:
                return visitor.visitChildren(self)




    def garbage(self):

        localctx = gpsrParser.GarbageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_garbage)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 809
            _la = self._input.LA(1)
            if not(((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 63) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LuggageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_luggage

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLuggage" ):
                return visitor.visitLuggage(self)
            else:
                return visitor.visitChildren(self)




    def luggage(self):

        localctx = gpsrParser.LuggageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_luggage)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 811
            _la = self._input.LA(1)
            if not(((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 31) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TaxiContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_taxi

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTaxi" ):
                return visitor.visitTaxi(self)
            else:
                return visitor.visitChildren(self)




    def taxi(self):

        localctx = gpsrParser.TaxiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_taxi)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 813
            _la = self._input.LA(1)
            if not(((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DoorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def doorpos(self):
            return self.getTypedRuleContext(gpsrParser.DoorposContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_door

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDoor" ):
                return visitor.visitDoor(self)
            else:
                return visitor.visitChildren(self)




    def door(self):

        localctx = gpsrParser.DoorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_door)
        try:
            self.state = 821
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 815
                self.doorpos()
                self.state = 816
                self.match(gpsrParser.T__78)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 818
                self.doorpos()
                self.state = 819
                self.match(gpsrParser.T__79)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DoorposContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_doorpos

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDoorpos" ):
                return visitor.visitDoorpos(self)
            else:
                return visitor.visitChildren(self)




    def doorpos(self):

        localctx = gpsrParser.DoorposContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_doorpos)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 823
            _la = self._input.LA(1)
            if not(((((_la - 34)) & ~0x3f) == 0 and ((1 << (_la - 34)) & 985162418487297) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbtakeoutContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_vbtakeout

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVbtakeout" ):
                return visitor.visitVbtakeout(self)
            else:
                return visitor.visitChildren(self)




    def vbtakeout(self):

        localctx = gpsrParser.VbtakeoutContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_vbtakeout)
        try:
            self.state = 828
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [84]:
                self.enterOuterAlt(localctx, 1)
                self.state = 825
                self.match(gpsrParser.T__83)
                self.state = 826
                self.match(gpsrParser.T__84)
                pass
            elif token in [86]:
                self.enterOuterAlt(localctx, 2)
                self.state = 827
                self.match(gpsrParser.T__85)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbcleanupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_vbcleanup

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVbcleanup" ):
                return visitor.visitVbcleanup(self)
            else:
                return visitor.visitChildren(self)




    def vbcleanup(self):

        localctx = gpsrParser.VbcleanupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_vbcleanup)
        try:
            self.state = 838
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 830
                self.match(gpsrParser.T__86)
                self.state = 831
                self.match(gpsrParser.T__84)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 832
                self.match(gpsrParser.T__86)
                self.state = 833
                self.match(gpsrParser.T__87)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 834
                self.match(gpsrParser.T__88)
                self.state = 835
                self.match(gpsrParser.T__89)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 836
                self.match(gpsrParser.T__90)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 837
                self.match(gpsrParser.T__91)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbserveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_vbserve

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVbserve" ):
                return visitor.visitVbserve(self)
            else:
                return visitor.visitChildren(self)




    def vbserve(self):

        localctx = gpsrParser.VbserveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_vbserve)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 840
            _la = self._input.LA(1)
            if not(((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 63) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbmeetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_vbmeet

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVbmeet" ):
                return visitor.visitVbmeet(self)
            else:
                return visitor.visitChildren(self)




    def vbmeet(self):

        localctx = gpsrParser.VbmeetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_vbmeet)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 842
            _la = self._input.LA(1)
            if not(_la==29 or ((((_la - 99)) & ~0x3f) == 0 and ((1 << (_la - 99)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SomeoneContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def whoWhere(self):
            return self.getTypedRuleContext(gpsrParser.WhoWhereContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_someone

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSomeone" ):
                return visitor.visitSomeone(self)
            else:
                return visitor.visitChildren(self)




    def someone(self):

        localctx = gpsrParser.SomeoneContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_someone)
        try:
            self.state = 846
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [8]:
                self.enterOuterAlt(localctx, 1)
                self.state = 844
                self.match(gpsrParser.T__7)
                pass
            elif token in [3]:
                self.enterOuterAlt(localctx, 2)
                self.state = 845
                self.whoWhere()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PlaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbplace(self):
            return self.getTypedRuleContext(gpsrParser.VbplaceContext,0)


        def Placement(self):
            return self.getToken(gpsrParser.Placement, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_place

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPlace" ):
                return visitor.visitPlace(self)
            else:
                return visitor.visitChildren(self)




    def place(self):

        localctx = gpsrParser.PlaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_place)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 848
            self.vbplace()
            self.state = 849
            self.match(gpsrParser.T__5)
            self.state = 850
            self.match(gpsrParser.T__6)
            self.state = 851
            self.match(gpsrParser.T__2)
            self.state = 852
            self.match(gpsrParser.Placement)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OpropContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_oprop

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOprop" ):
                return visitor.visitOprop(self)
            else:
                return visitor.visitChildren(self)




    def oprop(self):

        localctx = gpsrParser.OpropContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_oprop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 854
            _la = self._input.LA(1)
            if not(((((_la - 102)) & ~0x3f) == 0 and ((1 << (_la - 102)) & 63) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GoplaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbgopl(self):
            return self.getTypedRuleContext(gpsrParser.VbgoplContext,0)


        def Placement(self):
            return self.getToken(gpsrParser.Placement, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_goplace

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGoplace" ):
                return visitor.visitGoplace(self)
            else:
                return visitor.visitChildren(self)




    def goplace(self):

        localctx = gpsrParser.GoplaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_goplace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 856
            self.vbgopl()
            self.state = 857
            self.match(gpsrParser.T__8)
            self.state = 858
            self.match(gpsrParser.T__2)
            self.state = 859
            self.match(gpsrParser.Placement)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GobeaconContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbgopl(self):
            return self.getTypedRuleContext(gpsrParser.VbgoplContext,0)


        def Beacon(self):
            return self.getToken(gpsrParser.Beacon, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_gobeacon

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGobeacon" ):
                return visitor.visitGobeacon(self)
            else:
                return visitor.visitChildren(self)




    def gobeacon(self):

        localctx = gpsrParser.GobeaconContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_gobeacon)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 861
            self.vbgopl()
            self.state = 862
            self.match(gpsrParser.T__8)
            self.state = 863
            self.match(gpsrParser.T__2)
            self.state = 864
            self.match(gpsrParser.Beacon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GoroomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbgopl(self):
            return self.getTypedRuleContext(gpsrParser.VbgoplContext,0)


        def Room(self):
            return self.getToken(gpsrParser.Room, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_goroom

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGoroom" ):
                return visitor.visitGoroom(self)
            else:
                return visitor.visitChildren(self)




    def goroom(self):

        localctx = gpsrParser.GoroomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_goroom)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 866
            self.vbgopl()
            self.state = 867
            self.match(gpsrParser.T__8)
            self.state = 868
            self.match(gpsrParser.T__2)
            self.state = 869
            self.match(gpsrParser.Room)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TakeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbtake(self):
            return self.getTypedRuleContext(gpsrParser.VbtakeContext,0)


        def Object(self):
            return self.getToken(gpsrParser.Object, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_take

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTake" ):
                return visitor.visitTake(self)
            else:
                return visitor.visitChildren(self)




    def take(self):

        localctx = gpsrParser.TakeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_take)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 871
            self.vbtake()
            self.state = 872
            self.match(gpsrParser.T__2)
            self.state = 873
            self.match(gpsrParser.Object)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TakefromContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def take(self):
            return self.getTypedRuleContext(gpsrParser.TakeContext,0)


        def Placement(self):
            return self.getToken(gpsrParser.Placement, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_takefrom

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTakefrom" ):
                return visitor.visitTakefrom(self)
            else:
                return visitor.visitChildren(self)




    def takefrom(self):

        localctx = gpsrParser.TakefromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_takefrom)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 875
            self.take()
            self.state = 876
            self.match(gpsrParser.T__9)
            self.state = 877
            self.match(gpsrParser.T__2)
            self.state = 878
            self.match(gpsrParser.Placement)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DelivmeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbdeliver(self):
            return self.getTypedRuleContext(gpsrParser.VbdeliverContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_delivme

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDelivme" ):
                return visitor.visitDelivme(self)
            else:
                return visitor.visitChildren(self)




    def delivme(self):

        localctx = gpsrParser.DelivmeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_delivme)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 880
            self.vbdeliver()
            self.state = 881
            self.match(gpsrParser.T__5)
            self.state = 882
            self.match(gpsrParser.T__8)
            self.state = 883
            self.match(gpsrParser.T__7)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DelivtoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbdeliver(self):
            return self.getTypedRuleContext(gpsrParser.VbdeliverContext,0)


        def Name(self):
            return self.getToken(gpsrParser.Name, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_delivto

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDelivto" ):
                return visitor.visitDelivto(self)
            else:
                return visitor.visitChildren(self)




    def delivto(self):

        localctx = gpsrParser.DelivtoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_delivto)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 885
            self.vbdeliver()
            self.state = 886
            self.match(gpsrParser.T__5)
            self.state = 887
            self.match(gpsrParser.T__8)
            self.state = 888
            self.match(gpsrParser.Name)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DelivatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbdeliver(self):
            return self.getTypedRuleContext(gpsrParser.VbdeliverContext,0)


        def Name(self):
            return self.getToken(gpsrParser.Name, 0)

        def Beacon(self):
            return self.getToken(gpsrParser.Beacon, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_delivat

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDelivat" ):
                return visitor.visitDelivat(self)
            else:
                return visitor.visitChildren(self)




    def delivat(self):

        localctx = gpsrParser.DelivatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_delivat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 890
            self.vbdeliver()
            self.state = 891
            self.match(gpsrParser.T__5)
            self.state = 892
            self.match(gpsrParser.T__8)
            self.state = 893
            self.match(gpsrParser.Name)
            self.state = 894
            self.match(gpsrParser.T__23)
            self.state = 895
            self.match(gpsrParser.T__2)
            self.state = 896
            self.match(gpsrParser.Beacon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TalkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_talk

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Answer_questionContext(TalkContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.TalkContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Answer(self):
            return self.getToken(gpsrParser.Answer, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnswer_question" ):
                return visitor.visitAnswer_question(self)
            else:
                return visitor.visitChildren(self)


    class Speak_toContext(TalkContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.TalkContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def speak(self):
            return self.getTypedRuleContext(gpsrParser.SpeakContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpeak_to" ):
                return visitor.visitSpeak_to(self)
            else:
                return visitor.visitChildren(self)



    def talk(self):

        localctx = gpsrParser.TalkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_talk)
        try:
            self.state = 900
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [130]:
                localctx = gpsrParser.Answer_questionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 898
                self.match(gpsrParser.Answer)
                pass
            elif token in [13, 114]:
                localctx = gpsrParser.Speak_toContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 899
                self.speak()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpeakContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbspeak(self):
            return self.getTypedRuleContext(gpsrParser.VbspeakContext,0)


        def Whattosay(self):
            return self.getToken(gpsrParser.Whattosay, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_speak

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpeak" ):
                return visitor.visitSpeak(self)
            else:
                return visitor.visitChildren(self)




    def speak(self):

        localctx = gpsrParser.SpeakContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_speak)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 902
            self.vbspeak()
            self.state = 903
            self.match(gpsrParser.Whattosay)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbbtakeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_vbbtake

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVbbtake" ):
                return visitor.visitVbbtake(self)
            else:
                return visitor.visitChildren(self)




    def vbbtake(self):

        localctx = gpsrParser.VbbtakeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_vbbtake)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 905
            _la = self._input.LA(1)
            if not(_la==84 or _la==108):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbplaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_vbplace

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVbplace" ):
                return visitor.visitVbplace(self)
            else:
                return visitor.visitChildren(self)




    def vbplace(self):

        localctx = gpsrParser.VbplaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_vbplace)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 907
            _la = self._input.LA(1)
            if not(_la==109 or _la==110):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbbringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_vbbring

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVbbring" ):
                return visitor.visitVbbring(self)
            else:
                return visitor.visitChildren(self)




    def vbbring(self):

        localctx = gpsrParser.VbbringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_vbbring)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 909
            _la = self._input.LA(1)
            if not(_la==97 or _la==108):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbdeliverContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbbring(self):
            return self.getTypedRuleContext(gpsrParser.VbbringContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_vbdeliver

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVbdeliver" ):
                return visitor.visitVbdeliver(self)
            else:
                return visitor.visitChildren(self)




    def vbdeliver(self):

        localctx = gpsrParser.VbdeliverContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_vbdeliver)
        try:
            self.state = 913
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [97, 108]:
                self.enterOuterAlt(localctx, 1)
                self.state = 911
                self.vbbring()
                pass
            elif token in [95]:
                self.enterOuterAlt(localctx, 2)
                self.state = 912
                self.match(gpsrParser.T__94)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbtakeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_vbtake

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVbtake" ):
                return visitor.visitVbtake(self)
            else:
                return visitor.visitChildren(self)




    def vbtake(self):

        localctx = gpsrParser.VbtakeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_vbtake)
        try:
            self.state = 920
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [111]:
                self.enterOuterAlt(localctx, 1)
                self.state = 915
                self.match(gpsrParser.T__110)
                pass
            elif token in [112]:
                self.enterOuterAlt(localctx, 2)
                self.state = 916
                self.match(gpsrParser.T__111)
                pass
            elif token in [84]:
                self.enterOuterAlt(localctx, 3)
                self.state = 917
                self.match(gpsrParser.T__83)
                pass
            elif token in [113]:
                self.enterOuterAlt(localctx, 4)
                self.state = 918
                self.match(gpsrParser.T__112)
                self.state = 919
                self.match(gpsrParser.T__87)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbspeakContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_vbspeak

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVbspeak" ):
                return visitor.visitVbspeak(self)
            else:
                return visitor.visitChildren(self)




    def vbspeak(self):

        localctx = gpsrParser.VbspeakContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_vbspeak)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 922
            _la = self._input.LA(1)
            if not(_la==13 or _la==114):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbgoplContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_vbgopl

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVbgopl" ):
                return visitor.visitVbgopl(self)
            else:
                return visitor.visitChildren(self)




    def vbgopl(self):

        localctx = gpsrParser.VbgoplContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_vbgopl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 924
            _la = self._input.LA(1)
            if not(_la==115 or _la==116):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbgorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbgopl(self):
            return self.getTypedRuleContext(gpsrParser.VbgoplContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_vbgor

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVbgor" ):
                return visitor.visitVbgor(self)
            else:
                return visitor.visitChildren(self)




    def vbgor(self):

        localctx = gpsrParser.VbgorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_vbgor)
        try:
            self.state = 928
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [115, 116]:
                self.enterOuterAlt(localctx, 1)
                self.state = 926
                self.vbgopl()
                pass
            elif token in [117]:
                self.enterOuterAlt(localctx, 2)
                self.state = 927
                self.match(gpsrParser.T__116)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbfindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_vbfind

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVbfind" ):
                return visitor.visitVbfind(self)
            else:
                return visitor.visitChildren(self)




    def vbfind(self):

        localctx = gpsrParser.VbfindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_vbfind)
        try:
            self.state = 934
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [29]:
                self.enterOuterAlt(localctx, 1)
                self.state = 930
                self.match(gpsrParser.T__28)
                pass
            elif token in [118]:
                self.enterOuterAlt(localctx, 2)
                self.state = 931
                self.match(gpsrParser.T__117)
                pass
            elif token in [119]:
                self.enterOuterAlt(localctx, 3)
                self.state = 932
                self.match(gpsrParser.T__118)
                self.state = 933
                self.match(gpsrParser.T__119)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbguideContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_vbguide

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVbguide" ):
                return visitor.visitVbguide(self)
            else:
                return visitor.visitChildren(self)




    def vbguide(self):

        localctx = gpsrParser.VbguideContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_vbguide)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 936
            _la = self._input.LA(1)
            if not(((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & 2061584302081) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbfollowContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_vbfollow

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVbfollow" ):
                return visitor.visitVbfollow(self)
            else:
                return visitor.visitChildren(self)




    def vbfollow(self):

        localctx = gpsrParser.VbfollowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_vbfollow)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 938
            self.match(gpsrParser.T__124)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PoliteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_polite

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPolite" ):
                return visitor.visitPolite(self)
            else:
                return visitor.visitChildren(self)




    def polite(self):

        localctx = gpsrParser.PoliteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_polite)
        try:
            self.state = 948
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 940
                self.match(gpsrParser.T__125)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 941
                self.match(gpsrParser.T__126)
                self.state = 942
                self.match(gpsrParser.T__29)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 943
                self.match(gpsrParser.T__127)
                self.state = 944
                self.match(gpsrParser.T__128)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 945
                self.match(gpsrParser.T__126)
                self.state = 946
                self.match(gpsrParser.T__29)
                self.state = 947
                self.match(gpsrParser.T__128)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





