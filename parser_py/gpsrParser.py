# Generated from gpsr.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,147,946,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,1,0,4,0,134,8,0,11,0,12,0,135,1,1,1,1,3,1,140,8,1,1,2,3,2,143,
        8,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,156,8,3,1,4,
        1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,172,8,4,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,219,8,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,229,8,7,1,7,1,7,1,7,1,7,3,7,
        235,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,277,8,7,1,8,1,8,1,9,
        1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,
        1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,
        1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,326,8,9,1,10,
        1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,3,11,423,8,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
        1,12,1,12,1,12,1,12,1,12,1,12,3,12,438,8,12,1,12,1,12,3,12,442,8,
        12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
        12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
        12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
        12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
        12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
        12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
        12,1,12,1,12,1,12,1,12,1,12,3,12,527,8,12,1,13,1,13,1,13,1,13,1,
        13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
        13,3,13,547,8,13,1,13,1,13,3,13,551,8,13,1,13,1,13,1,13,3,13,556,
        8,13,1,13,1,13,1,13,1,13,3,13,562,8,13,1,14,1,14,1,14,1,14,1,14,
        3,14,569,8,14,1,15,1,15,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,17,
        1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
        1,17,3,17,595,8,17,1,17,1,17,1,17,3,17,600,8,17,1,17,1,17,1,17,1,
        17,1,17,1,17,1,17,1,17,1,17,3,17,611,8,17,1,17,1,17,3,17,615,8,17,
        1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
        1,19,1,20,1,20,1,20,1,20,1,20,1,20,3,20,637,8,20,1,20,1,20,1,20,
        3,20,642,8,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,
        653,8,20,1,20,1,20,1,20,3,20,658,8,20,1,20,1,20,1,20,1,20,1,20,3,
        20,665,8,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,
        21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,
        21,1,21,1,21,1,21,3,21,694,8,21,1,21,1,21,1,21,3,21,699,8,21,1,21,
        1,21,1,21,1,21,3,21,705,8,21,1,22,1,22,1,23,1,23,1,23,1,23,1,23,
        1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
        1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
        1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
        1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,3,23,762,8,23,1,24,
        1,24,1,24,1,24,3,24,768,8,24,1,25,1,25,1,26,1,26,1,26,1,26,1,26,
        1,27,1,27,1,28,1,28,1,29,1,29,1,29,1,29,3,29,785,8,29,1,30,1,30,
        1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
        1,31,3,31,803,8,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,35,
        1,35,1,35,1,35,3,35,817,8,35,1,36,1,36,1,37,1,37,1,37,3,37,824,8,
        37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,834,8,38,1,39,1,
        39,1,40,1,40,1,41,1,41,3,41,842,8,41,1,42,1,42,1,42,1,42,1,42,1,
        42,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,
        46,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,
        48,1,49,1,49,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,50,1,51,1,51,1,
        51,1,51,1,51,1,51,1,51,1,51,1,52,1,52,3,52,896,8,52,1,53,1,53,1,
        53,1,54,1,54,1,55,1,55,1,56,1,56,1,57,1,57,3,57,909,8,57,1,58,1,
        58,1,58,1,58,1,58,3,58,916,8,58,1,59,1,59,1,60,1,60,1,61,1,61,3,
        61,924,8,61,1,62,1,62,1,62,1,62,3,62,930,8,62,1,63,1,63,1,64,1,64,
        1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,3,65,944,8,65,1,65,0,0,66,
        0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,
        46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,
        90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,
        126,128,130,0,18,1,0,32,34,2,0,28,28,42,46,1,0,47,50,2,0,42,43,51,
        54,1,0,59,60,1,0,67,72,1,0,73,77,1,0,78,80,2,0,35,35,83,85,1,0,95,
        100,2,0,30,30,101,103,1,0,104,109,2,0,86,86,110,110,1,0,111,112,
        2,0,99,99,110,110,2,0,14,14,116,116,1,0,117,118,2,0,86,86,123,126,
        988,0,133,1,0,0,0,2,139,1,0,0,0,4,142,1,0,0,0,6,155,1,0,0,0,8,171,
        1,0,0,0,10,173,1,0,0,0,12,180,1,0,0,0,14,276,1,0,0,0,16,278,1,0,
        0,0,18,325,1,0,0,0,20,327,1,0,0,0,22,422,1,0,0,0,24,526,1,0,0,0,
        26,561,1,0,0,0,28,568,1,0,0,0,30,570,1,0,0,0,32,574,1,0,0,0,34,614,
        1,0,0,0,36,616,1,0,0,0,38,622,1,0,0,0,40,664,1,0,0,0,42,704,1,0,
        0,0,44,706,1,0,0,0,46,761,1,0,0,0,48,767,1,0,0,0,50,769,1,0,0,0,
        52,771,1,0,0,0,54,776,1,0,0,0,56,778,1,0,0,0,58,784,1,0,0,0,60,786,
        1,0,0,0,62,802,1,0,0,0,64,804,1,0,0,0,66,806,1,0,0,0,68,808,1,0,
        0,0,70,816,1,0,0,0,72,818,1,0,0,0,74,823,1,0,0,0,76,833,1,0,0,0,
        78,835,1,0,0,0,80,837,1,0,0,0,82,841,1,0,0,0,84,843,1,0,0,0,86,849,
        1,0,0,0,88,851,1,0,0,0,90,856,1,0,0,0,92,861,1,0,0,0,94,866,1,0,
        0,0,96,870,1,0,0,0,98,875,1,0,0,0,100,880,1,0,0,0,102,885,1,0,0,
        0,104,895,1,0,0,0,106,897,1,0,0,0,108,900,1,0,0,0,110,902,1,0,0,
        0,112,904,1,0,0,0,114,908,1,0,0,0,116,915,1,0,0,0,118,917,1,0,0,
        0,120,919,1,0,0,0,122,923,1,0,0,0,124,929,1,0,0,0,126,931,1,0,0,
        0,128,933,1,0,0,0,130,943,1,0,0,0,132,134,3,2,1,0,133,132,1,0,0,
        0,134,135,1,0,0,0,135,133,1,0,0,0,135,136,1,0,0,0,136,1,1,0,0,0,
        137,140,3,4,2,0,138,140,3,6,3,0,139,137,1,0,0,0,139,138,1,0,0,0,
        140,3,1,0,0,0,141,143,3,130,65,0,142,141,1,0,0,0,142,143,1,0,0,0,
        143,144,1,0,0,0,144,145,3,6,3,0,145,5,1,0,0,0,146,156,3,24,12,0,
        147,156,3,22,11,0,148,156,3,32,16,0,149,156,3,26,13,0,150,156,3,
        40,20,0,151,156,3,42,21,0,152,156,3,12,6,0,153,156,3,16,8,0,154,
        156,3,46,23,0,155,146,1,0,0,0,155,147,1,0,0,0,155,148,1,0,0,0,155,
        149,1,0,0,0,155,150,1,0,0,0,155,151,1,0,0,0,155,152,1,0,0,0,155,
        153,1,0,0,0,155,154,1,0,0,0,156,7,1,0,0,0,157,158,3,124,62,0,158,
        159,5,1,0,0,159,160,3,54,27,0,160,172,1,0,0,0,161,162,3,124,62,0,
        162,163,5,1,0,0,163,164,5,2,0,0,164,165,5,142,0,0,165,172,1,0,0,
        0,166,167,3,124,62,0,167,168,5,1,0,0,168,169,5,2,0,0,169,170,3,58,
        29,0,170,172,1,0,0,0,171,157,1,0,0,0,171,161,1,0,0,0,171,166,1,0,
        0,0,172,9,1,0,0,0,173,174,5,3,0,0,174,175,5,2,0,0,175,176,5,142,
        0,0,176,177,5,4,0,0,177,178,5,3,0,0,178,179,5,143,0,0,179,11,1,0,
        0,0,180,181,3,14,7,0,181,13,1,0,0,0,182,183,3,94,47,0,183,184,5,
        5,0,0,184,185,3,110,55,0,185,186,5,6,0,0,186,187,5,7,0,0,187,188,
        5,3,0,0,188,189,5,145,0,0,189,277,1,0,0,0,190,191,3,110,55,0,191,
        192,5,3,0,0,192,193,5,138,0,0,193,194,5,7,0,0,194,195,5,3,0,0,195,
        196,5,145,0,0,196,277,1,0,0,0,197,198,3,112,56,0,198,199,5,8,0,0,
        199,200,5,3,0,0,200,201,5,138,0,0,201,277,1,0,0,0,202,203,3,114,
        57,0,203,204,5,3,0,0,204,205,5,138,0,0,205,206,5,9,0,0,206,207,3,
        82,41,0,207,277,1,0,0,0,208,209,3,96,48,0,209,210,5,5,0,0,210,211,
        3,110,55,0,211,212,5,6,0,0,212,213,5,7,0,0,213,214,5,3,0,0,214,215,
        5,145,0,0,215,277,1,0,0,0,216,218,3,88,44,0,217,219,5,134,0,0,218,
        217,1,0,0,0,218,219,1,0,0,0,219,220,1,0,0,0,220,221,3,124,62,0,221,
        222,5,3,0,0,222,223,5,136,0,0,223,224,5,9,0,0,224,225,3,82,41,0,
        225,277,1,0,0,0,226,228,3,88,44,0,227,229,5,134,0,0,228,227,1,0,
        0,0,228,229,1,0,0,0,229,230,1,0,0,0,230,231,3,124,62,0,231,232,5,
        3,0,0,232,234,5,136,0,0,233,235,5,134,0,0,234,233,1,0,0,0,234,235,
        1,0,0,0,235,236,1,0,0,0,236,237,5,5,0,0,237,238,3,84,42,0,238,277,
        1,0,0,0,239,240,3,108,54,0,240,241,5,3,0,0,241,242,5,137,0,0,242,
        243,5,10,0,0,243,244,5,3,0,0,244,245,5,143,0,0,245,246,5,9,0,0,246,
        247,5,3,0,0,247,248,5,145,0,0,248,277,1,0,0,0,249,250,3,112,56,0,
        250,251,5,8,0,0,251,252,5,3,0,0,252,253,5,137,0,0,253,254,5,10,0,
        0,254,255,5,3,0,0,255,256,5,145,0,0,256,277,1,0,0,0,257,258,3,96,
        48,0,258,259,5,5,0,0,259,260,3,98,49,0,260,277,1,0,0,0,261,262,3,
        96,48,0,262,263,5,5,0,0,263,264,3,102,51,0,264,277,1,0,0,0,265,266,
        3,96,48,0,266,267,5,5,0,0,267,268,3,84,42,0,268,277,1,0,0,0,269,
        270,3,108,54,0,270,271,5,11,0,0,271,272,3,66,33,0,272,273,5,9,0,
        0,273,274,5,3,0,0,274,275,3,68,34,0,275,277,1,0,0,0,276,182,1,0,
        0,0,276,190,1,0,0,0,276,197,1,0,0,0,276,202,1,0,0,0,276,208,1,0,
        0,0,276,216,1,0,0,0,276,226,1,0,0,0,276,239,1,0,0,0,276,249,1,0,
        0,0,276,257,1,0,0,0,276,261,1,0,0,0,276,265,1,0,0,0,276,269,1,0,
        0,0,277,15,1,0,0,0,278,279,3,18,9,0,279,17,1,0,0,0,280,281,3,108,
        54,0,281,282,5,3,0,0,282,283,5,138,0,0,283,284,5,9,0,0,284,285,5,
        3,0,0,285,286,5,145,0,0,286,326,1,0,0,0,287,288,3,112,56,0,288,289,
        5,8,0,0,289,290,5,3,0,0,290,291,3,60,30,0,291,292,5,12,0,0,292,293,
        3,20,10,0,293,326,1,0,0,0,294,295,3,112,56,0,295,296,5,8,0,0,296,
        297,5,3,0,0,297,298,5,12,0,0,298,299,3,62,31,0,299,300,5,3,0,0,300,
        301,5,136,0,0,301,302,3,20,10,0,302,326,1,0,0,0,303,304,3,112,56,
        0,304,305,5,8,0,0,305,306,5,3,0,0,306,307,3,86,43,0,307,308,5,12,
        0,0,308,309,3,20,10,0,309,326,1,0,0,0,310,311,3,112,56,0,311,312,
        5,8,0,0,312,313,5,3,0,0,313,314,3,86,43,0,314,315,5,135,0,0,315,
        316,3,20,10,0,316,326,1,0,0,0,317,318,3,76,38,0,318,319,5,3,0,0,
        319,320,5,143,0,0,320,326,1,0,0,0,321,322,3,74,37,0,322,323,5,3,
        0,0,323,324,3,64,32,0,324,326,1,0,0,0,325,280,1,0,0,0,325,287,1,
        0,0,0,325,294,1,0,0,0,325,303,1,0,0,0,325,310,1,0,0,0,325,317,1,
        0,0,0,325,321,1,0,0,0,326,19,1,0,0,0,327,328,5,13,0,0,328,329,5,
        145,0,0,329,21,1,0,0,0,330,331,5,14,0,0,331,332,5,8,0,0,332,333,
        5,15,0,0,333,334,5,16,0,0,334,335,5,136,0,0,335,336,5,17,0,0,336,
        337,5,18,0,0,337,338,5,7,0,0,338,339,5,3,0,0,339,423,5,145,0,0,340,
        341,3,124,62,0,341,342,5,3,0,0,342,343,5,136,0,0,343,344,5,4,0,0,
        344,345,5,3,0,0,345,346,5,143,0,0,346,423,1,0,0,0,347,348,3,124,
        62,0,348,349,5,3,0,0,349,350,5,139,0,0,350,351,5,4,0,0,351,352,5,
        3,0,0,352,353,5,143,0,0,353,423,1,0,0,0,354,355,5,14,0,0,355,356,
        5,8,0,0,356,357,5,15,0,0,357,358,5,16,0,0,358,359,5,135,0,0,359,
        360,5,17,0,0,360,361,5,18,0,0,361,362,5,7,0,0,362,363,5,3,0,0,363,
        423,5,145,0,0,364,365,5,14,0,0,365,366,5,8,0,0,366,367,5,19,0,0,
        367,368,5,3,0,0,368,369,3,86,43,0,369,370,5,12,0,0,370,371,5,7,0,
        0,371,372,5,3,0,0,372,373,5,145,0,0,373,423,1,0,0,0,374,375,5,14,
        0,0,375,376,5,8,0,0,376,377,5,19,0,0,377,378,5,3,0,0,378,379,3,86,
        43,0,379,380,5,135,0,0,380,381,5,7,0,0,381,382,5,3,0,0,382,383,5,
        145,0,0,383,423,1,0,0,0,384,385,3,124,62,0,385,386,5,3,0,0,386,387,
        5,135,0,0,387,388,5,4,0,0,388,389,5,3,0,0,389,390,5,143,0,0,390,
        423,1,0,0,0,391,392,5,14,0,0,392,393,5,8,0,0,393,394,5,20,0,0,394,
        395,5,18,0,0,395,396,5,3,0,0,396,397,5,21,0,0,397,398,3,86,43,0,
        398,399,5,22,0,0,399,400,5,7,0,0,400,401,5,3,0,0,401,402,5,145,0,
        0,402,423,1,0,0,0,403,404,5,14,0,0,404,405,5,8,0,0,405,406,5,20,
        0,0,406,407,5,18,0,0,407,408,5,3,0,0,408,409,5,21,0,0,409,410,3,
        86,43,0,410,411,5,135,0,0,411,412,5,7,0,0,412,413,5,3,0,0,413,414,
        5,145,0,0,414,423,1,0,0,0,415,416,3,124,62,0,416,417,5,21,0,0,417,
        418,5,135,0,0,418,419,5,4,0,0,419,420,5,3,0,0,420,421,5,143,0,0,
        421,423,1,0,0,0,422,330,1,0,0,0,422,340,1,0,0,0,422,347,1,0,0,0,
        422,354,1,0,0,0,422,364,1,0,0,0,422,374,1,0,0,0,422,384,1,0,0,0,
        422,391,1,0,0,0,422,403,1,0,0,0,422,415,1,0,0,0,423,23,1,0,0,0,424,
        425,3,104,52,0,425,426,5,9,0,0,426,427,3,10,5,0,427,527,1,0,0,0,
        428,429,3,8,4,0,429,430,5,4,0,0,430,431,5,3,0,0,431,432,5,143,0,
        0,432,433,5,5,0,0,433,434,3,104,52,0,434,527,1,0,0,0,435,437,3,92,
        46,0,436,438,5,134,0,0,437,436,1,0,0,0,437,438,1,0,0,0,438,439,1,
        0,0,0,439,441,3,8,4,0,440,442,5,134,0,0,441,440,1,0,0,0,441,442,
        1,0,0,0,442,443,1,0,0,0,443,444,5,5,0,0,444,445,3,104,52,0,445,527,
        1,0,0,0,446,447,5,14,0,0,447,448,5,8,0,0,448,449,5,3,0,0,449,450,
        5,23,0,0,450,451,5,24,0,0,451,452,5,3,0,0,452,453,5,2,0,0,453,454,
        5,25,0,0,454,455,5,3,0,0,455,527,5,144,0,0,456,457,5,14,0,0,457,
        458,5,8,0,0,458,459,5,3,0,0,459,460,5,26,0,0,460,461,5,24,0,0,461,
        462,5,3,0,0,462,463,5,2,0,0,463,464,5,25,0,0,464,465,5,3,0,0,465,
        527,5,144,0,0,466,467,5,14,0,0,467,468,5,8,0,0,468,469,5,3,0,0,469,
        470,5,27,0,0,470,471,5,24,0,0,471,472,5,3,0,0,472,473,5,2,0,0,473,
        474,5,25,0,0,474,475,5,3,0,0,475,527,5,144,0,0,476,477,5,14,0,0,
        477,478,5,8,0,0,478,479,5,3,0,0,479,480,5,23,0,0,480,481,5,24,0,
        0,481,482,5,3,0,0,482,483,5,2,0,0,483,484,5,4,0,0,484,485,5,3,0,
        0,485,527,5,143,0,0,486,487,5,14,0,0,487,488,5,8,0,0,488,489,5,3,
        0,0,489,490,5,26,0,0,490,491,5,24,0,0,491,492,5,3,0,0,492,493,5,
        2,0,0,493,494,5,4,0,0,494,495,5,3,0,0,495,527,5,143,0,0,496,497,
        5,14,0,0,497,498,5,8,0,0,498,499,5,3,0,0,499,500,5,27,0,0,500,501,
        5,24,0,0,501,502,5,3,0,0,502,503,5,2,0,0,503,504,5,4,0,0,504,505,
        5,3,0,0,505,527,5,143,0,0,506,507,5,14,0,0,507,508,5,8,0,0,508,509,
        5,15,0,0,509,510,5,16,0,0,510,511,5,28,0,0,511,512,5,4,0,0,512,513,
        5,3,0,0,513,514,5,143,0,0,514,515,5,18,0,0,515,527,3,56,28,0,516,
        517,5,14,0,0,517,518,5,8,0,0,518,519,5,15,0,0,519,520,5,16,0,0,520,
        521,5,28,0,0,521,522,5,4,0,0,522,523,5,3,0,0,523,524,5,143,0,0,524,
        525,5,18,0,0,525,527,3,58,29,0,526,424,1,0,0,0,526,428,1,0,0,0,526,
        435,1,0,0,0,526,446,1,0,0,0,526,456,1,0,0,0,526,466,1,0,0,0,526,
        476,1,0,0,0,526,486,1,0,0,0,526,496,1,0,0,0,526,506,1,0,0,0,526,
        516,1,0,0,0,527,25,1,0,0,0,528,529,3,128,64,0,529,530,5,147,0,0,
        530,531,5,10,0,0,531,532,5,3,0,0,532,533,5,144,0,0,533,534,5,9,0,
        0,534,535,5,3,0,0,535,536,5,143,0,0,536,562,1,0,0,0,537,538,5,29,
        0,0,538,539,5,147,0,0,539,540,5,25,0,0,540,541,5,3,0,0,541,542,5,
        144,0,0,542,543,5,5,0,0,543,544,3,128,64,0,544,546,5,141,0,0,545,
        547,3,30,15,0,546,545,1,0,0,0,546,547,1,0,0,0,547,562,1,0,0,0,548,
        550,3,90,45,0,549,551,5,134,0,0,550,549,1,0,0,0,550,551,1,0,0,0,
        551,552,1,0,0,0,552,553,5,29,0,0,553,555,5,147,0,0,554,556,5,134,
        0,0,555,554,1,0,0,0,555,556,1,0,0,0,556,557,1,0,0,0,557,558,5,5,
        0,0,558,559,3,128,64,0,559,560,5,141,0,0,560,562,1,0,0,0,561,528,
        1,0,0,0,561,537,1,0,0,0,561,548,1,0,0,0,562,27,1,0,0,0,563,564,5,
        29,0,0,564,569,5,147,0,0,565,566,5,30,0,0,566,567,5,1,0,0,567,569,
        5,2,0,0,568,563,1,0,0,0,568,565,1,0,0,0,569,29,1,0,0,0,570,571,5,
        9,0,0,571,572,5,3,0,0,572,573,5,143,0,0,573,31,1,0,0,0,574,575,3,
        34,17,0,575,33,1,0,0,0,576,577,3,126,63,0,577,578,5,147,0,0,578,
        579,5,10,0,0,579,580,5,3,0,0,580,581,5,144,0,0,581,582,5,9,0,0,582,
        583,5,3,0,0,583,584,5,144,0,0,584,615,1,0,0,0,585,586,5,29,0,0,586,
        587,5,147,0,0,587,588,5,25,0,0,588,589,5,3,0,0,589,590,5,144,0,0,
        590,591,5,5,0,0,591,615,3,36,18,0,592,594,3,90,45,0,593,595,5,134,
        0,0,594,593,1,0,0,0,594,595,1,0,0,0,595,596,1,0,0,0,596,597,5,29,
        0,0,597,599,5,147,0,0,598,600,5,134,0,0,599,598,1,0,0,0,599,600,
        1,0,0,0,600,601,1,0,0,0,601,602,5,5,0,0,602,603,3,36,18,0,603,615,
        1,0,0,0,604,605,3,126,63,0,605,606,5,147,0,0,606,607,5,9,0,0,607,
        608,5,3,0,0,608,610,5,144,0,0,609,611,5,134,0,0,610,609,1,0,0,0,
        610,611,1,0,0,0,611,612,1,0,0,0,612,613,3,38,19,0,613,615,1,0,0,
        0,614,576,1,0,0,0,614,585,1,0,0,0,614,592,1,0,0,0,614,604,1,0,0,
        0,615,35,1,0,0,0,616,617,3,126,63,0,617,618,5,141,0,0,618,619,5,
        9,0,0,619,620,5,3,0,0,620,621,5,144,0,0,621,37,1,0,0,0,622,623,5,
        31,0,0,623,624,7,0,0,0,624,625,5,30,0,0,625,626,5,141,0,0,626,627,
        5,25,0,0,627,628,5,3,0,0,628,629,5,144,0,0,629,39,1,0,0,0,630,631,
        5,29,0,0,631,632,5,147,0,0,632,633,5,25,0,0,633,634,5,3,0,0,634,
        636,5,144,0,0,635,637,5,134,0,0,636,635,1,0,0,0,636,637,1,0,0,0,
        637,638,1,0,0,0,638,639,3,128,64,0,639,641,5,141,0,0,640,642,5,134,
        0,0,641,640,1,0,0,0,641,642,1,0,0,0,642,643,1,0,0,0,643,644,5,5,
        0,0,644,645,3,92,46,0,645,665,1,0,0,0,646,647,5,29,0,0,647,648,5,
        147,0,0,648,649,5,25,0,0,649,650,5,3,0,0,650,652,5,144,0,0,651,653,
        5,134,0,0,652,651,1,0,0,0,652,653,1,0,0,0,653,654,1,0,0,0,654,655,
        3,128,64,0,655,657,5,141,0,0,656,658,5,134,0,0,657,656,1,0,0,0,657,
        658,1,0,0,0,658,659,1,0,0,0,659,660,5,5,0,0,660,661,3,126,63,0,661,
        662,5,141,0,0,662,663,5,35,0,0,663,665,1,0,0,0,664,630,1,0,0,0,664,
        646,1,0,0,0,665,41,1,0,0,0,666,667,3,128,64,0,667,668,5,147,0,0,
        668,705,1,0,0,0,669,670,3,112,56,0,670,671,5,8,0,0,671,672,5,3,0,
        0,672,673,5,140,0,0,673,705,1,0,0,0,674,675,3,114,57,0,675,676,5,
        140,0,0,676,677,5,9,0,0,677,678,3,82,41,0,678,705,1,0,0,0,679,680,
        3,126,63,0,680,681,5,147,0,0,681,682,5,9,0,0,682,683,5,3,0,0,683,
        684,5,144,0,0,684,705,1,0,0,0,685,686,5,29,0,0,686,687,3,44,22,0,
        687,688,5,5,0,0,688,689,3,126,63,0,689,690,5,141,0,0,690,705,1,0,
        0,0,691,693,3,90,45,0,692,694,5,134,0,0,693,692,1,0,0,0,693,694,
        1,0,0,0,694,695,1,0,0,0,695,696,5,29,0,0,696,698,3,44,22,0,697,699,
        5,134,0,0,698,697,1,0,0,0,698,699,1,0,0,0,699,700,1,0,0,0,700,701,
        5,5,0,0,701,702,3,126,63,0,702,703,5,141,0,0,703,705,1,0,0,0,704,
        666,1,0,0,0,704,669,1,0,0,0,704,674,1,0,0,0,704,679,1,0,0,0,704,
        685,1,0,0,0,704,691,1,0,0,0,705,43,1,0,0,0,706,707,5,147,0,0,707,
        45,1,0,0,0,708,709,3,78,39,0,709,710,5,36,0,0,710,711,5,9,0,0,711,
        712,3,52,26,0,712,762,1,0,0,0,713,714,3,80,40,0,714,715,5,147,0,
        0,715,716,5,25,0,0,716,717,5,3,0,0,717,718,3,70,35,0,718,719,5,5,
        0,0,719,720,5,37,0,0,720,721,5,141,0,0,721,722,5,9,0,0,722,723,3,
        52,26,0,723,762,1,0,0,0,724,725,3,80,40,0,725,726,5,147,0,0,726,
        727,5,25,0,0,727,728,5,3,0,0,728,729,5,144,0,0,729,730,5,5,0,0,730,
        731,5,38,0,0,731,732,5,141,0,0,732,733,5,9,0,0,733,734,5,39,0,0,
        734,762,1,0,0,0,735,736,3,80,40,0,736,737,5,147,0,0,737,738,5,25,
        0,0,738,739,5,3,0,0,739,740,5,144,0,0,740,741,5,5,0,0,741,742,5,
        37,0,0,742,743,5,141,0,0,743,744,5,9,0,0,744,745,5,147,0,0,745,746,
        5,25,0,0,746,747,5,3,0,0,747,748,5,144,0,0,748,762,1,0,0,0,749,750,
        3,80,40,0,750,751,5,147,0,0,751,752,5,25,0,0,752,753,5,3,0,0,753,
        754,5,144,0,0,754,755,5,5,0,0,755,756,3,126,63,0,756,757,5,141,0,
        0,757,758,5,9,0,0,758,759,5,141,0,0,759,760,3,68,34,0,760,762,1,
        0,0,0,761,708,1,0,0,0,761,713,1,0,0,0,761,724,1,0,0,0,761,735,1,
        0,0,0,761,749,1,0,0,0,762,47,1,0,0,0,763,768,5,40,0,0,764,765,5,
        41,0,0,765,766,5,3,0,0,766,768,3,50,25,0,767,763,1,0,0,0,767,764,
        1,0,0,0,768,49,1,0,0,0,769,770,7,1,0,0,770,51,1,0,0,0,771,772,3,
        48,24,0,772,773,5,4,0,0,773,774,5,3,0,0,774,775,5,143,0,0,775,53,
        1,0,0,0,776,777,7,2,0,0,777,55,1,0,0,0,778,779,7,3,0,0,779,57,1,
        0,0,0,780,785,5,55,0,0,781,785,5,56,0,0,782,783,5,57,0,0,783,785,
        5,58,0,0,784,780,1,0,0,0,784,781,1,0,0,0,784,782,1,0,0,0,785,59,
        1,0,0,0,786,787,7,4,0,0,787,61,1,0,0,0,788,789,5,25,0,0,789,790,
        5,3,0,0,790,791,5,61,0,0,791,803,5,24,0,0,792,793,5,25,0,0,793,794,
        5,3,0,0,794,795,5,62,0,0,795,803,5,24,0,0,796,797,5,7,0,0,797,798,
        5,63,0,0,798,803,5,24,0,0,799,803,5,64,0,0,800,803,5,65,0,0,801,
        803,5,66,0,0,802,788,1,0,0,0,802,792,1,0,0,0,802,796,1,0,0,0,802,
        799,1,0,0,0,802,800,1,0,0,0,802,801,1,0,0,0,803,63,1,0,0,0,804,805,
        7,5,0,0,805,65,1,0,0,0,806,807,7,6,0,0,807,67,1,0,0,0,808,809,7,
        7,0,0,809,69,1,0,0,0,810,811,3,72,36,0,811,812,5,81,0,0,812,817,
        1,0,0,0,813,814,3,72,36,0,814,815,5,82,0,0,815,817,1,0,0,0,816,810,
        1,0,0,0,816,813,1,0,0,0,817,71,1,0,0,0,818,819,7,8,0,0,819,73,1,
        0,0,0,820,821,5,86,0,0,821,824,5,87,0,0,822,824,5,88,0,0,823,820,
        1,0,0,0,823,822,1,0,0,0,824,75,1,0,0,0,825,826,5,89,0,0,826,834,
        5,87,0,0,827,828,5,89,0,0,828,834,5,90,0,0,829,830,5,91,0,0,830,
        834,5,92,0,0,831,834,5,93,0,0,832,834,5,94,0,0,833,825,1,0,0,0,833,
        827,1,0,0,0,833,829,1,0,0,0,833,831,1,0,0,0,833,832,1,0,0,0,834,
        77,1,0,0,0,835,836,7,9,0,0,836,79,1,0,0,0,837,838,7,10,0,0,838,81,
        1,0,0,0,839,842,5,8,0,0,840,842,3,10,5,0,841,839,1,0,0,0,841,840,
        1,0,0,0,842,83,1,0,0,0,843,844,3,110,55,0,844,845,5,6,0,0,845,846,
        5,7,0,0,846,847,5,3,0,0,847,848,5,145,0,0,848,85,1,0,0,0,849,850,
        7,11,0,0,850,87,1,0,0,0,851,852,3,120,60,0,852,853,5,9,0,0,853,854,
        5,3,0,0,854,855,5,145,0,0,855,89,1,0,0,0,856,857,3,120,60,0,857,
        858,5,9,0,0,858,859,5,3,0,0,859,860,5,144,0,0,860,91,1,0,0,0,861,
        862,3,120,60,0,862,863,5,9,0,0,863,864,5,3,0,0,864,865,5,143,0,0,
        865,93,1,0,0,0,866,867,3,116,58,0,867,868,5,3,0,0,868,869,5,136,
        0,0,869,95,1,0,0,0,870,871,3,94,47,0,871,872,5,10,0,0,872,873,5,
        3,0,0,873,874,5,145,0,0,874,97,1,0,0,0,875,876,3,114,57,0,876,877,
        5,6,0,0,877,878,5,9,0,0,878,879,5,8,0,0,879,99,1,0,0,0,880,881,3,
        114,57,0,881,882,5,6,0,0,882,883,5,9,0,0,883,884,5,147,0,0,884,101,
        1,0,0,0,885,886,3,114,57,0,886,887,5,6,0,0,887,888,5,9,0,0,888,889,
        5,147,0,0,889,890,5,25,0,0,890,891,5,3,0,0,891,892,5,144,0,0,892,
        103,1,0,0,0,893,896,5,132,0,0,894,896,3,106,53,0,895,893,1,0,0,0,
        895,894,1,0,0,0,896,105,1,0,0,0,897,898,3,118,59,0,898,899,5,133,
        0,0,899,107,1,0,0,0,900,901,7,12,0,0,901,109,1,0,0,0,902,903,7,13,
        0,0,903,111,1,0,0,0,904,905,7,14,0,0,905,113,1,0,0,0,906,909,3,112,
        56,0,907,909,5,97,0,0,908,906,1,0,0,0,908,907,1,0,0,0,909,115,1,
        0,0,0,910,916,5,113,0,0,911,916,5,114,0,0,912,916,5,86,0,0,913,914,
        5,115,0,0,914,916,5,90,0,0,915,910,1,0,0,0,915,911,1,0,0,0,915,912,
        1,0,0,0,915,913,1,0,0,0,916,117,1,0,0,0,917,918,7,15,0,0,918,119,
        1,0,0,0,919,920,7,16,0,0,920,121,1,0,0,0,921,924,3,120,60,0,922,
        924,5,119,0,0,923,921,1,0,0,0,923,922,1,0,0,0,924,123,1,0,0,0,925,
        930,5,30,0,0,926,930,5,120,0,0,927,928,5,121,0,0,928,930,5,122,0,
        0,929,925,1,0,0,0,929,926,1,0,0,0,929,927,1,0,0,0,930,125,1,0,0,
        0,931,932,7,17,0,0,932,127,1,0,0,0,933,934,5,127,0,0,934,129,1,0,
        0,0,935,944,5,128,0,0,936,937,5,129,0,0,937,944,5,31,0,0,938,939,
        5,130,0,0,939,944,5,131,0,0,940,941,5,129,0,0,941,942,5,31,0,0,942,
        944,5,131,0,0,943,935,1,0,0,0,943,936,1,0,0,0,943,938,1,0,0,0,943,
        940,1,0,0,0,944,131,1,0,0,0,45,135,139,142,155,171,218,228,234,276,
        325,422,437,441,526,546,550,555,561,568,594,599,610,614,636,641,
        652,657,664,693,698,704,761,767,784,802,816,823,833,841,895,908,
        915,923,929,943
    ]

class gpsrParser ( Parser ):

    grammarFileName = "gpsr.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'a'", "'person'", "'the'", "'in'", "'and'", 
                     "'it'", "'on'", "'me'", "'to'", "'from'", "'my'", "'object'", 
                     "'from the'", "'tell'", "'how'", "'many'", "'there'", 
                     "'are'", "'what's'", "'which'", "'three'", "'objects'", 
                     "'name'", "'of'", "'at'", "'gender'", "'pose'", "'people'", 
                     "'meet'", "'find'", "'you'", "'may'", "'can'", "'will'", 
                     "'back'", "'drinks'", "'introduce'", "'ask'", "'leave'", 
                     "'everyone'", "'all'", "'men'", "'women'", "'guests'", 
                     "'elders'", "'children'", "'man'", "'woman'", "'boy'", 
                     "'girl'", "'boys'", "'girls'", "'male'", "'female'", 
                     "'sitting'", "'standing'", "'lying'", "'down'", "'left most'", 
                     "'right most'", "'left'", "'right'", "'top'", "'above'", 
                     "'behind'", "'under'", "'litter'", "'garbage'", "'trash'", 
                     "'waste'", "'debris'", "'junk'", "'bag'", "'baggage'", 
                     "'valise'", "'suitcase'", "'trolley'", "'taxi'", "'cab'", 
                     "'uber'", "'entrance'", "'door'", "'front'", "'main'", 
                     "'rear'", "'take'", "'out'", "'dump'", "'clean'", "'up'", 
                     "'tidy'", "'op'", "'neaten'", "'order'", "'serve'", 
                     "'arrange'", "'deliver'", "'distribute'", "'give'", 
                     "'provide'", "'contact'", "'face'", "'greet'", "'biggest'", 
                     "'largest'", "'smallest'", "'heaviest'", "'lightest'", 
                     "'thinnest'", "'bring'", "'put'", "'place'", "'get'", 
                     "'grasp'", "'pick'", "'say'", "'go'", "'navigate'", 
                     "'enter'", "'locate'", "'look'", "'for'", "'guide'", 
                     "'escort'", "'lead'", "'accompany'", "'follow'", "'Please'", 
                     "'Could'", "'Robot'", "'please'", "<INVALID>", "<INVALID>", 
                     "','" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "Answer", "Whattosay", "Comma", "Category", "Object", 
                      "Object_alike", "Object_known", "Object_alike_obfuscated", 
                      "Object_obfuscated", "Pron", "Gesture", "Room", "Beacon", 
                      "Placement", "Location_except_room", "Name" ]

    RULE_instruction = 0
    RULE_mainSentence = 1
    RULE_pmain = 2
    RULE_main = 3
    RULE_findp = 4
    RULE_whoWhere = 5
    RULE_man = 6
    RULE_deliver = 7
    RULE_complexman = 8
    RULE_cmancmd = 9
    RULE_cmanobjsrc = 10
    RULE_fndobj = 11
    RULE_fndppl = 12
    RULE_follow = 13
    RULE_fllmeet = 14
    RULE_fllwdest = 15
    RULE_guide = 16
    RULE_gdcmd = 17
    RULE_guideto = 18
    RULE_gdwhere = 19
    RULE_followout = 20
    RULE_incomplete = 21
    RULE_inguidewho = 22
    RULE_partyhost = 23
    RULE_phpeople = 24
    RULE_peopletype = 25
    RULE_phpeopler = 26
    RULE_pgenders = 27
    RULE_pgenderp = 28
    RULE_pose = 29
    RULE_abspos = 30
    RULE_relpos = 31
    RULE_garbage = 32
    RULE_luggage = 33
    RULE_taxi = 34
    RULE_door = 35
    RULE_doorpos = 36
    RULE_vbtakeout = 37
    RULE_vbcleanup = 38
    RULE_vbserve = 39
    RULE_vbmeet = 40
    RULE_someone = 41
    RULE_place = 42
    RULE_oprop = 43
    RULE_goplace = 44
    RULE_gobeacon = 45
    RULE_goroom = 46
    RULE_take = 47
    RULE_takefrom = 48
    RULE_delivme = 49
    RULE_delivto = 50
    RULE_delivat = 51
    RULE_talk = 52
    RULE_speak = 53
    RULE_vbbtake = 54
    RULE_vbplace = 55
    RULE_vbbring = 56
    RULE_vbdeliver = 57
    RULE_vbtake = 58
    RULE_vbspeak = 59
    RULE_vbgopl = 60
    RULE_vbgor = 61
    RULE_vbfind = 62
    RULE_vbguide = 63
    RULE_vbfollow = 64
    RULE_polite = 65

    ruleNames =  [ "instruction", "mainSentence", "pmain", "main", "findp", 
                   "whoWhere", "man", "deliver", "complexman", "cmancmd", 
                   "cmanobjsrc", "fndobj", "fndppl", "follow", "fllmeet", 
                   "fllwdest", "guide", "gdcmd", "guideto", "gdwhere", "followout", 
                   "incomplete", "inguidewho", "partyhost", "phpeople", 
                   "peopletype", "phpeopler", "pgenders", "pgenderp", "pose", 
                   "abspos", "relpos", "garbage", "luggage", "taxi", "door", 
                   "doorpos", "vbtakeout", "vbcleanup", "vbserve", "vbmeet", 
                   "someone", "place", "oprop", "goplace", "gobeacon", "goroom", 
                   "take", "takefrom", "delivme", "delivto", "delivat", 
                   "talk", "speak", "vbbtake", "vbplace", "vbbring", "vbdeliver", 
                   "vbtake", "vbspeak", "vbgopl", "vbgor", "vbfind", "vbguide", 
                   "vbfollow", "polite" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    T__73=74
    T__74=75
    T__75=76
    T__76=77
    T__77=78
    T__78=79
    T__79=80
    T__80=81
    T__81=82
    T__82=83
    T__83=84
    T__84=85
    T__85=86
    T__86=87
    T__87=88
    T__88=89
    T__89=90
    T__90=91
    T__91=92
    T__92=93
    T__93=94
    T__94=95
    T__95=96
    T__96=97
    T__97=98
    T__98=99
    T__99=100
    T__100=101
    T__101=102
    T__102=103
    T__103=104
    T__104=105
    T__105=106
    T__106=107
    T__107=108
    T__108=109
    T__109=110
    T__110=111
    T__111=112
    T__112=113
    T__113=114
    T__114=115
    T__115=116
    T__116=117
    T__117=118
    T__118=119
    T__119=120
    T__120=121
    T__121=122
    T__122=123
    T__123=124
    T__124=125
    T__125=126
    T__126=127
    T__127=128
    T__128=129
    T__129=130
    T__130=131
    Answer=132
    Whattosay=133
    Comma=134
    Category=135
    Object=136
    Object_alike=137
    Object_known=138
    Object_alike_obfuscated=139
    Object_obfuscated=140
    Pron=141
    Gesture=142
    Room=143
    Beacon=144
    Placement=145
    Location_except_room=146
    Name=147

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class InstructionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mainSentence(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(gpsrParser.MainSentenceContext)
            else:
                return self.getTypedRuleContext(gpsrParser.MainSentenceContext,i)


        def getRuleIndex(self):
            return gpsrParser.RULE_instruction

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInstruction" ):
                return visitor.visitInstruction(self)
            else:
                return visitor.visitChildren(self)




    def instruction(self):

        localctx = gpsrParser.InstructionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_instruction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 133 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 132
                self.mainSentence()
                self.state = 135 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 1610629120) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 105475790340013) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MainSentenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pmain(self):
            return self.getTypedRuleContext(gpsrParser.PmainContext,0)


        def main(self):
            return self.getTypedRuleContext(gpsrParser.MainContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_mainSentence

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMainSentence" ):
                return visitor.visitMainSentence(self)
            else:
                return visitor.visitChildren(self)




    def mainSentence(self):

        localctx = gpsrParser.MainSentenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_mainSentence)
        try:
            self.state = 139
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 137
                self.pmain()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 138
                self.main()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PmainContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def main(self):
            return self.getTypedRuleContext(gpsrParser.MainContext,0)


        def polite(self):
            return self.getTypedRuleContext(gpsrParser.PoliteContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_pmain

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPmain" ):
                return visitor.visitPmain(self)
            else:
                return visitor.visitChildren(self)




    def pmain(self):

        localctx = gpsrParser.PmainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_pmain)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 142
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 7) != 0):
                self.state = 141
                self.polite()


            self.state = 144
            self.main()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MainContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fndppl(self):
            return self.getTypedRuleContext(gpsrParser.FndpplContext,0)


        def fndobj(self):
            return self.getTypedRuleContext(gpsrParser.FndobjContext,0)


        def guide(self):
            return self.getTypedRuleContext(gpsrParser.GuideContext,0)


        def follow(self):
            return self.getTypedRuleContext(gpsrParser.FollowContext,0)


        def followout(self):
            return self.getTypedRuleContext(gpsrParser.FollowoutContext,0)


        def incomplete(self):
            return self.getTypedRuleContext(gpsrParser.IncompleteContext,0)


        def man(self):
            return self.getTypedRuleContext(gpsrParser.ManContext,0)


        def complexman(self):
            return self.getTypedRuleContext(gpsrParser.ComplexmanContext,0)


        def partyhost(self):
            return self.getTypedRuleContext(gpsrParser.PartyhostContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_main

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMain" ):
                return visitor.visitMain(self)
            else:
                return visitor.visitChildren(self)




    def main(self):

        localctx = gpsrParser.MainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_main)
        try:
            self.state = 155
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 146
                self.fndppl()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 147
                self.fndobj()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 148
                self.guide()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 149
                self.follow()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 150
                self.followout()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 151
                self.incomplete()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 152
                self.man()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 153
                self.complexman()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 154
                self.partyhost()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FindpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_findp

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Find_genderContext(FindpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FindpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def vbfind(self):
            return self.getTypedRuleContext(gpsrParser.VbfindContext,0)

        def pgenders(self):
            return self.getTypedRuleContext(gpsrParser.PgendersContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFind_gender" ):
                return visitor.visitFind_gender(self)
            else:
                return visitor.visitChildren(self)


    class Find_gestureContext(FindpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FindpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def vbfind(self):
            return self.getTypedRuleContext(gpsrParser.VbfindContext,0)

        def Gesture(self):
            return self.getToken(gpsrParser.Gesture, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFind_gesture" ):
                return visitor.visitFind_gesture(self)
            else:
                return visitor.visitChildren(self)


    class Find_poseContext(FindpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FindpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def vbfind(self):
            return self.getTypedRuleContext(gpsrParser.VbfindContext,0)

        def pose(self):
            return self.getTypedRuleContext(gpsrParser.PoseContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFind_pose" ):
                return visitor.visitFind_pose(self)
            else:
                return visitor.visitChildren(self)



    def findp(self):

        localctx = gpsrParser.FindpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_findp)
        try:
            self.state = 171
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                localctx = gpsrParser.Find_genderContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 157
                self.vbfind()
                self.state = 158
                self.match(gpsrParser.T__0)
                self.state = 159
                self.pgenders()
                pass

            elif la_ == 2:
                localctx = gpsrParser.Find_gestureContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 161
                self.vbfind()
                self.state = 162
                self.match(gpsrParser.T__0)
                self.state = 163
                self.match(gpsrParser.T__1)
                self.state = 164
                self.match(gpsrParser.Gesture)
                pass

            elif la_ == 3:
                localctx = gpsrParser.Find_poseContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 166
                self.vbfind()
                self.state = 167
                self.match(gpsrParser.T__0)
                self.state = 168
                self.match(gpsrParser.T__1)
                self.state = 169
                self.pose()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhoWhereContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Gesture(self):
            return self.getToken(gpsrParser.Gesture, 0)

        def Room(self):
            return self.getToken(gpsrParser.Room, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_whoWhere

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhoWhere" ):
                return visitor.visitWhoWhere(self)
            else:
                return visitor.visitChildren(self)




    def whoWhere(self):

        localctx = gpsrParser.WhoWhereContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_whoWhere)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 173
            self.match(gpsrParser.T__2)
            self.state = 174
            self.match(gpsrParser.T__1)
            self.state = 175
            self.match(gpsrParser.Gesture)
            self.state = 176
            self.match(gpsrParser.T__3)
            self.state = 177
            self.match(gpsrParser.T__2)
            self.state = 178
            self.match(gpsrParser.Room)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ManContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def deliver(self):
            return self.getTypedRuleContext(gpsrParser.DeliverContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_man

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMan" ):
                return visitor.visitMan(self)
            else:
                return visitor.visitChildren(self)




    def man(self):

        localctx = gpsrParser.ManContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_man)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 180
            self.deliver()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeliverContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def take(self):
            return self.getTypedRuleContext(gpsrParser.TakeContext,0)


        def vbplace(self):
            return self.getTypedRuleContext(gpsrParser.VbplaceContext,0)


        def Placement(self):
            return self.getToken(gpsrParser.Placement, 0)

        def Object_known(self):
            return self.getToken(gpsrParser.Object_known, 0)

        def vbbring(self):
            return self.getTypedRuleContext(gpsrParser.VbbringContext,0)


        def vbdeliver(self):
            return self.getTypedRuleContext(gpsrParser.VbdeliverContext,0)


        def someone(self):
            return self.getTypedRuleContext(gpsrParser.SomeoneContext,0)


        def takefrom(self):
            return self.getTypedRuleContext(gpsrParser.TakefromContext,0)


        def goplace(self):
            return self.getTypedRuleContext(gpsrParser.GoplaceContext,0)


        def vbfind(self):
            return self.getTypedRuleContext(gpsrParser.VbfindContext,0)


        def Object(self):
            return self.getToken(gpsrParser.Object, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(gpsrParser.Comma)
            else:
                return self.getToken(gpsrParser.Comma, i)

        def place(self):
            return self.getTypedRuleContext(gpsrParser.PlaceContext,0)


        def vbbtake(self):
            return self.getTypedRuleContext(gpsrParser.VbbtakeContext,0)


        def Object_alike(self):
            return self.getToken(gpsrParser.Object_alike, 0)

        def Room(self):
            return self.getToken(gpsrParser.Room, 0)

        def delivme(self):
            return self.getTypedRuleContext(gpsrParser.DelivmeContext,0)


        def delivat(self):
            return self.getTypedRuleContext(gpsrParser.DelivatContext,0)


        def luggage(self):
            return self.getTypedRuleContext(gpsrParser.LuggageContext,0)


        def taxi(self):
            return self.getTypedRuleContext(gpsrParser.TaxiContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_deliver

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeliver" ):
                return visitor.visitDeliver(self)
            else:
                return visitor.visitChildren(self)




    def deliver(self):

        localctx = gpsrParser.DeliverContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_deliver)
        self._la = 0 # Token type
        try:
            self.state = 276
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 182
                self.take()
                self.state = 183
                self.match(gpsrParser.T__4)
                self.state = 184
                self.vbplace()
                self.state = 185
                self.match(gpsrParser.T__5)
                self.state = 186
                self.match(gpsrParser.T__6)
                self.state = 187
                self.match(gpsrParser.T__2)
                self.state = 188
                self.match(gpsrParser.Placement)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 190
                self.vbplace()
                self.state = 191
                self.match(gpsrParser.T__2)
                self.state = 192
                self.match(gpsrParser.Object_known)
                self.state = 193
                self.match(gpsrParser.T__6)
                self.state = 194
                self.match(gpsrParser.T__2)
                self.state = 195
                self.match(gpsrParser.Placement)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 197
                self.vbbring()
                self.state = 198
                self.match(gpsrParser.T__7)
                self.state = 199
                self.match(gpsrParser.T__2)
                self.state = 200
                self.match(gpsrParser.Object_known)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 202
                self.vbdeliver()
                self.state = 203
                self.match(gpsrParser.T__2)
                self.state = 204
                self.match(gpsrParser.Object_known)
                self.state = 205
                self.match(gpsrParser.T__8)
                self.state = 206
                self.someone()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 208
                self.takefrom()
                self.state = 209
                self.match(gpsrParser.T__4)
                self.state = 210
                self.vbplace()
                self.state = 211
                self.match(gpsrParser.T__5)
                self.state = 212
                self.match(gpsrParser.T__6)
                self.state = 213
                self.match(gpsrParser.T__2)
                self.state = 214
                self.match(gpsrParser.Placement)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 216
                self.goplace()
                self.state = 218
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==134:
                    self.state = 217
                    self.match(gpsrParser.Comma)


                self.state = 220
                self.vbfind()
                self.state = 221
                self.match(gpsrParser.T__2)
                self.state = 222
                self.match(gpsrParser.Object)
                self.state = 223
                self.match(gpsrParser.T__8)
                self.state = 224
                self.someone()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 226
                self.goplace()
                self.state = 228
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==134:
                    self.state = 227
                    self.match(gpsrParser.Comma)


                self.state = 230
                self.vbfind()
                self.state = 231
                self.match(gpsrParser.T__2)
                self.state = 232
                self.match(gpsrParser.Object)
                self.state = 234
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==134:
                    self.state = 233
                    self.match(gpsrParser.Comma)


                self.state = 236
                self.match(gpsrParser.T__4)
                self.state = 237
                self.place()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 239
                self.vbbtake()
                self.state = 240
                self.match(gpsrParser.T__2)
                self.state = 241
                self.match(gpsrParser.Object_alike)
                self.state = 242
                self.match(gpsrParser.T__9)
                self.state = 243
                self.match(gpsrParser.T__2)
                self.state = 244
                self.match(gpsrParser.Room)
                self.state = 245
                self.match(gpsrParser.T__8)
                self.state = 246
                self.match(gpsrParser.T__2)
                self.state = 247
                self.match(gpsrParser.Placement)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 249
                self.vbbring()
                self.state = 250
                self.match(gpsrParser.T__7)
                self.state = 251
                self.match(gpsrParser.T__2)
                self.state = 252
                self.match(gpsrParser.Object_alike)
                self.state = 253
                self.match(gpsrParser.T__9)
                self.state = 254
                self.match(gpsrParser.T__2)
                self.state = 255
                self.match(gpsrParser.Placement)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 257
                self.takefrom()
                self.state = 258
                self.match(gpsrParser.T__4)
                self.state = 259
                self.delivme()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 261
                self.takefrom()
                self.state = 262
                self.match(gpsrParser.T__4)
                self.state = 263
                self.delivat()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 265
                self.takefrom()
                self.state = 266
                self.match(gpsrParser.T__4)
                self.state = 267
                self.place()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 269
                self.vbbtake()
                self.state = 270
                self.match(gpsrParser.T__10)
                self.state = 271
                self.luggage()
                self.state = 272
                self.match(gpsrParser.T__8)
                self.state = 273
                self.match(gpsrParser.T__2)
                self.state = 274
                self.taxi()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComplexmanContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cmancmd(self):
            return self.getTypedRuleContext(gpsrParser.CmancmdContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_complexman

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComplexman" ):
                return visitor.visitComplexman(self)
            else:
                return visitor.visitChildren(self)




    def complexman(self):

        localctx = gpsrParser.ComplexmanContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_complexman)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 278
            self.cmancmd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CmancmdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbbtake(self):
            return self.getTypedRuleContext(gpsrParser.VbbtakeContext,0)


        def Object_known(self):
            return self.getToken(gpsrParser.Object_known, 0)

        def Placement(self):
            return self.getToken(gpsrParser.Placement, 0)

        def vbbring(self):
            return self.getTypedRuleContext(gpsrParser.VbbringContext,0)


        def abspos(self):
            return self.getTypedRuleContext(gpsrParser.AbsposContext,0)


        def cmanobjsrc(self):
            return self.getTypedRuleContext(gpsrParser.CmanobjsrcContext,0)


        def relpos(self):
            return self.getTypedRuleContext(gpsrParser.RelposContext,0)


        def Object(self):
            return self.getToken(gpsrParser.Object, 0)

        def oprop(self):
            return self.getTypedRuleContext(gpsrParser.OpropContext,0)


        def Category(self):
            return self.getToken(gpsrParser.Category, 0)

        def vbcleanup(self):
            return self.getTypedRuleContext(gpsrParser.VbcleanupContext,0)


        def Room(self):
            return self.getToken(gpsrParser.Room, 0)

        def vbtakeout(self):
            return self.getTypedRuleContext(gpsrParser.VbtakeoutContext,0)


        def garbage(self):
            return self.getTypedRuleContext(gpsrParser.GarbageContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_cmancmd

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCmancmd" ):
                return visitor.visitCmancmd(self)
            else:
                return visitor.visitChildren(self)




    def cmancmd(self):

        localctx = gpsrParser.CmancmdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_cmancmd)
        try:
            self.state = 325
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 280
                self.vbbtake()
                self.state = 281
                self.match(gpsrParser.T__2)
                self.state = 282
                self.match(gpsrParser.Object_known)
                self.state = 283
                self.match(gpsrParser.T__8)
                self.state = 284
                self.match(gpsrParser.T__2)
                self.state = 285
                self.match(gpsrParser.Placement)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 287
                self.vbbring()
                self.state = 288
                self.match(gpsrParser.T__7)
                self.state = 289
                self.match(gpsrParser.T__2)
                self.state = 290
                self.abspos()
                self.state = 291
                self.match(gpsrParser.T__11)
                self.state = 292
                self.cmanobjsrc()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 294
                self.vbbring()
                self.state = 295
                self.match(gpsrParser.T__7)
                self.state = 296
                self.match(gpsrParser.T__2)
                self.state = 297
                self.match(gpsrParser.T__11)
                self.state = 298
                self.relpos()
                self.state = 299
                self.match(gpsrParser.T__2)
                self.state = 300
                self.match(gpsrParser.Object)
                self.state = 301
                self.cmanobjsrc()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 303
                self.vbbring()
                self.state = 304
                self.match(gpsrParser.T__7)
                self.state = 305
                self.match(gpsrParser.T__2)
                self.state = 306
                self.oprop()
                self.state = 307
                self.match(gpsrParser.T__11)
                self.state = 308
                self.cmanobjsrc()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 310
                self.vbbring()
                self.state = 311
                self.match(gpsrParser.T__7)
                self.state = 312
                self.match(gpsrParser.T__2)
                self.state = 313
                self.oprop()
                self.state = 314
                self.match(gpsrParser.Category)
                self.state = 315
                self.cmanobjsrc()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 317
                self.vbcleanup()
                self.state = 318
                self.match(gpsrParser.T__2)
                self.state = 319
                self.match(gpsrParser.Room)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 321
                self.vbtakeout()
                self.state = 322
                self.match(gpsrParser.T__2)
                self.state = 323
                self.garbage()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CmanobjsrcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Placement(self):
            return self.getToken(gpsrParser.Placement, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_cmanobjsrc

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCmanobjsrc" ):
                return visitor.visitCmanobjsrc(self)
            else:
                return visitor.visitChildren(self)




    def cmanobjsrc(self):

        localctx = gpsrParser.CmanobjsrcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_cmanobjsrc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 327
            self.match(gpsrParser.T__12)
            self.state = 328
            self.match(gpsrParser.Placement)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FndobjContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Object(self):
            return self.getToken(gpsrParser.Object, 0)

        def Placement(self):
            return self.getToken(gpsrParser.Placement, 0)

        def vbfind(self):
            return self.getTypedRuleContext(gpsrParser.VbfindContext,0)


        def Room(self):
            return self.getToken(gpsrParser.Room, 0)

        def Object_alike_obfuscated(self):
            return self.getToken(gpsrParser.Object_alike_obfuscated, 0)

        def Category(self):
            return self.getToken(gpsrParser.Category, 0)

        def oprop(self):
            return self.getTypedRuleContext(gpsrParser.OpropContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_fndobj

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFndobj" ):
                return visitor.visitFndobj(self)
            else:
                return visitor.visitChildren(self)




    def fndobj(self):

        localctx = gpsrParser.FndobjContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_fndobj)
        try:
            self.state = 422
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 330
                self.match(gpsrParser.T__13)
                self.state = 331
                self.match(gpsrParser.T__7)
                self.state = 332
                self.match(gpsrParser.T__14)
                self.state = 333
                self.match(gpsrParser.T__15)
                self.state = 334
                self.match(gpsrParser.Object)
                self.state = 335
                self.match(gpsrParser.T__16)
                self.state = 336
                self.match(gpsrParser.T__17)
                self.state = 337
                self.match(gpsrParser.T__6)
                self.state = 338
                self.match(gpsrParser.T__2)
                self.state = 339
                self.match(gpsrParser.Placement)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 340
                self.vbfind()
                self.state = 341
                self.match(gpsrParser.T__2)
                self.state = 342
                self.match(gpsrParser.Object)
                self.state = 343
                self.match(gpsrParser.T__3)
                self.state = 344
                self.match(gpsrParser.T__2)
                self.state = 345
                self.match(gpsrParser.Room)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 347
                self.vbfind()
                self.state = 348
                self.match(gpsrParser.T__2)
                self.state = 349
                self.match(gpsrParser.Object_alike_obfuscated)
                self.state = 350
                self.match(gpsrParser.T__3)
                self.state = 351
                self.match(gpsrParser.T__2)
                self.state = 352
                self.match(gpsrParser.Room)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 354
                self.match(gpsrParser.T__13)
                self.state = 355
                self.match(gpsrParser.T__7)
                self.state = 356
                self.match(gpsrParser.T__14)
                self.state = 357
                self.match(gpsrParser.T__15)
                self.state = 358
                self.match(gpsrParser.Category)
                self.state = 359
                self.match(gpsrParser.T__16)
                self.state = 360
                self.match(gpsrParser.T__17)
                self.state = 361
                self.match(gpsrParser.T__6)
                self.state = 362
                self.match(gpsrParser.T__2)
                self.state = 363
                self.match(gpsrParser.Placement)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 364
                self.match(gpsrParser.T__13)
                self.state = 365
                self.match(gpsrParser.T__7)
                self.state = 366
                self.match(gpsrParser.T__18)
                self.state = 367
                self.match(gpsrParser.T__2)
                self.state = 368
                self.oprop()
                self.state = 369
                self.match(gpsrParser.T__11)
                self.state = 370
                self.match(gpsrParser.T__6)
                self.state = 371
                self.match(gpsrParser.T__2)
                self.state = 372
                self.match(gpsrParser.Placement)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 374
                self.match(gpsrParser.T__13)
                self.state = 375
                self.match(gpsrParser.T__7)
                self.state = 376
                self.match(gpsrParser.T__18)
                self.state = 377
                self.match(gpsrParser.T__2)
                self.state = 378
                self.oprop()
                self.state = 379
                self.match(gpsrParser.Category)
                self.state = 380
                self.match(gpsrParser.T__6)
                self.state = 381
                self.match(gpsrParser.T__2)
                self.state = 382
                self.match(gpsrParser.Placement)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 384
                self.vbfind()
                self.state = 385
                self.match(gpsrParser.T__2)
                self.state = 386
                self.match(gpsrParser.Category)
                self.state = 387
                self.match(gpsrParser.T__3)
                self.state = 388
                self.match(gpsrParser.T__2)
                self.state = 389
                self.match(gpsrParser.Room)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 391
                self.match(gpsrParser.T__13)
                self.state = 392
                self.match(gpsrParser.T__7)
                self.state = 393
                self.match(gpsrParser.T__19)
                self.state = 394
                self.match(gpsrParser.T__17)
                self.state = 395
                self.match(gpsrParser.T__2)
                self.state = 396
                self.match(gpsrParser.T__20)
                self.state = 397
                self.oprop()
                self.state = 398
                self.match(gpsrParser.T__21)
                self.state = 399
                self.match(gpsrParser.T__6)
                self.state = 400
                self.match(gpsrParser.T__2)
                self.state = 401
                self.match(gpsrParser.Placement)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 403
                self.match(gpsrParser.T__13)
                self.state = 404
                self.match(gpsrParser.T__7)
                self.state = 405
                self.match(gpsrParser.T__19)
                self.state = 406
                self.match(gpsrParser.T__17)
                self.state = 407
                self.match(gpsrParser.T__2)
                self.state = 408
                self.match(gpsrParser.T__20)
                self.state = 409
                self.oprop()
                self.state = 410
                self.match(gpsrParser.Category)
                self.state = 411
                self.match(gpsrParser.T__6)
                self.state = 412
                self.match(gpsrParser.T__2)
                self.state = 413
                self.match(gpsrParser.Placement)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 415
                self.vbfind()
                self.state = 416
                self.match(gpsrParser.T__20)
                self.state = 417
                self.match(gpsrParser.Category)
                self.state = 418
                self.match(gpsrParser.T__3)
                self.state = 419
                self.match(gpsrParser.T__2)
                self.state = 420
                self.match(gpsrParser.Room)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FndpplContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_fndppl

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Tell_gender_numberContext(FndpplContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FndpplContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Room(self):
            return self.getToken(gpsrParser.Room, 0)
        def pgenderp(self):
            return self.getTypedRuleContext(gpsrParser.PgenderpContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTell_gender_number" ):
                return visitor.visitTell_gender_number(self)
            else:
                return visitor.visitChildren(self)


    class Tell_name_beaconContext(FndpplContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FndpplContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Beacon(self):
            return self.getToken(gpsrParser.Beacon, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTell_name_beacon" ):
                return visitor.visitTell_name_beacon(self)
            else:
                return visitor.visitChildren(self)


    class Tell_gender_beaconContext(FndpplContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FndpplContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Beacon(self):
            return self.getToken(gpsrParser.Beacon, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTell_gender_beacon" ):
                return visitor.visitTell_gender_beacon(self)
            else:
                return visitor.visitChildren(self)


    class Tell_pose_roomContext(FndpplContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FndpplContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Room(self):
            return self.getToken(gpsrParser.Room, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTell_pose_room" ):
                return visitor.visitTell_pose_room(self)
            else:
                return visitor.visitChildren(self)


    class Find_talk_in_roomContext(FndpplContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FndpplContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def findp(self):
            return self.getTypedRuleContext(gpsrParser.FindpContext,0)

        def Room(self):
            return self.getToken(gpsrParser.Room, 0)
        def talk(self):
            return self.getTypedRuleContext(gpsrParser.TalkContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFind_talk_in_room" ):
                return visitor.visitFind_talk_in_room(self)
            else:
                return visitor.visitChildren(self)


    class Tell_pose_beaconContext(FndpplContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FndpplContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Beacon(self):
            return self.getToken(gpsrParser.Beacon, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTell_pose_beacon" ):
                return visitor.visitTell_pose_beacon(self)
            else:
                return visitor.visitChildren(self)


    class Tell_name_roomContext(FndpplContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FndpplContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Room(self):
            return self.getToken(gpsrParser.Room, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTell_name_room" ):
                return visitor.visitTell_name_room(self)
            else:
                return visitor.visitChildren(self)


    class Tell_pose_numberContext(FndpplContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FndpplContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Room(self):
            return self.getToken(gpsrParser.Room, 0)
        def pose(self):
            return self.getTypedRuleContext(gpsrParser.PoseContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTell_pose_number" ):
                return visitor.visitTell_pose_number(self)
            else:
                return visitor.visitChildren(self)


    class Talk_to_whowhereContext(FndpplContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FndpplContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def talk(self):
            return self.getTypedRuleContext(gpsrParser.TalkContext,0)

        def whoWhere(self):
            return self.getTypedRuleContext(gpsrParser.WhoWhereContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTalk_to_whowhere" ):
                return visitor.visitTalk_to_whowhere(self)
            else:
                return visitor.visitChildren(self)


    class Go_room_talkContext(FndpplContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FndpplContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def goroom(self):
            return self.getTypedRuleContext(gpsrParser.GoroomContext,0)

        def findp(self):
            return self.getTypedRuleContext(gpsrParser.FindpContext,0)

        def talk(self):
            return self.getTypedRuleContext(gpsrParser.TalkContext,0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(gpsrParser.Comma)
            else:
                return self.getToken(gpsrParser.Comma, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGo_room_talk" ):
                return visitor.visitGo_room_talk(self)
            else:
                return visitor.visitChildren(self)


    class Tell_gender_roomContext(FndpplContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FndpplContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Room(self):
            return self.getToken(gpsrParser.Room, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTell_gender_room" ):
                return visitor.visitTell_gender_room(self)
            else:
                return visitor.visitChildren(self)



    def fndppl(self):

        localctx = gpsrParser.FndpplContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_fndppl)
        self._la = 0 # Token type
        try:
            self.state = 526
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                localctx = gpsrParser.Talk_to_whowhereContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 424
                self.talk()
                self.state = 425
                self.match(gpsrParser.T__8)
                self.state = 426
                self.whoWhere()
                pass

            elif la_ == 2:
                localctx = gpsrParser.Find_talk_in_roomContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 428
                self.findp()
                self.state = 429
                self.match(gpsrParser.T__3)
                self.state = 430
                self.match(gpsrParser.T__2)
                self.state = 431
                self.match(gpsrParser.Room)
                self.state = 432
                self.match(gpsrParser.T__4)
                self.state = 433
                self.talk()
                pass

            elif la_ == 3:
                localctx = gpsrParser.Go_room_talkContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 435
                self.goroom()
                self.state = 437
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==134:
                    self.state = 436
                    self.match(gpsrParser.Comma)


                self.state = 439
                self.findp()
                self.state = 441
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==134:
                    self.state = 440
                    self.match(gpsrParser.Comma)


                self.state = 443
                self.match(gpsrParser.T__4)
                self.state = 444
                self.talk()
                pass

            elif la_ == 4:
                localctx = gpsrParser.Tell_name_beaconContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 446
                self.match(gpsrParser.T__13)
                self.state = 447
                self.match(gpsrParser.T__7)
                self.state = 448
                self.match(gpsrParser.T__2)
                self.state = 449
                self.match(gpsrParser.T__22)
                self.state = 450
                self.match(gpsrParser.T__23)
                self.state = 451
                self.match(gpsrParser.T__2)
                self.state = 452
                self.match(gpsrParser.T__1)
                self.state = 453
                self.match(gpsrParser.T__24)
                self.state = 454
                self.match(gpsrParser.T__2)
                self.state = 455
                self.match(gpsrParser.Beacon)
                pass

            elif la_ == 5:
                localctx = gpsrParser.Tell_gender_beaconContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 456
                self.match(gpsrParser.T__13)
                self.state = 457
                self.match(gpsrParser.T__7)
                self.state = 458
                self.match(gpsrParser.T__2)
                self.state = 459
                self.match(gpsrParser.T__25)
                self.state = 460
                self.match(gpsrParser.T__23)
                self.state = 461
                self.match(gpsrParser.T__2)
                self.state = 462
                self.match(gpsrParser.T__1)
                self.state = 463
                self.match(gpsrParser.T__24)
                self.state = 464
                self.match(gpsrParser.T__2)
                self.state = 465
                self.match(gpsrParser.Beacon)
                pass

            elif la_ == 6:
                localctx = gpsrParser.Tell_pose_beaconContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 466
                self.match(gpsrParser.T__13)
                self.state = 467
                self.match(gpsrParser.T__7)
                self.state = 468
                self.match(gpsrParser.T__2)
                self.state = 469
                self.match(gpsrParser.T__26)
                self.state = 470
                self.match(gpsrParser.T__23)
                self.state = 471
                self.match(gpsrParser.T__2)
                self.state = 472
                self.match(gpsrParser.T__1)
                self.state = 473
                self.match(gpsrParser.T__24)
                self.state = 474
                self.match(gpsrParser.T__2)
                self.state = 475
                self.match(gpsrParser.Beacon)
                pass

            elif la_ == 7:
                localctx = gpsrParser.Tell_name_roomContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 476
                self.match(gpsrParser.T__13)
                self.state = 477
                self.match(gpsrParser.T__7)
                self.state = 478
                self.match(gpsrParser.T__2)
                self.state = 479
                self.match(gpsrParser.T__22)
                self.state = 480
                self.match(gpsrParser.T__23)
                self.state = 481
                self.match(gpsrParser.T__2)
                self.state = 482
                self.match(gpsrParser.T__1)
                self.state = 483
                self.match(gpsrParser.T__3)
                self.state = 484
                self.match(gpsrParser.T__2)
                self.state = 485
                self.match(gpsrParser.Room)
                pass

            elif la_ == 8:
                localctx = gpsrParser.Tell_gender_roomContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 486
                self.match(gpsrParser.T__13)
                self.state = 487
                self.match(gpsrParser.T__7)
                self.state = 488
                self.match(gpsrParser.T__2)
                self.state = 489
                self.match(gpsrParser.T__25)
                self.state = 490
                self.match(gpsrParser.T__23)
                self.state = 491
                self.match(gpsrParser.T__2)
                self.state = 492
                self.match(gpsrParser.T__1)
                self.state = 493
                self.match(gpsrParser.T__3)
                self.state = 494
                self.match(gpsrParser.T__2)
                self.state = 495
                self.match(gpsrParser.Room)
                pass

            elif la_ == 9:
                localctx = gpsrParser.Tell_pose_roomContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 496
                self.match(gpsrParser.T__13)
                self.state = 497
                self.match(gpsrParser.T__7)
                self.state = 498
                self.match(gpsrParser.T__2)
                self.state = 499
                self.match(gpsrParser.T__26)
                self.state = 500
                self.match(gpsrParser.T__23)
                self.state = 501
                self.match(gpsrParser.T__2)
                self.state = 502
                self.match(gpsrParser.T__1)
                self.state = 503
                self.match(gpsrParser.T__3)
                self.state = 504
                self.match(gpsrParser.T__2)
                self.state = 505
                self.match(gpsrParser.Room)
                pass

            elif la_ == 10:
                localctx = gpsrParser.Tell_gender_numberContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 506
                self.match(gpsrParser.T__13)
                self.state = 507
                self.match(gpsrParser.T__7)
                self.state = 508
                self.match(gpsrParser.T__14)
                self.state = 509
                self.match(gpsrParser.T__15)
                self.state = 510
                self.match(gpsrParser.T__27)
                self.state = 511
                self.match(gpsrParser.T__3)
                self.state = 512
                self.match(gpsrParser.T__2)
                self.state = 513
                self.match(gpsrParser.Room)
                self.state = 514
                self.match(gpsrParser.T__17)
                self.state = 515
                self.pgenderp()
                pass

            elif la_ == 11:
                localctx = gpsrParser.Tell_pose_numberContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 516
                self.match(gpsrParser.T__13)
                self.state = 517
                self.match(gpsrParser.T__7)
                self.state = 518
                self.match(gpsrParser.T__14)
                self.state = 519
                self.match(gpsrParser.T__15)
                self.state = 520
                self.match(gpsrParser.T__27)
                self.state = 521
                self.match(gpsrParser.T__3)
                self.state = 522
                self.match(gpsrParser.T__2)
                self.state = 523
                self.match(gpsrParser.Room)
                self.state = 524
                self.match(gpsrParser.T__17)
                self.state = 525
                self.pose()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FollowContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_follow

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class From_beacon_to_whereContext(FollowContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FollowContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def gobeacon(self):
            return self.getTypedRuleContext(gpsrParser.GobeaconContext,0)

        def Name(self):
            return self.getToken(gpsrParser.Name, 0)
        def vbfollow(self):
            return self.getTypedRuleContext(gpsrParser.VbfollowContext,0)

        def Pron(self):
            return self.getToken(gpsrParser.Pron, 0)
        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(gpsrParser.Comma)
            else:
                return self.getToken(gpsrParser.Comma, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrom_beacon_to_where" ):
                return visitor.visitFrom_beacon_to_where(self)
            else:
                return visitor.visitChildren(self)


    class From_beacon_to_roomContext(FollowContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FollowContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def vbfollow(self):
            return self.getTypedRuleContext(gpsrParser.VbfollowContext,0)

        def Name(self):
            return self.getToken(gpsrParser.Name, 0)
        def Beacon(self):
            return self.getToken(gpsrParser.Beacon, 0)
        def Room(self):
            return self.getToken(gpsrParser.Room, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrom_beacon_to_room" ):
                return visitor.visitFrom_beacon_to_room(self)
            else:
                return visitor.visitChildren(self)


    class From_beacon_to_room_indirectContext(FollowContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FollowContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Name(self):
            return self.getToken(gpsrParser.Name, 0)
        def Beacon(self):
            return self.getToken(gpsrParser.Beacon, 0)
        def vbfollow(self):
            return self.getTypedRuleContext(gpsrParser.VbfollowContext,0)

        def Pron(self):
            return self.getToken(gpsrParser.Pron, 0)
        def fllwdest(self):
            return self.getTypedRuleContext(gpsrParser.FllwdestContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrom_beacon_to_room_indirect" ):
                return visitor.visitFrom_beacon_to_room_indirect(self)
            else:
                return visitor.visitChildren(self)



    def follow(self):

        localctx = gpsrParser.FollowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_follow)
        self._la = 0 # Token type
        try:
            self.state = 561
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [127]:
                localctx = gpsrParser.From_beacon_to_roomContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 528
                self.vbfollow()
                self.state = 529
                self.match(gpsrParser.Name)
                self.state = 530
                self.match(gpsrParser.T__9)
                self.state = 531
                self.match(gpsrParser.T__2)
                self.state = 532
                self.match(gpsrParser.Beacon)
                self.state = 533
                self.match(gpsrParser.T__8)
                self.state = 534
                self.match(gpsrParser.T__2)
                self.state = 535
                self.match(gpsrParser.Room)
                pass
            elif token in [29]:
                localctx = gpsrParser.From_beacon_to_room_indirectContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 537
                self.match(gpsrParser.T__28)
                self.state = 538
                self.match(gpsrParser.Name)
                self.state = 539
                self.match(gpsrParser.T__24)
                self.state = 540
                self.match(gpsrParser.T__2)
                self.state = 541
                self.match(gpsrParser.Beacon)
                self.state = 542
                self.match(gpsrParser.T__4)
                self.state = 543
                self.vbfollow()
                self.state = 544
                self.match(gpsrParser.Pron)
                self.state = 546
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==9:
                    self.state = 545
                    self.fllwdest()


                pass
            elif token in [117, 118]:
                localctx = gpsrParser.From_beacon_to_whereContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 548
                self.gobeacon()
                self.state = 550
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==134:
                    self.state = 549
                    self.match(gpsrParser.Comma)


                self.state = 552
                self.match(gpsrParser.T__28)
                self.state = 553
                self.match(gpsrParser.Name)
                self.state = 555
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==134:
                    self.state = 554
                    self.match(gpsrParser.Comma)


                self.state = 557
                self.match(gpsrParser.T__4)
                self.state = 558
                self.vbfollow()
                self.state = 559
                self.match(gpsrParser.Pron)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FllmeetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Name(self):
            return self.getToken(gpsrParser.Name, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_fllmeet

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFllmeet" ):
                return visitor.visitFllmeet(self)
            else:
                return visitor.visitChildren(self)




    def fllmeet(self):

        localctx = gpsrParser.FllmeetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_fllmeet)
        try:
            self.state = 568
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [29]:
                self.enterOuterAlt(localctx, 1)
                self.state = 563
                self.match(gpsrParser.T__28)
                self.state = 564
                self.match(gpsrParser.Name)
                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 2)
                self.state = 565
                self.match(gpsrParser.T__29)
                self.state = 566
                self.match(gpsrParser.T__0)
                self.state = 567
                self.match(gpsrParser.T__1)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FllwdestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Room(self):
            return self.getToken(gpsrParser.Room, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_fllwdest

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFllwdest" ):
                return visitor.visitFllwdest(self)
            else:
                return visitor.visitChildren(self)




    def fllwdest(self):

        localctx = gpsrParser.FllwdestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_fllwdest)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 570
            self.match(gpsrParser.T__8)
            self.state = 571
            self.match(gpsrParser.T__2)
            self.state = 572
            self.match(gpsrParser.Room)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GuideContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def gdcmd(self):
            return self.getTypedRuleContext(gpsrParser.GdcmdContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_guide

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGuide" ):
                return visitor.visitGuide(self)
            else:
                return visitor.visitChildren(self)




    def guide(self):

        localctx = gpsrParser.GuideContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_guide)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 574
            self.gdcmd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GdcmdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_gdcmd

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Beacon_to_beacon_gobeacon_guidetoContext(GdcmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.GdcmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def gobeacon(self):
            return self.getTypedRuleContext(gpsrParser.GobeaconContext,0)

        def Name(self):
            return self.getToken(gpsrParser.Name, 0)
        def guideto(self):
            return self.getTypedRuleContext(gpsrParser.GuidetoContext,0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(gpsrParser.Comma)
            else:
                return self.getToken(gpsrParser.Comma, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBeacon_to_beacon_gobeacon_guideto" ):
                return visitor.visitBeacon_to_beacon_gobeacon_guideto(self)
            else:
                return visitor.visitChildren(self)


    class Beacon_to_beaconContext(GdcmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.GdcmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def vbguide(self):
            return self.getTypedRuleContext(gpsrParser.VbguideContext,0)

        def Name(self):
            return self.getToken(gpsrParser.Name, 0)
        def Beacon(self, i:int=None):
            if i is None:
                return self.getTokens(gpsrParser.Beacon)
            else:
                return self.getToken(gpsrParser.Beacon, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBeacon_to_beacon" ):
                return visitor.visitBeacon_to_beacon(self)
            else:
                return visitor.visitChildren(self)


    class Beacon_to_beacon_guide_toContext(GdcmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.GdcmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Name(self):
            return self.getToken(gpsrParser.Name, 0)
        def Beacon(self):
            return self.getToken(gpsrParser.Beacon, 0)
        def guideto(self):
            return self.getTypedRuleContext(gpsrParser.GuidetoContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBeacon_to_beacon_guide_to" ):
                return visitor.visitBeacon_to_beacon_guide_to(self)
            else:
                return visitor.visitChildren(self)


    class Beacon_to_beacon_gdwhereContext(GdcmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.GdcmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def vbguide(self):
            return self.getTypedRuleContext(gpsrParser.VbguideContext,0)

        def Name(self):
            return self.getToken(gpsrParser.Name, 0)
        def Beacon(self):
            return self.getToken(gpsrParser.Beacon, 0)
        def gdwhere(self):
            return self.getTypedRuleContext(gpsrParser.GdwhereContext,0)

        def Comma(self):
            return self.getToken(gpsrParser.Comma, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBeacon_to_beacon_gdwhere" ):
                return visitor.visitBeacon_to_beacon_gdwhere(self)
            else:
                return visitor.visitChildren(self)



    def gdcmd(self):

        localctx = gpsrParser.GdcmdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_gdcmd)
        self._la = 0 # Token type
        try:
            self.state = 614
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                localctx = gpsrParser.Beacon_to_beaconContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 576
                self.vbguide()
                self.state = 577
                self.match(gpsrParser.Name)
                self.state = 578
                self.match(gpsrParser.T__9)
                self.state = 579
                self.match(gpsrParser.T__2)
                self.state = 580
                self.match(gpsrParser.Beacon)
                self.state = 581
                self.match(gpsrParser.T__8)
                self.state = 582
                self.match(gpsrParser.T__2)
                self.state = 583
                self.match(gpsrParser.Beacon)
                pass

            elif la_ == 2:
                localctx = gpsrParser.Beacon_to_beacon_guide_toContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 585
                self.match(gpsrParser.T__28)
                self.state = 586
                self.match(gpsrParser.Name)
                self.state = 587
                self.match(gpsrParser.T__24)
                self.state = 588
                self.match(gpsrParser.T__2)
                self.state = 589
                self.match(gpsrParser.Beacon)
                self.state = 590
                self.match(gpsrParser.T__4)
                self.state = 591
                self.guideto()
                pass

            elif la_ == 3:
                localctx = gpsrParser.Beacon_to_beacon_gobeacon_guidetoContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 592
                self.gobeacon()
                self.state = 594
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==134:
                    self.state = 593
                    self.match(gpsrParser.Comma)


                self.state = 596
                self.match(gpsrParser.T__28)
                self.state = 597
                self.match(gpsrParser.Name)
                self.state = 599
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==134:
                    self.state = 598
                    self.match(gpsrParser.Comma)


                self.state = 601
                self.match(gpsrParser.T__4)
                self.state = 602
                self.guideto()
                pass

            elif la_ == 4:
                localctx = gpsrParser.Beacon_to_beacon_gdwhereContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 604
                self.vbguide()
                self.state = 605
                self.match(gpsrParser.Name)
                self.state = 606
                self.match(gpsrParser.T__8)
                self.state = 607
                self.match(gpsrParser.T__2)
                self.state = 608
                self.match(gpsrParser.Beacon)
                self.state = 610
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==134:
                    self.state = 609
                    self.match(gpsrParser.Comma)


                self.state = 612
                self.gdwhere()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GuidetoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbguide(self):
            return self.getTypedRuleContext(gpsrParser.VbguideContext,0)


        def Pron(self):
            return self.getToken(gpsrParser.Pron, 0)

        def Beacon(self):
            return self.getToken(gpsrParser.Beacon, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_guideto

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGuideto" ):
                return visitor.visitGuideto(self)
            else:
                return visitor.visitChildren(self)




    def guideto(self):

        localctx = gpsrParser.GuidetoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_guideto)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 616
            self.vbguide()
            self.state = 617
            self.match(gpsrParser.Pron)
            self.state = 618
            self.match(gpsrParser.T__8)
            self.state = 619
            self.match(gpsrParser.T__2)
            self.state = 620
            self.match(gpsrParser.Beacon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GdwhereContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Pron(self):
            return self.getToken(gpsrParser.Pron, 0)

        def Beacon(self):
            return self.getToken(gpsrParser.Beacon, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_gdwhere

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGdwhere" ):
                return visitor.visitGdwhere(self)
            else:
                return visitor.visitChildren(self)




    def gdwhere(self):

        localctx = gpsrParser.GdwhereContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_gdwhere)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 622
            self.match(gpsrParser.T__30)
            self.state = 623
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 30064771072) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 624
            self.match(gpsrParser.T__29)
            self.state = 625
            self.match(gpsrParser.Pron)
            self.state = 626
            self.match(gpsrParser.T__24)
            self.state = 627
            self.match(gpsrParser.T__2)
            self.state = 628
            self.match(gpsrParser.Beacon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FollowoutContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_followout

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Beacon_to_roomContext(FollowoutContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FollowoutContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Name(self):
            return self.getToken(gpsrParser.Name, 0)
        def Beacon(self):
            return self.getToken(gpsrParser.Beacon, 0)
        def vbfollow(self):
            return self.getTypedRuleContext(gpsrParser.VbfollowContext,0)

        def Pron(self):
            return self.getToken(gpsrParser.Pron, 0)
        def goroom(self):
            return self.getTypedRuleContext(gpsrParser.GoroomContext,0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(gpsrParser.Comma)
            else:
                return self.getToken(gpsrParser.Comma, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBeacon_to_room" ):
                return visitor.visitBeacon_to_room(self)
            else:
                return visitor.visitChildren(self)


    class Beacon_to_backContext(FollowoutContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FollowoutContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Name(self):
            return self.getToken(gpsrParser.Name, 0)
        def Beacon(self):
            return self.getToken(gpsrParser.Beacon, 0)
        def vbfollow(self):
            return self.getTypedRuleContext(gpsrParser.VbfollowContext,0)

        def Pron(self, i:int=None):
            if i is None:
                return self.getTokens(gpsrParser.Pron)
            else:
                return self.getToken(gpsrParser.Pron, i)
        def vbguide(self):
            return self.getTypedRuleContext(gpsrParser.VbguideContext,0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(gpsrParser.Comma)
            else:
                return self.getToken(gpsrParser.Comma, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBeacon_to_back" ):
                return visitor.visitBeacon_to_back(self)
            else:
                return visitor.visitChildren(self)



    def followout(self):

        localctx = gpsrParser.FollowoutContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_followout)
        self._la = 0 # Token type
        try:
            self.state = 664
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                localctx = gpsrParser.Beacon_to_roomContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 630
                self.match(gpsrParser.T__28)
                self.state = 631
                self.match(gpsrParser.Name)
                self.state = 632
                self.match(gpsrParser.T__24)
                self.state = 633
                self.match(gpsrParser.T__2)
                self.state = 634
                self.match(gpsrParser.Beacon)
                self.state = 636
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==134:
                    self.state = 635
                    self.match(gpsrParser.Comma)


                self.state = 638
                self.vbfollow()
                self.state = 639
                self.match(gpsrParser.Pron)
                self.state = 641
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==134:
                    self.state = 640
                    self.match(gpsrParser.Comma)


                self.state = 643
                self.match(gpsrParser.T__4)
                self.state = 644
                self.goroom()
                pass

            elif la_ == 2:
                localctx = gpsrParser.Beacon_to_backContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 646
                self.match(gpsrParser.T__28)
                self.state = 647
                self.match(gpsrParser.Name)
                self.state = 648
                self.match(gpsrParser.T__24)
                self.state = 649
                self.match(gpsrParser.T__2)
                self.state = 650
                self.match(gpsrParser.Beacon)
                self.state = 652
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==134:
                    self.state = 651
                    self.match(gpsrParser.Comma)


                self.state = 654
                self.vbfollow()
                self.state = 655
                self.match(gpsrParser.Pron)
                self.state = 657
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==134:
                    self.state = 656
                    self.match(gpsrParser.Comma)


                self.state = 659
                self.match(gpsrParser.T__4)
                self.state = 660
                self.vbguide()
                self.state = 661
                self.match(gpsrParser.Pron)
                self.state = 662
                self.match(gpsrParser.T__34)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IncompleteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbfollow(self):
            return self.getTypedRuleContext(gpsrParser.VbfollowContext,0)


        def Name(self):
            return self.getToken(gpsrParser.Name, 0)

        def vbbring(self):
            return self.getTypedRuleContext(gpsrParser.VbbringContext,0)


        def Object_obfuscated(self):
            return self.getToken(gpsrParser.Object_obfuscated, 0)

        def vbdeliver(self):
            return self.getTypedRuleContext(gpsrParser.VbdeliverContext,0)


        def someone(self):
            return self.getTypedRuleContext(gpsrParser.SomeoneContext,0)


        def vbguide(self):
            return self.getTypedRuleContext(gpsrParser.VbguideContext,0)


        def Beacon(self):
            return self.getToken(gpsrParser.Beacon, 0)

        def inguidewho(self):
            return self.getTypedRuleContext(gpsrParser.InguidewhoContext,0)


        def Pron(self):
            return self.getToken(gpsrParser.Pron, 0)

        def gobeacon(self):
            return self.getTypedRuleContext(gpsrParser.GobeaconContext,0)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(gpsrParser.Comma)
            else:
                return self.getToken(gpsrParser.Comma, i)

        def getRuleIndex(self):
            return gpsrParser.RULE_incomplete

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIncomplete" ):
                return visitor.visitIncomplete(self)
            else:
                return visitor.visitChildren(self)




    def incomplete(self):

        localctx = gpsrParser.IncompleteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_incomplete)
        self._la = 0 # Token type
        try:
            self.state = 704
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 666
                self.vbfollow()
                self.state = 667
                self.match(gpsrParser.Name)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 669
                self.vbbring()
                self.state = 670
                self.match(gpsrParser.T__7)
                self.state = 671
                self.match(gpsrParser.T__2)
                self.state = 672
                self.match(gpsrParser.Object_obfuscated)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 674
                self.vbdeliver()
                self.state = 675
                self.match(gpsrParser.Object_obfuscated)
                self.state = 676
                self.match(gpsrParser.T__8)
                self.state = 677
                self.someone()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 679
                self.vbguide()
                self.state = 680
                self.match(gpsrParser.Name)
                self.state = 681
                self.match(gpsrParser.T__8)
                self.state = 682
                self.match(gpsrParser.T__2)
                self.state = 683
                self.match(gpsrParser.Beacon)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 685
                self.match(gpsrParser.T__28)
                self.state = 686
                self.inguidewho()
                self.state = 687
                self.match(gpsrParser.T__4)
                self.state = 688
                self.vbguide()
                self.state = 689
                self.match(gpsrParser.Pron)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 691
                self.gobeacon()
                self.state = 693
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==134:
                    self.state = 692
                    self.match(gpsrParser.Comma)


                self.state = 695
                self.match(gpsrParser.T__28)
                self.state = 696
                self.inguidewho()
                self.state = 698
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==134:
                    self.state = 697
                    self.match(gpsrParser.Comma)


                self.state = 700
                self.match(gpsrParser.T__4)
                self.state = 701
                self.vbguide()
                self.state = 702
                self.match(gpsrParser.Pron)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InguidewhoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Name(self):
            return self.getToken(gpsrParser.Name, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_inguidewho

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInguidewho" ):
                return visitor.visitInguidewho(self)
            else:
                return visitor.visitChildren(self)




    def inguidewho(self):

        localctx = gpsrParser.InguidewhoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_inguidewho)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 706
            self.match(gpsrParser.Name)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartyhostContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbserve(self):
            return self.getTypedRuleContext(gpsrParser.VbserveContext,0)


        def phpeopler(self):
            return self.getTypedRuleContext(gpsrParser.PhpeoplerContext,0)


        def vbmeet(self):
            return self.getTypedRuleContext(gpsrParser.VbmeetContext,0)


        def Name(self, i:int=None):
            if i is None:
                return self.getTokens(gpsrParser.Name)
            else:
                return self.getToken(gpsrParser.Name, i)

        def door(self):
            return self.getTypedRuleContext(gpsrParser.DoorContext,0)


        def Pron(self, i:int=None):
            if i is None:
                return self.getTokens(gpsrParser.Pron)
            else:
                return self.getToken(gpsrParser.Pron, i)

        def Beacon(self, i:int=None):
            if i is None:
                return self.getTokens(gpsrParser.Beacon)
            else:
                return self.getToken(gpsrParser.Beacon, i)

        def vbguide(self):
            return self.getTypedRuleContext(gpsrParser.VbguideContext,0)


        def taxi(self):
            return self.getTypedRuleContext(gpsrParser.TaxiContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_partyhost

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartyhost" ):
                return visitor.visitPartyhost(self)
            else:
                return visitor.visitChildren(self)




    def partyhost(self):

        localctx = gpsrParser.PartyhostContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_partyhost)
        try:
            self.state = 761
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 708
                self.vbserve()
                self.state = 709
                self.match(gpsrParser.T__35)
                self.state = 710
                self.match(gpsrParser.T__8)
                self.state = 711
                self.phpeopler()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 713
                self.vbmeet()
                self.state = 714
                self.match(gpsrParser.Name)
                self.state = 715
                self.match(gpsrParser.T__24)
                self.state = 716
                self.match(gpsrParser.T__2)
                self.state = 717
                self.door()
                self.state = 718
                self.match(gpsrParser.T__4)
                self.state = 719
                self.match(gpsrParser.T__36)
                self.state = 720
                self.match(gpsrParser.Pron)
                self.state = 721
                self.match(gpsrParser.T__8)
                self.state = 722
                self.phpeopler()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 724
                self.vbmeet()
                self.state = 725
                self.match(gpsrParser.Name)
                self.state = 726
                self.match(gpsrParser.T__24)
                self.state = 727
                self.match(gpsrParser.T__2)
                self.state = 728
                self.match(gpsrParser.Beacon)
                self.state = 729
                self.match(gpsrParser.T__4)
                self.state = 730
                self.match(gpsrParser.T__37)
                self.state = 731
                self.match(gpsrParser.Pron)
                self.state = 732
                self.match(gpsrParser.T__8)
                self.state = 733
                self.match(gpsrParser.T__38)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 735
                self.vbmeet()
                self.state = 736
                self.match(gpsrParser.Name)
                self.state = 737
                self.match(gpsrParser.T__24)
                self.state = 738
                self.match(gpsrParser.T__2)
                self.state = 739
                self.match(gpsrParser.Beacon)
                self.state = 740
                self.match(gpsrParser.T__4)
                self.state = 741
                self.match(gpsrParser.T__36)
                self.state = 742
                self.match(gpsrParser.Pron)
                self.state = 743
                self.match(gpsrParser.T__8)
                self.state = 744
                self.match(gpsrParser.Name)
                self.state = 745
                self.match(gpsrParser.T__24)
                self.state = 746
                self.match(gpsrParser.T__2)
                self.state = 747
                self.match(gpsrParser.Beacon)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 749
                self.vbmeet()
                self.state = 750
                self.match(gpsrParser.Name)
                self.state = 751
                self.match(gpsrParser.T__24)
                self.state = 752
                self.match(gpsrParser.T__2)
                self.state = 753
                self.match(gpsrParser.Beacon)
                self.state = 754
                self.match(gpsrParser.T__4)
                self.state = 755
                self.vbguide()
                self.state = 756
                self.match(gpsrParser.Pron)
                self.state = 757
                self.match(gpsrParser.T__8)
                self.state = 758
                self.match(gpsrParser.Pron)
                self.state = 759
                self.taxi()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PhpeopleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def peopletype(self):
            return self.getTypedRuleContext(gpsrParser.PeopletypeContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_phpeople

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPhpeople" ):
                return visitor.visitPhpeople(self)
            else:
                return visitor.visitChildren(self)




    def phpeople(self):

        localctx = gpsrParser.PhpeopleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_phpeople)
        try:
            self.state = 767
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [40]:
                self.enterOuterAlt(localctx, 1)
                self.state = 763
                self.match(gpsrParser.T__39)
                pass
            elif token in [41]:
                self.enterOuterAlt(localctx, 2)
                self.state = 764
                self.match(gpsrParser.T__40)
                self.state = 765
                self.match(gpsrParser.T__2)
                self.state = 766
                self.peopletype()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PeopletypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_peopletype

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPeopletype" ):
                return visitor.visitPeopletype(self)
            else:
                return visitor.visitChildren(self)




    def peopletype(self):

        localctx = gpsrParser.PeopletypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_peopletype)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 769
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 136339710279680) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PhpeoplerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def phpeople(self):
            return self.getTypedRuleContext(gpsrParser.PhpeopleContext,0)


        def Room(self):
            return self.getToken(gpsrParser.Room, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_phpeopler

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPhpeopler" ):
                return visitor.visitPhpeopler(self)
            else:
                return visitor.visitChildren(self)




    def phpeopler(self):

        localctx = gpsrParser.PhpeoplerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_phpeopler)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 771
            self.phpeople()
            self.state = 772
            self.match(gpsrParser.T__3)
            self.state = 773
            self.match(gpsrParser.T__2)
            self.state = 774
            self.match(gpsrParser.Room)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PgendersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_pgenders

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPgenders" ):
                return visitor.visitPgenders(self)
            else:
                return visitor.visitChildren(self)




    def pgenders(self):

        localctx = gpsrParser.PgendersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_pgenders)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 776
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 2111062325329920) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PgenderpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_pgenderp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPgenderp" ):
                return visitor.visitPgenderp(self)
            else:
                return visitor.visitChildren(self)




    def pgenderp(self):

        localctx = gpsrParser.PgenderpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_pgenderp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 778
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 33790191344812032) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PoseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_pose

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPose" ):
                return visitor.visitPose(self)
            else:
                return visitor.visitChildren(self)




    def pose(self):

        localctx = gpsrParser.PoseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_pose)
        try:
            self.state = 784
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [55]:
                self.enterOuterAlt(localctx, 1)
                self.state = 780
                self.match(gpsrParser.T__54)
                pass
            elif token in [56]:
                self.enterOuterAlt(localctx, 2)
                self.state = 781
                self.match(gpsrParser.T__55)
                pass
            elif token in [57]:
                self.enterOuterAlt(localctx, 3)
                self.state = 782
                self.match(gpsrParser.T__56)
                self.state = 783
                self.match(gpsrParser.T__57)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AbsposContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_abspos

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAbspos" ):
                return visitor.visitAbspos(self)
            else:
                return visitor.visitChildren(self)




    def abspos(self):

        localctx = gpsrParser.AbsposContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_abspos)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 786
            _la = self._input.LA(1)
            if not(_la==59 or _la==60):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelposContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_relpos

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelpos" ):
                return visitor.visitRelpos(self)
            else:
                return visitor.visitChildren(self)




    def relpos(self):

        localctx = gpsrParser.RelposContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_relpos)
        try:
            self.state = 802
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 788
                self.match(gpsrParser.T__24)
                self.state = 789
                self.match(gpsrParser.T__2)
                self.state = 790
                self.match(gpsrParser.T__60)
                self.state = 791
                self.match(gpsrParser.T__23)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 792
                self.match(gpsrParser.T__24)
                self.state = 793
                self.match(gpsrParser.T__2)
                self.state = 794
                self.match(gpsrParser.T__61)
                self.state = 795
                self.match(gpsrParser.T__23)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 796
                self.match(gpsrParser.T__6)
                self.state = 797
                self.match(gpsrParser.T__62)
                self.state = 798
                self.match(gpsrParser.T__23)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 799
                self.match(gpsrParser.T__63)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 800
                self.match(gpsrParser.T__64)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 801
                self.match(gpsrParser.T__65)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GarbageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_garbage

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGarbage" ):
                return visitor.visitGarbage(self)
            else:
                return visitor.visitChildren(self)




    def garbage(self):

        localctx = gpsrParser.GarbageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_garbage)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 804
            _la = self._input.LA(1)
            if not(((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 63) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LuggageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_luggage

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLuggage" ):
                return visitor.visitLuggage(self)
            else:
                return visitor.visitChildren(self)




    def luggage(self):

        localctx = gpsrParser.LuggageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_luggage)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 806
            _la = self._input.LA(1)
            if not(((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & 31) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TaxiContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_taxi

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTaxi" ):
                return visitor.visitTaxi(self)
            else:
                return visitor.visitChildren(self)




    def taxi(self):

        localctx = gpsrParser.TaxiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_taxi)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 808
            _la = self._input.LA(1)
            if not(((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DoorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def doorpos(self):
            return self.getTypedRuleContext(gpsrParser.DoorposContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_door

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDoor" ):
                return visitor.visitDoor(self)
            else:
                return visitor.visitChildren(self)




    def door(self):

        localctx = gpsrParser.DoorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_door)
        try:
            self.state = 816
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 810
                self.doorpos()
                self.state = 811
                self.match(gpsrParser.T__80)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 813
                self.doorpos()
                self.state = 814
                self.match(gpsrParser.T__81)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DoorposContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_doorpos

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDoorpos" ):
                return visitor.visitDoorpos(self)
            else:
                return visitor.visitChildren(self)




    def doorpos(self):

        localctx = gpsrParser.DoorposContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_doorpos)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 818
            _la = self._input.LA(1)
            if not(((((_la - 35)) & ~0x3f) == 0 and ((1 << (_la - 35)) & 1970324836974593) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbtakeoutContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_vbtakeout

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVbtakeout" ):
                return visitor.visitVbtakeout(self)
            else:
                return visitor.visitChildren(self)




    def vbtakeout(self):

        localctx = gpsrParser.VbtakeoutContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_vbtakeout)
        try:
            self.state = 823
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [86]:
                self.enterOuterAlt(localctx, 1)
                self.state = 820
                self.match(gpsrParser.T__85)
                self.state = 821
                self.match(gpsrParser.T__86)
                pass
            elif token in [88]:
                self.enterOuterAlt(localctx, 2)
                self.state = 822
                self.match(gpsrParser.T__87)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbcleanupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_vbcleanup

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVbcleanup" ):
                return visitor.visitVbcleanup(self)
            else:
                return visitor.visitChildren(self)




    def vbcleanup(self):

        localctx = gpsrParser.VbcleanupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_vbcleanup)
        try:
            self.state = 833
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 825
                self.match(gpsrParser.T__88)
                self.state = 826
                self.match(gpsrParser.T__86)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 827
                self.match(gpsrParser.T__88)
                self.state = 828
                self.match(gpsrParser.T__89)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 829
                self.match(gpsrParser.T__90)
                self.state = 830
                self.match(gpsrParser.T__91)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 831
                self.match(gpsrParser.T__92)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 832
                self.match(gpsrParser.T__93)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbserveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_vbserve

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVbserve" ):
                return visitor.visitVbserve(self)
            else:
                return visitor.visitChildren(self)




    def vbserve(self):

        localctx = gpsrParser.VbserveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_vbserve)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 835
            _la = self._input.LA(1)
            if not(((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & 63) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbmeetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_vbmeet

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVbmeet" ):
                return visitor.visitVbmeet(self)
            else:
                return visitor.visitChildren(self)




    def vbmeet(self):

        localctx = gpsrParser.VbmeetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_vbmeet)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 837
            _la = self._input.LA(1)
            if not(_la==30 or ((((_la - 101)) & ~0x3f) == 0 and ((1 << (_la - 101)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SomeoneContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def whoWhere(self):
            return self.getTypedRuleContext(gpsrParser.WhoWhereContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_someone

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSomeone" ):
                return visitor.visitSomeone(self)
            else:
                return visitor.visitChildren(self)




    def someone(self):

        localctx = gpsrParser.SomeoneContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_someone)
        try:
            self.state = 841
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [8]:
                self.enterOuterAlt(localctx, 1)
                self.state = 839
                self.match(gpsrParser.T__7)
                pass
            elif token in [3]:
                self.enterOuterAlt(localctx, 2)
                self.state = 840
                self.whoWhere()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PlaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbplace(self):
            return self.getTypedRuleContext(gpsrParser.VbplaceContext,0)


        def Placement(self):
            return self.getToken(gpsrParser.Placement, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_place

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPlace" ):
                return visitor.visitPlace(self)
            else:
                return visitor.visitChildren(self)




    def place(self):

        localctx = gpsrParser.PlaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_place)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 843
            self.vbplace()
            self.state = 844
            self.match(gpsrParser.T__5)
            self.state = 845
            self.match(gpsrParser.T__6)
            self.state = 846
            self.match(gpsrParser.T__2)
            self.state = 847
            self.match(gpsrParser.Placement)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OpropContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_oprop

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOprop" ):
                return visitor.visitOprop(self)
            else:
                return visitor.visitChildren(self)




    def oprop(self):

        localctx = gpsrParser.OpropContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_oprop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 849
            _la = self._input.LA(1)
            if not(((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & 63) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GoplaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbgopl(self):
            return self.getTypedRuleContext(gpsrParser.VbgoplContext,0)


        def Placement(self):
            return self.getToken(gpsrParser.Placement, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_goplace

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGoplace" ):
                return visitor.visitGoplace(self)
            else:
                return visitor.visitChildren(self)




    def goplace(self):

        localctx = gpsrParser.GoplaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_goplace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 851
            self.vbgopl()
            self.state = 852
            self.match(gpsrParser.T__8)
            self.state = 853
            self.match(gpsrParser.T__2)
            self.state = 854
            self.match(gpsrParser.Placement)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GobeaconContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbgopl(self):
            return self.getTypedRuleContext(gpsrParser.VbgoplContext,0)


        def Beacon(self):
            return self.getToken(gpsrParser.Beacon, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_gobeacon

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGobeacon" ):
                return visitor.visitGobeacon(self)
            else:
                return visitor.visitChildren(self)




    def gobeacon(self):

        localctx = gpsrParser.GobeaconContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_gobeacon)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 856
            self.vbgopl()
            self.state = 857
            self.match(gpsrParser.T__8)
            self.state = 858
            self.match(gpsrParser.T__2)
            self.state = 859
            self.match(gpsrParser.Beacon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GoroomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbgopl(self):
            return self.getTypedRuleContext(gpsrParser.VbgoplContext,0)


        def Room(self):
            return self.getToken(gpsrParser.Room, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_goroom

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGoroom" ):
                return visitor.visitGoroom(self)
            else:
                return visitor.visitChildren(self)




    def goroom(self):

        localctx = gpsrParser.GoroomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_goroom)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 861
            self.vbgopl()
            self.state = 862
            self.match(gpsrParser.T__8)
            self.state = 863
            self.match(gpsrParser.T__2)
            self.state = 864
            self.match(gpsrParser.Room)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TakeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbtake(self):
            return self.getTypedRuleContext(gpsrParser.VbtakeContext,0)


        def Object(self):
            return self.getToken(gpsrParser.Object, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_take

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTake" ):
                return visitor.visitTake(self)
            else:
                return visitor.visitChildren(self)




    def take(self):

        localctx = gpsrParser.TakeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_take)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 866
            self.vbtake()
            self.state = 867
            self.match(gpsrParser.T__2)
            self.state = 868
            self.match(gpsrParser.Object)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TakefromContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def take(self):
            return self.getTypedRuleContext(gpsrParser.TakeContext,0)


        def Placement(self):
            return self.getToken(gpsrParser.Placement, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_takefrom

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTakefrom" ):
                return visitor.visitTakefrom(self)
            else:
                return visitor.visitChildren(self)




    def takefrom(self):

        localctx = gpsrParser.TakefromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_takefrom)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 870
            self.take()
            self.state = 871
            self.match(gpsrParser.T__9)
            self.state = 872
            self.match(gpsrParser.T__2)
            self.state = 873
            self.match(gpsrParser.Placement)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DelivmeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbdeliver(self):
            return self.getTypedRuleContext(gpsrParser.VbdeliverContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_delivme

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDelivme" ):
                return visitor.visitDelivme(self)
            else:
                return visitor.visitChildren(self)




    def delivme(self):

        localctx = gpsrParser.DelivmeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_delivme)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 875
            self.vbdeliver()
            self.state = 876
            self.match(gpsrParser.T__5)
            self.state = 877
            self.match(gpsrParser.T__8)
            self.state = 878
            self.match(gpsrParser.T__7)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DelivtoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbdeliver(self):
            return self.getTypedRuleContext(gpsrParser.VbdeliverContext,0)


        def Name(self):
            return self.getToken(gpsrParser.Name, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_delivto

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDelivto" ):
                return visitor.visitDelivto(self)
            else:
                return visitor.visitChildren(self)




    def delivto(self):

        localctx = gpsrParser.DelivtoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_delivto)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 880
            self.vbdeliver()
            self.state = 881
            self.match(gpsrParser.T__5)
            self.state = 882
            self.match(gpsrParser.T__8)
            self.state = 883
            self.match(gpsrParser.Name)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DelivatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbdeliver(self):
            return self.getTypedRuleContext(gpsrParser.VbdeliverContext,0)


        def Name(self):
            return self.getToken(gpsrParser.Name, 0)

        def Beacon(self):
            return self.getToken(gpsrParser.Beacon, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_delivat

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDelivat" ):
                return visitor.visitDelivat(self)
            else:
                return visitor.visitChildren(self)




    def delivat(self):

        localctx = gpsrParser.DelivatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_delivat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 885
            self.vbdeliver()
            self.state = 886
            self.match(gpsrParser.T__5)
            self.state = 887
            self.match(gpsrParser.T__8)
            self.state = 888
            self.match(gpsrParser.Name)
            self.state = 889
            self.match(gpsrParser.T__24)
            self.state = 890
            self.match(gpsrParser.T__2)
            self.state = 891
            self.match(gpsrParser.Beacon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TalkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_talk

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Answer_questionContext(TalkContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.TalkContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Answer(self):
            return self.getToken(gpsrParser.Answer, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnswer_question" ):
                return visitor.visitAnswer_question(self)
            else:
                return visitor.visitChildren(self)


    class Speak_toContext(TalkContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.TalkContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def speak(self):
            return self.getTypedRuleContext(gpsrParser.SpeakContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpeak_to" ):
                return visitor.visitSpeak_to(self)
            else:
                return visitor.visitChildren(self)



    def talk(self):

        localctx = gpsrParser.TalkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_talk)
        try:
            self.state = 895
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [132]:
                localctx = gpsrParser.Answer_questionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 893
                self.match(gpsrParser.Answer)
                pass
            elif token in [14, 116]:
                localctx = gpsrParser.Speak_toContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 894
                self.speak()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpeakContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbspeak(self):
            return self.getTypedRuleContext(gpsrParser.VbspeakContext,0)


        def Whattosay(self):
            return self.getToken(gpsrParser.Whattosay, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_speak

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpeak" ):
                return visitor.visitSpeak(self)
            else:
                return visitor.visitChildren(self)




    def speak(self):

        localctx = gpsrParser.SpeakContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_speak)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 897
            self.vbspeak()
            self.state = 898
            self.match(gpsrParser.Whattosay)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbbtakeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_vbbtake

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVbbtake" ):
                return visitor.visitVbbtake(self)
            else:
                return visitor.visitChildren(self)




    def vbbtake(self):

        localctx = gpsrParser.VbbtakeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_vbbtake)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 900
            _la = self._input.LA(1)
            if not(_la==86 or _la==110):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbplaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_vbplace

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVbplace" ):
                return visitor.visitVbplace(self)
            else:
                return visitor.visitChildren(self)




    def vbplace(self):

        localctx = gpsrParser.VbplaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_vbplace)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 902
            _la = self._input.LA(1)
            if not(_la==111 or _la==112):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbbringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_vbbring

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVbbring" ):
                return visitor.visitVbbring(self)
            else:
                return visitor.visitChildren(self)




    def vbbring(self):

        localctx = gpsrParser.VbbringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_vbbring)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 904
            _la = self._input.LA(1)
            if not(_la==99 or _la==110):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbdeliverContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbbring(self):
            return self.getTypedRuleContext(gpsrParser.VbbringContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_vbdeliver

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVbdeliver" ):
                return visitor.visitVbdeliver(self)
            else:
                return visitor.visitChildren(self)




    def vbdeliver(self):

        localctx = gpsrParser.VbdeliverContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_vbdeliver)
        try:
            self.state = 908
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [99, 110]:
                self.enterOuterAlt(localctx, 1)
                self.state = 906
                self.vbbring()
                pass
            elif token in [97]:
                self.enterOuterAlt(localctx, 2)
                self.state = 907
                self.match(gpsrParser.T__96)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbtakeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_vbtake

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVbtake" ):
                return visitor.visitVbtake(self)
            else:
                return visitor.visitChildren(self)




    def vbtake(self):

        localctx = gpsrParser.VbtakeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_vbtake)
        try:
            self.state = 915
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [113]:
                self.enterOuterAlt(localctx, 1)
                self.state = 910
                self.match(gpsrParser.T__112)
                pass
            elif token in [114]:
                self.enterOuterAlt(localctx, 2)
                self.state = 911
                self.match(gpsrParser.T__113)
                pass
            elif token in [86]:
                self.enterOuterAlt(localctx, 3)
                self.state = 912
                self.match(gpsrParser.T__85)
                pass
            elif token in [115]:
                self.enterOuterAlt(localctx, 4)
                self.state = 913
                self.match(gpsrParser.T__114)
                self.state = 914
                self.match(gpsrParser.T__89)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbspeakContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_vbspeak

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVbspeak" ):
                return visitor.visitVbspeak(self)
            else:
                return visitor.visitChildren(self)




    def vbspeak(self):

        localctx = gpsrParser.VbspeakContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_vbspeak)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 917
            _la = self._input.LA(1)
            if not(_la==14 or _la==116):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbgoplContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_vbgopl

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVbgopl" ):
                return visitor.visitVbgopl(self)
            else:
                return visitor.visitChildren(self)




    def vbgopl(self):

        localctx = gpsrParser.VbgoplContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_vbgopl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 919
            _la = self._input.LA(1)
            if not(_la==117 or _la==118):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbgorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbgopl(self):
            return self.getTypedRuleContext(gpsrParser.VbgoplContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_vbgor

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVbgor" ):
                return visitor.visitVbgor(self)
            else:
                return visitor.visitChildren(self)




    def vbgor(self):

        localctx = gpsrParser.VbgorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_vbgor)
        try:
            self.state = 923
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [117, 118]:
                self.enterOuterAlt(localctx, 1)
                self.state = 921
                self.vbgopl()
                pass
            elif token in [119]:
                self.enterOuterAlt(localctx, 2)
                self.state = 922
                self.match(gpsrParser.T__118)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbfindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_vbfind

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVbfind" ):
                return visitor.visitVbfind(self)
            else:
                return visitor.visitChildren(self)




    def vbfind(self):

        localctx = gpsrParser.VbfindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_vbfind)
        try:
            self.state = 929
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [30]:
                self.enterOuterAlt(localctx, 1)
                self.state = 925
                self.match(gpsrParser.T__29)
                pass
            elif token in [120]:
                self.enterOuterAlt(localctx, 2)
                self.state = 926
                self.match(gpsrParser.T__119)
                pass
            elif token in [121]:
                self.enterOuterAlt(localctx, 3)
                self.state = 927
                self.match(gpsrParser.T__120)
                self.state = 928
                self.match(gpsrParser.T__121)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbguideContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_vbguide

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVbguide" ):
                return visitor.visitVbguide(self)
            else:
                return visitor.visitChildren(self)




    def vbguide(self):

        localctx = gpsrParser.VbguideContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_vbguide)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 931
            _la = self._input.LA(1)
            if not(((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 2061584302081) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbfollowContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_vbfollow

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVbfollow" ):
                return visitor.visitVbfollow(self)
            else:
                return visitor.visitChildren(self)




    def vbfollow(self):

        localctx = gpsrParser.VbfollowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_vbfollow)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 933
            self.match(gpsrParser.T__126)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PoliteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_polite

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPolite" ):
                return visitor.visitPolite(self)
            else:
                return visitor.visitChildren(self)




    def polite(self):

        localctx = gpsrParser.PoliteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_polite)
        try:
            self.state = 943
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 935
                self.match(gpsrParser.T__127)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 936
                self.match(gpsrParser.T__128)
                self.state = 937
                self.match(gpsrParser.T__30)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 938
                self.match(gpsrParser.T__129)
                self.state = 939
                self.match(gpsrParser.T__130)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 940
                self.match(gpsrParser.T__128)
                self.state = 941
                self.match(gpsrParser.T__30)
                self.state = 942
                self.match(gpsrParser.T__130)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





