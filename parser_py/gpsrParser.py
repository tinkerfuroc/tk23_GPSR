# Generated from gpsr.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,138,962,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,1,
        0,4,0,146,8,0,11,0,12,0,147,1,1,1,1,3,1,152,8,1,1,2,3,2,155,8,2,
        1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,168,8,3,1,4,1,4,
        1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,184,8,4,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,231,8,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,241,8,7,1,7,1,7,1,7,1,7,3,7,247,
        8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,289,8,7,1,8,1,8,1,9,1,9,
        1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,
        1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,
        1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,338,8,9,1,9,1,9,
        1,9,1,9,3,9,344,8,9,3,9,346,8,9,1,10,1,10,1,10,1,10,1,11,1,11,1,
        11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
        11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
        11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
        11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
        11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
        11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
        11,1,11,1,11,1,11,1,11,3,11,437,8,11,1,12,1,12,1,12,1,12,1,12,1,
        12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,452,8,12,1,12,1,12,3,
        12,456,8,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
        12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
        12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
        12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
        12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
        12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
        12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,541,8,12,1,13,1,13,1,
        13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,552,8,13,1,13,1,13,1,13,1,
        13,1,13,1,13,1,13,1,13,1,13,3,13,563,8,13,1,13,1,13,3,13,567,8,13,
        1,13,1,13,1,13,3,13,572,8,13,1,13,1,13,1,13,1,13,3,13,578,8,13,1,
        14,1,14,1,14,1,14,1,14,3,14,585,8,14,1,15,1,15,1,15,1,15,1,16,1,
        16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
        17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,612,8,17,1,17,1,17,1,17,3,
        17,617,8,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,628,
        8,17,1,17,1,17,3,17,632,8,17,1,18,1,18,1,18,1,18,1,18,1,18,1,19,
        1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,
        3,20,654,8,20,1,20,1,20,1,20,3,20,659,8,20,1,20,1,20,1,20,1,20,1,
        20,1,20,1,20,1,20,1,20,3,20,670,8,20,1,20,1,20,1,20,3,20,675,8,20,
        1,20,1,20,1,20,1,20,1,20,3,20,682,8,20,1,21,1,21,1,21,1,21,1,21,
        1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
        1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,711,8,21,1,21,
        1,21,1,21,3,21,716,8,21,1,21,1,21,1,21,1,21,3,21,722,8,21,1,22,1,
        22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
        23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
        23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
        23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
        23,1,23,3,23,779,8,23,1,24,1,24,1,24,1,24,3,24,785,8,24,1,25,1,25,
        1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,29,1,29,
        3,29,802,8,29,1,30,1,30,1,30,1,30,3,30,808,8,30,1,31,1,31,1,31,1,
        31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,824,8,
        31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,3,
        35,838,8,35,1,36,1,36,1,37,1,37,1,37,3,37,845,8,37,1,38,1,38,1,38,
        1,38,1,38,1,38,1,38,1,38,3,38,855,8,38,1,39,1,39,1,40,1,40,1,41,
        1,41,3,41,863,8,41,1,42,1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,44,
        1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,
        1,46,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,49,1,49,1,49,
        1,49,1,49,1,50,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,51,
        1,51,1,51,1,52,1,52,3,52,917,8,52,1,53,1,53,1,53,1,54,1,54,1,55,
        1,55,1,56,1,56,1,57,1,57,3,57,930,8,57,1,58,1,58,1,59,1,59,1,60,
        1,60,1,61,1,61,3,61,940,8,61,1,62,1,62,1,63,1,63,1,64,1,64,1,65,
        1,65,1,66,1,66,1,67,1,67,1,68,1,68,1,69,1,69,1,70,1,70,1,71,1,71,
        1,71,0,0,72,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,
        38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,
        82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,
        120,122,124,126,128,130,132,134,136,138,140,142,0,20,1,0,29,31,3,
        0,26,26,39,41,101,102,1,0,97,100,1,0,101,106,1,0,53,58,1,0,59,63,
        1,0,64,66,2,0,32,32,69,71,2,0,80,83,111,112,2,0,84,86,123,123,1,
        0,87,92,1,0,109,110,1,0,113,114,2,0,109,109,112,112,2,0,110,110,
        115,117,1,0,118,119,1,0,120,121,1,0,123,125,2,0,110,110,126,129,
        1,0,93,96,993,0,145,1,0,0,0,2,151,1,0,0,0,4,154,1,0,0,0,6,167,1,
        0,0,0,8,183,1,0,0,0,10,185,1,0,0,0,12,192,1,0,0,0,14,288,1,0,0,0,
        16,290,1,0,0,0,18,345,1,0,0,0,20,347,1,0,0,0,22,436,1,0,0,0,24,540,
        1,0,0,0,26,577,1,0,0,0,28,584,1,0,0,0,30,586,1,0,0,0,32,590,1,0,
        0,0,34,631,1,0,0,0,36,633,1,0,0,0,38,639,1,0,0,0,40,681,1,0,0,0,
        42,721,1,0,0,0,44,723,1,0,0,0,46,778,1,0,0,0,48,784,1,0,0,0,50,786,
        1,0,0,0,52,788,1,0,0,0,54,793,1,0,0,0,56,795,1,0,0,0,58,801,1,0,
        0,0,60,807,1,0,0,0,62,823,1,0,0,0,64,825,1,0,0,0,66,827,1,0,0,0,
        68,829,1,0,0,0,70,837,1,0,0,0,72,839,1,0,0,0,74,844,1,0,0,0,76,854,
        1,0,0,0,78,856,1,0,0,0,80,858,1,0,0,0,82,862,1,0,0,0,84,864,1,0,
        0,0,86,870,1,0,0,0,88,872,1,0,0,0,90,877,1,0,0,0,92,882,1,0,0,0,
        94,887,1,0,0,0,96,891,1,0,0,0,98,896,1,0,0,0,100,901,1,0,0,0,102,
        906,1,0,0,0,104,916,1,0,0,0,106,918,1,0,0,0,108,921,1,0,0,0,110,
        923,1,0,0,0,112,925,1,0,0,0,114,929,1,0,0,0,116,931,1,0,0,0,118,
        933,1,0,0,0,120,935,1,0,0,0,122,939,1,0,0,0,124,941,1,0,0,0,126,
        943,1,0,0,0,128,945,1,0,0,0,130,947,1,0,0,0,132,949,1,0,0,0,134,
        951,1,0,0,0,136,953,1,0,0,0,138,955,1,0,0,0,140,957,1,0,0,0,142,
        959,1,0,0,0,144,146,3,2,1,0,145,144,1,0,0,0,146,147,1,0,0,0,147,
        145,1,0,0,0,147,148,1,0,0,0,148,1,1,0,0,0,149,152,3,4,2,0,150,152,
        3,6,3,0,151,149,1,0,0,0,151,150,1,0,0,0,152,3,1,0,0,0,153,155,3,
        130,65,0,154,153,1,0,0,0,154,155,1,0,0,0,155,156,1,0,0,0,156,157,
        3,6,3,0,157,5,1,0,0,0,158,168,3,24,12,0,159,168,3,22,11,0,160,168,
        3,32,16,0,161,168,3,26,13,0,162,168,3,40,20,0,163,168,3,42,21,0,
        164,168,3,12,6,0,165,168,3,16,8,0,166,168,3,46,23,0,167,158,1,0,
        0,0,167,159,1,0,0,0,167,160,1,0,0,0,167,161,1,0,0,0,167,162,1,0,
        0,0,167,163,1,0,0,0,167,164,1,0,0,0,167,165,1,0,0,0,167,166,1,0,
        0,0,168,7,1,0,0,0,169,170,3,124,62,0,170,171,5,1,0,0,171,172,3,54,
        27,0,172,184,1,0,0,0,173,174,3,124,62,0,174,175,5,1,0,0,175,176,
        5,2,0,0,176,177,5,135,0,0,177,184,1,0,0,0,178,179,3,124,62,0,179,
        180,5,1,0,0,180,181,5,2,0,0,181,182,3,58,29,0,182,184,1,0,0,0,183,
        169,1,0,0,0,183,173,1,0,0,0,183,178,1,0,0,0,184,9,1,0,0,0,185,186,
        5,3,0,0,186,187,5,2,0,0,187,188,5,135,0,0,188,189,5,4,0,0,189,190,
        5,3,0,0,190,191,5,136,0,0,191,11,1,0,0,0,192,193,3,14,7,0,193,13,
        1,0,0,0,194,195,3,94,47,0,195,196,5,5,0,0,196,197,3,110,55,0,197,
        198,5,6,0,0,198,199,5,7,0,0,199,200,5,3,0,0,200,201,3,142,71,0,201,
        289,1,0,0,0,202,203,3,110,55,0,203,204,5,3,0,0,204,205,3,134,67,
        0,205,206,5,7,0,0,206,207,5,3,0,0,207,208,3,142,71,0,208,289,1,0,
        0,0,209,210,3,112,56,0,210,211,5,8,0,0,211,212,5,3,0,0,212,213,3,
        134,67,0,213,289,1,0,0,0,214,215,3,114,57,0,215,216,5,3,0,0,216,
        217,3,134,67,0,217,218,5,9,0,0,218,219,3,82,41,0,219,289,1,0,0,0,
        220,221,3,96,48,0,221,222,5,5,0,0,222,223,3,110,55,0,223,224,5,6,
        0,0,224,225,5,7,0,0,225,226,5,3,0,0,226,227,3,142,71,0,227,289,1,
        0,0,0,228,230,3,88,44,0,229,231,5,131,0,0,230,229,1,0,0,0,230,231,
        1,0,0,0,231,232,1,0,0,0,232,233,3,124,62,0,233,234,5,3,0,0,234,235,
        5,133,0,0,235,236,5,9,0,0,236,237,3,82,41,0,237,289,1,0,0,0,238,
        240,3,88,44,0,239,241,5,131,0,0,240,239,1,0,0,0,240,241,1,0,0,0,
        241,242,1,0,0,0,242,243,3,124,62,0,243,244,5,3,0,0,244,246,5,133,
        0,0,245,247,5,131,0,0,246,245,1,0,0,0,246,247,1,0,0,0,247,248,1,
        0,0,0,248,249,5,5,0,0,249,250,3,84,42,0,250,289,1,0,0,0,251,252,
        3,108,54,0,252,253,5,3,0,0,253,254,3,132,66,0,254,255,5,10,0,0,255,
        256,5,3,0,0,256,257,5,136,0,0,257,258,5,9,0,0,258,259,5,3,0,0,259,
        260,3,142,71,0,260,289,1,0,0,0,261,262,3,112,56,0,262,263,5,8,0,
        0,263,264,5,3,0,0,264,265,3,132,66,0,265,266,5,10,0,0,266,267,5,
        3,0,0,267,268,3,142,71,0,268,289,1,0,0,0,269,270,3,96,48,0,270,271,
        5,5,0,0,271,272,3,98,49,0,272,289,1,0,0,0,273,274,3,96,48,0,274,
        275,5,5,0,0,275,276,3,102,51,0,276,289,1,0,0,0,277,278,3,96,48,0,
        278,279,5,5,0,0,279,280,3,84,42,0,280,289,1,0,0,0,281,282,3,108,
        54,0,282,283,5,11,0,0,283,284,3,66,33,0,284,285,5,9,0,0,285,286,
        5,3,0,0,286,287,3,68,34,0,287,289,1,0,0,0,288,194,1,0,0,0,288,202,
        1,0,0,0,288,209,1,0,0,0,288,214,1,0,0,0,288,220,1,0,0,0,288,228,
        1,0,0,0,288,238,1,0,0,0,288,251,1,0,0,0,288,261,1,0,0,0,288,269,
        1,0,0,0,288,273,1,0,0,0,288,277,1,0,0,0,288,281,1,0,0,0,289,15,1,
        0,0,0,290,291,3,18,9,0,291,17,1,0,0,0,292,293,3,108,54,0,293,294,
        5,3,0,0,294,295,3,134,67,0,295,296,5,9,0,0,296,297,5,3,0,0,297,298,
        3,142,71,0,298,346,1,0,0,0,299,300,3,112,56,0,300,301,5,8,0,0,301,
        302,5,3,0,0,302,303,3,60,30,0,303,304,5,12,0,0,304,305,3,20,10,0,
        305,346,1,0,0,0,306,307,3,112,56,0,307,308,5,8,0,0,308,309,5,3,0,
        0,309,310,5,12,0,0,310,311,3,62,31,0,311,312,5,3,0,0,312,313,5,133,
        0,0,313,314,3,20,10,0,314,346,1,0,0,0,315,316,3,112,56,0,316,317,
        5,8,0,0,317,318,5,3,0,0,318,319,3,86,43,0,319,320,5,132,0,0,320,
        321,3,20,10,0,321,346,1,0,0,0,322,323,3,76,38,0,323,324,5,3,0,0,
        324,325,5,136,0,0,325,346,1,0,0,0,326,327,3,74,37,0,327,328,5,3,
        0,0,328,329,3,64,32,0,329,346,1,0,0,0,330,331,3,112,56,0,331,332,
        5,3,0,0,332,333,5,133,0,0,333,334,5,10,0,0,334,337,5,3,0,0,335,338,
        5,136,0,0,336,338,3,140,70,0,337,335,1,0,0,0,337,336,1,0,0,0,338,
        339,1,0,0,0,339,340,5,9,0,0,340,343,5,3,0,0,341,344,5,136,0,0,342,
        344,3,140,70,0,343,341,1,0,0,0,343,342,1,0,0,0,344,346,1,0,0,0,345,
        292,1,0,0,0,345,299,1,0,0,0,345,306,1,0,0,0,345,315,1,0,0,0,345,
        322,1,0,0,0,345,326,1,0,0,0,345,330,1,0,0,0,346,19,1,0,0,0,347,348,
        5,10,0,0,348,349,5,3,0,0,349,350,3,142,71,0,350,21,1,0,0,0,351,352,
        5,118,0,0,352,353,5,8,0,0,353,354,5,13,0,0,354,355,5,14,0,0,355,
        356,5,133,0,0,356,357,5,15,0,0,357,358,5,16,0,0,358,359,5,7,0,0,
        359,360,5,3,0,0,360,437,3,142,71,0,361,362,3,124,62,0,362,363,5,
        3,0,0,363,364,5,133,0,0,364,365,5,4,0,0,365,366,5,3,0,0,366,367,
        5,136,0,0,367,437,1,0,0,0,368,369,5,118,0,0,369,370,5,8,0,0,370,
        371,5,13,0,0,371,372,5,14,0,0,372,373,5,132,0,0,373,374,5,15,0,0,
        374,375,5,16,0,0,375,376,5,7,0,0,376,377,5,3,0,0,377,437,3,142,71,
        0,378,379,5,118,0,0,379,380,5,8,0,0,380,381,5,17,0,0,381,382,5,3,
        0,0,382,383,3,86,43,0,383,384,5,12,0,0,384,385,5,7,0,0,385,386,5,
        3,0,0,386,387,3,142,71,0,387,437,1,0,0,0,388,389,5,118,0,0,389,390,
        5,8,0,0,390,391,5,17,0,0,391,392,5,3,0,0,392,393,3,86,43,0,393,394,
        5,132,0,0,394,395,5,7,0,0,395,396,5,3,0,0,396,397,3,142,71,0,397,
        437,1,0,0,0,398,399,3,124,62,0,399,400,5,3,0,0,400,401,5,132,0,0,
        401,402,5,4,0,0,402,403,5,3,0,0,403,404,5,136,0,0,404,437,1,0,0,
        0,405,406,5,118,0,0,406,407,5,8,0,0,407,408,5,18,0,0,408,409,5,16,
        0,0,409,410,5,3,0,0,410,411,5,19,0,0,411,412,3,86,43,0,412,413,5,
        20,0,0,413,414,5,7,0,0,414,415,5,3,0,0,415,416,3,142,71,0,416,437,
        1,0,0,0,417,418,5,118,0,0,418,419,5,8,0,0,419,420,5,18,0,0,420,421,
        5,16,0,0,421,422,5,3,0,0,422,423,5,19,0,0,423,424,3,86,43,0,424,
        425,5,132,0,0,425,426,5,7,0,0,426,427,5,3,0,0,427,428,3,142,71,0,
        428,437,1,0,0,0,429,430,3,124,62,0,430,431,5,19,0,0,431,432,5,132,
        0,0,432,433,5,4,0,0,433,434,5,3,0,0,434,435,5,136,0,0,435,437,1,
        0,0,0,436,351,1,0,0,0,436,361,1,0,0,0,436,368,1,0,0,0,436,378,1,
        0,0,0,436,388,1,0,0,0,436,398,1,0,0,0,436,405,1,0,0,0,436,417,1,
        0,0,0,436,429,1,0,0,0,437,23,1,0,0,0,438,439,3,104,52,0,439,440,
        5,9,0,0,440,441,3,10,5,0,441,541,1,0,0,0,442,443,3,8,4,0,443,444,
        5,4,0,0,444,445,5,3,0,0,445,446,5,136,0,0,446,447,5,5,0,0,447,448,
        3,104,52,0,448,541,1,0,0,0,449,451,3,92,46,0,450,452,5,131,0,0,451,
        450,1,0,0,0,451,452,1,0,0,0,452,453,1,0,0,0,453,455,3,8,4,0,454,
        456,5,131,0,0,455,454,1,0,0,0,455,456,1,0,0,0,456,457,1,0,0,0,457,
        458,5,5,0,0,458,459,3,104,52,0,459,541,1,0,0,0,460,461,5,118,0,0,
        461,462,5,8,0,0,462,463,5,3,0,0,463,464,5,21,0,0,464,465,5,22,0,
        0,465,466,5,3,0,0,466,467,5,2,0,0,467,468,5,23,0,0,468,469,5,3,0,
        0,469,541,3,140,70,0,470,471,5,118,0,0,471,472,5,8,0,0,472,473,5,
        3,0,0,473,474,5,24,0,0,474,475,5,22,0,0,475,476,5,3,0,0,476,477,
        5,2,0,0,477,478,5,23,0,0,478,479,5,3,0,0,479,541,3,140,70,0,480,
        481,5,118,0,0,481,482,5,8,0,0,482,483,5,3,0,0,483,484,5,25,0,0,484,
        485,5,22,0,0,485,486,5,3,0,0,486,487,5,2,0,0,487,488,5,23,0,0,488,
        489,5,3,0,0,489,541,3,140,70,0,490,491,5,118,0,0,491,492,5,8,0,0,
        492,493,5,3,0,0,493,494,5,21,0,0,494,495,5,22,0,0,495,496,5,3,0,
        0,496,497,5,2,0,0,497,498,5,4,0,0,498,499,5,3,0,0,499,541,5,136,
        0,0,500,501,5,118,0,0,501,502,5,8,0,0,502,503,5,3,0,0,503,504,5,
        24,0,0,504,505,5,22,0,0,505,506,5,3,0,0,506,507,5,2,0,0,507,508,
        5,4,0,0,508,509,5,3,0,0,509,541,5,136,0,0,510,511,5,118,0,0,511,
        512,5,8,0,0,512,513,5,3,0,0,513,514,5,25,0,0,514,515,5,22,0,0,515,
        516,5,3,0,0,516,517,5,2,0,0,517,518,5,4,0,0,518,519,5,3,0,0,519,
        541,5,136,0,0,520,521,5,118,0,0,521,522,5,8,0,0,522,523,5,13,0,0,
        523,524,5,14,0,0,524,525,5,26,0,0,525,526,5,4,0,0,526,527,5,3,0,
        0,527,528,5,136,0,0,528,529,5,16,0,0,529,541,3,56,28,0,530,531,5,
        118,0,0,531,532,5,8,0,0,532,533,5,13,0,0,533,534,5,14,0,0,534,535,
        5,26,0,0,535,536,5,4,0,0,536,537,5,3,0,0,537,538,5,136,0,0,538,539,
        5,16,0,0,539,541,3,58,29,0,540,438,1,0,0,0,540,442,1,0,0,0,540,449,
        1,0,0,0,540,460,1,0,0,0,540,470,1,0,0,0,540,480,1,0,0,0,540,490,
        1,0,0,0,540,500,1,0,0,0,540,510,1,0,0,0,540,520,1,0,0,0,540,530,
        1,0,0,0,541,25,1,0,0,0,542,543,3,128,64,0,543,551,5,138,0,0,544,
        545,5,10,0,0,545,546,5,3,0,0,546,547,3,140,70,0,547,548,5,9,0,0,
        548,549,5,3,0,0,549,550,5,136,0,0,550,552,1,0,0,0,551,544,1,0,0,
        0,551,552,1,0,0,0,552,578,1,0,0,0,553,554,5,27,0,0,554,555,5,138,
        0,0,555,556,5,23,0,0,556,557,5,3,0,0,557,558,3,140,70,0,558,559,
        5,5,0,0,559,560,3,128,64,0,560,562,5,134,0,0,561,563,3,30,15,0,562,
        561,1,0,0,0,562,563,1,0,0,0,563,578,1,0,0,0,564,566,3,90,45,0,565,
        567,5,131,0,0,566,565,1,0,0,0,566,567,1,0,0,0,567,568,1,0,0,0,568,
        569,5,27,0,0,569,571,5,138,0,0,570,572,5,131,0,0,571,570,1,0,0,0,
        571,572,1,0,0,0,572,573,1,0,0,0,573,574,5,5,0,0,574,575,3,128,64,
        0,575,576,5,134,0,0,576,578,1,0,0,0,577,542,1,0,0,0,577,553,1,0,
        0,0,577,564,1,0,0,0,578,27,1,0,0,0,579,580,5,27,0,0,580,585,5,138,
        0,0,581,582,5,123,0,0,582,583,5,1,0,0,583,585,5,2,0,0,584,579,1,
        0,0,0,584,581,1,0,0,0,585,29,1,0,0,0,586,587,5,9,0,0,587,588,5,3,
        0,0,588,589,5,136,0,0,589,31,1,0,0,0,590,591,3,34,17,0,591,33,1,
        0,0,0,592,593,3,126,63,0,593,594,5,138,0,0,594,595,5,10,0,0,595,
        596,5,3,0,0,596,597,3,140,70,0,597,598,5,9,0,0,598,599,5,3,0,0,599,
        600,3,140,70,0,600,632,1,0,0,0,601,602,5,27,0,0,602,603,5,138,0,
        0,603,604,5,23,0,0,604,605,5,3,0,0,605,606,3,140,70,0,606,607,5,
        5,0,0,607,608,3,36,18,0,608,632,1,0,0,0,609,611,3,90,45,0,610,612,
        5,131,0,0,611,610,1,0,0,0,611,612,1,0,0,0,612,613,1,0,0,0,613,614,
        5,27,0,0,614,616,5,138,0,0,615,617,5,131,0,0,616,615,1,0,0,0,616,
        617,1,0,0,0,617,618,1,0,0,0,618,619,5,5,0,0,619,620,3,36,18,0,620,
        632,1,0,0,0,621,622,3,126,63,0,622,623,5,138,0,0,623,624,5,9,0,0,
        624,625,5,3,0,0,625,627,3,140,70,0,626,628,5,131,0,0,627,626,1,0,
        0,0,627,628,1,0,0,0,628,629,1,0,0,0,629,630,3,38,19,0,630,632,1,
        0,0,0,631,592,1,0,0,0,631,601,1,0,0,0,631,609,1,0,0,0,631,621,1,
        0,0,0,632,35,1,0,0,0,633,634,3,126,63,0,634,635,5,134,0,0,635,636,
        5,9,0,0,636,637,5,3,0,0,637,638,3,140,70,0,638,37,1,0,0,0,639,640,
        5,28,0,0,640,641,7,0,0,0,641,642,5,123,0,0,642,643,5,134,0,0,643,
        644,5,23,0,0,644,645,5,3,0,0,645,646,3,140,70,0,646,39,1,0,0,0,647,
        648,5,27,0,0,648,649,5,138,0,0,649,650,5,23,0,0,650,651,5,3,0,0,
        651,653,3,140,70,0,652,654,5,131,0,0,653,652,1,0,0,0,653,654,1,0,
        0,0,654,655,1,0,0,0,655,656,3,128,64,0,656,658,5,134,0,0,657,659,
        5,131,0,0,658,657,1,0,0,0,658,659,1,0,0,0,659,660,1,0,0,0,660,661,
        5,5,0,0,661,662,3,92,46,0,662,682,1,0,0,0,663,664,5,27,0,0,664,665,
        5,138,0,0,665,666,5,23,0,0,666,667,5,3,0,0,667,669,3,140,70,0,668,
        670,5,131,0,0,669,668,1,0,0,0,669,670,1,0,0,0,670,671,1,0,0,0,671,
        672,3,128,64,0,672,674,5,134,0,0,673,675,5,131,0,0,674,673,1,0,0,
        0,674,675,1,0,0,0,675,676,1,0,0,0,676,677,5,5,0,0,677,678,3,126,
        63,0,678,679,5,134,0,0,679,680,5,32,0,0,680,682,1,0,0,0,681,647,
        1,0,0,0,681,663,1,0,0,0,682,41,1,0,0,0,683,684,3,128,64,0,684,685,
        5,138,0,0,685,722,1,0,0,0,686,687,3,112,56,0,687,688,5,8,0,0,688,
        689,5,3,0,0,689,690,3,138,69,0,690,722,1,0,0,0,691,692,3,114,57,
        0,692,693,3,138,69,0,693,694,5,9,0,0,694,695,3,82,41,0,695,722,1,
        0,0,0,696,697,3,126,63,0,697,698,5,138,0,0,698,699,5,9,0,0,699,700,
        5,3,0,0,700,701,3,140,70,0,701,722,1,0,0,0,702,703,5,27,0,0,703,
        704,3,44,22,0,704,705,5,5,0,0,705,706,3,126,63,0,706,707,5,134,0,
        0,707,722,1,0,0,0,708,710,3,90,45,0,709,711,5,131,0,0,710,709,1,
        0,0,0,710,711,1,0,0,0,711,712,1,0,0,0,712,713,5,27,0,0,713,715,3,
        44,22,0,714,716,5,131,0,0,715,714,1,0,0,0,715,716,1,0,0,0,716,717,
        1,0,0,0,717,718,5,5,0,0,718,719,3,126,63,0,719,720,5,134,0,0,720,
        722,1,0,0,0,721,683,1,0,0,0,721,686,1,0,0,0,721,691,1,0,0,0,721,
        696,1,0,0,0,721,702,1,0,0,0,721,708,1,0,0,0,722,43,1,0,0,0,723,724,
        5,138,0,0,724,45,1,0,0,0,725,726,3,78,39,0,726,727,5,33,0,0,727,
        728,5,9,0,0,728,729,3,52,26,0,729,779,1,0,0,0,730,731,3,80,40,0,
        731,732,5,138,0,0,732,733,5,23,0,0,733,734,5,3,0,0,734,735,3,70,
        35,0,735,736,5,5,0,0,736,737,5,34,0,0,737,738,5,134,0,0,738,739,
        5,9,0,0,739,740,3,52,26,0,740,779,1,0,0,0,741,742,3,80,40,0,742,
        743,5,138,0,0,743,744,5,23,0,0,744,745,5,3,0,0,745,746,3,140,70,
        0,746,747,5,5,0,0,747,748,5,35,0,0,748,749,5,134,0,0,749,750,5,9,
        0,0,750,751,5,36,0,0,751,779,1,0,0,0,752,753,3,80,40,0,753,754,5,
        138,0,0,754,755,5,23,0,0,755,756,5,3,0,0,756,757,3,140,70,0,757,
        758,5,5,0,0,758,759,5,34,0,0,759,760,5,134,0,0,760,761,5,9,0,0,761,
        762,5,138,0,0,762,763,5,23,0,0,763,764,5,3,0,0,764,765,3,140,70,
        0,765,779,1,0,0,0,766,767,3,80,40,0,767,768,5,138,0,0,768,769,5,
        23,0,0,769,770,5,3,0,0,770,771,3,140,70,0,771,772,5,5,0,0,772,773,
        3,126,63,0,773,774,5,134,0,0,774,775,5,9,0,0,775,776,5,134,0,0,776,
        777,3,68,34,0,777,779,1,0,0,0,778,725,1,0,0,0,778,730,1,0,0,0,778,
        741,1,0,0,0,778,752,1,0,0,0,778,766,1,0,0,0,779,47,1,0,0,0,780,785,
        5,37,0,0,781,782,5,38,0,0,782,783,5,3,0,0,783,785,3,50,25,0,784,
        780,1,0,0,0,784,781,1,0,0,0,785,49,1,0,0,0,786,787,7,1,0,0,787,51,
        1,0,0,0,788,789,3,48,24,0,789,790,5,4,0,0,790,791,5,3,0,0,791,792,
        5,136,0,0,792,53,1,0,0,0,793,794,7,2,0,0,794,55,1,0,0,0,795,796,
        7,3,0,0,796,57,1,0,0,0,797,802,5,42,0,0,798,802,5,43,0,0,799,800,
        5,44,0,0,800,802,5,45,0,0,801,797,1,0,0,0,801,798,1,0,0,0,801,799,
        1,0,0,0,802,59,1,0,0,0,803,804,5,46,0,0,804,808,5,47,0,0,805,806,
        5,48,0,0,806,808,5,47,0,0,807,803,1,0,0,0,807,805,1,0,0,0,808,61,
        1,0,0,0,809,810,5,23,0,0,810,811,5,3,0,0,811,812,5,46,0,0,812,824,
        5,22,0,0,813,814,5,23,0,0,814,815,5,3,0,0,815,816,5,48,0,0,816,824,
        5,22,0,0,817,818,5,7,0,0,818,819,5,49,0,0,819,824,5,22,0,0,820,824,
        5,50,0,0,821,824,5,51,0,0,822,824,5,52,0,0,823,809,1,0,0,0,823,813,
        1,0,0,0,823,817,1,0,0,0,823,820,1,0,0,0,823,821,1,0,0,0,823,822,
        1,0,0,0,824,63,1,0,0,0,825,826,7,4,0,0,826,65,1,0,0,0,827,828,7,
        5,0,0,828,67,1,0,0,0,829,830,7,6,0,0,830,69,1,0,0,0,831,832,3,72,
        36,0,832,833,5,67,0,0,833,838,1,0,0,0,834,835,3,72,36,0,835,836,
        5,68,0,0,836,838,1,0,0,0,837,831,1,0,0,0,837,834,1,0,0,0,838,71,
        1,0,0,0,839,840,7,7,0,0,840,73,1,0,0,0,841,842,5,110,0,0,842,845,
        5,72,0,0,843,845,5,73,0,0,844,841,1,0,0,0,844,843,1,0,0,0,845,75,
        1,0,0,0,846,847,5,74,0,0,847,855,5,72,0,0,848,849,5,74,0,0,849,855,
        5,75,0,0,850,851,5,76,0,0,851,855,5,77,0,0,852,855,5,78,0,0,853,
        855,5,79,0,0,854,846,1,0,0,0,854,848,1,0,0,0,854,850,1,0,0,0,854,
        852,1,0,0,0,854,853,1,0,0,0,855,77,1,0,0,0,856,857,7,8,0,0,857,79,
        1,0,0,0,858,859,7,9,0,0,859,81,1,0,0,0,860,863,5,8,0,0,861,863,3,
        10,5,0,862,860,1,0,0,0,862,861,1,0,0,0,863,83,1,0,0,0,864,865,3,
        110,55,0,865,866,5,6,0,0,866,867,5,7,0,0,867,868,5,3,0,0,868,869,
        3,142,71,0,869,85,1,0,0,0,870,871,7,10,0,0,871,87,1,0,0,0,872,873,
        3,120,60,0,873,874,5,9,0,0,874,875,5,3,0,0,875,876,3,142,71,0,876,
        89,1,0,0,0,877,878,3,120,60,0,878,879,5,9,0,0,879,880,5,3,0,0,880,
        881,3,140,70,0,881,91,1,0,0,0,882,883,3,120,60,0,883,884,5,9,0,0,
        884,885,5,3,0,0,885,886,5,136,0,0,886,93,1,0,0,0,887,888,3,116,58,
        0,888,889,5,3,0,0,889,890,5,133,0,0,890,95,1,0,0,0,891,892,3,94,
        47,0,892,893,5,10,0,0,893,894,5,3,0,0,894,895,3,142,71,0,895,97,
        1,0,0,0,896,897,3,114,57,0,897,898,5,6,0,0,898,899,5,9,0,0,899,900,
        5,8,0,0,900,99,1,0,0,0,901,902,3,114,57,0,902,903,5,6,0,0,903,904,
        5,9,0,0,904,905,5,138,0,0,905,101,1,0,0,0,906,907,3,114,57,0,907,
        908,5,6,0,0,908,909,5,9,0,0,909,910,5,138,0,0,910,911,5,23,0,0,911,
        912,5,3,0,0,912,913,3,140,70,0,913,103,1,0,0,0,914,917,5,107,0,0,
        915,917,3,106,53,0,916,914,1,0,0,0,916,915,1,0,0,0,917,105,1,0,0,
        0,918,919,3,118,59,0,919,920,5,108,0,0,920,107,1,0,0,0,921,922,7,
        11,0,0,922,109,1,0,0,0,923,924,7,12,0,0,924,111,1,0,0,0,925,926,
        7,13,0,0,926,113,1,0,0,0,927,930,3,112,56,0,928,930,5,111,0,0,929,
        927,1,0,0,0,929,928,1,0,0,0,930,115,1,0,0,0,931,932,7,14,0,0,932,
        117,1,0,0,0,933,934,7,15,0,0,934,119,1,0,0,0,935,936,7,16,0,0,936,
        121,1,0,0,0,937,940,3,120,60,0,938,940,5,122,0,0,939,937,1,0,0,0,
        939,938,1,0,0,0,940,123,1,0,0,0,941,942,7,17,0,0,942,125,1,0,0,0,
        943,944,7,18,0,0,944,127,1,0,0,0,945,946,5,130,0,0,946,129,1,0,0,
        0,947,948,7,19,0,0,948,131,1,0,0,0,949,950,5,133,0,0,950,133,1,0,
        0,0,951,952,5,133,0,0,952,135,1,0,0,0,953,954,5,132,0,0,954,137,
        1,0,0,0,955,956,5,132,0,0,956,139,1,0,0,0,957,958,5,137,0,0,958,
        141,1,0,0,0,959,960,5,137,0,0,960,143,1,0,0,0,46,147,151,154,167,
        183,230,240,246,288,337,343,345,436,451,455,540,551,562,566,571,
        577,584,611,616,627,631,653,658,669,674,681,710,715,721,778,784,
        801,807,823,837,844,854,862,916,929,939
    ]

class gpsrParser ( Parser ):

    grammarFileName = "gpsr.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'a'", "'person'", "'the'", "'in'", "'and'", 
                     "'it'", "'on'", "'me'", "'to'", "'from'", "'my'", "'object'", 
                     "'how'", "'many'", "'there'", "'are'", "'what's'", 
                     "'which'", "'three'", "'objects'", "'name'", "'of'", 
                     "'at'", "'gender'", "'pose'", "'people'", "'meet'", 
                     "'you'", "'may'", "'can'", "'will'", "'back'", "'drinks'", 
                     "'introduce'", "'ask'", "'leave'", "'everyone'", "'all'", 
                     "'guests'", "'elders'", "'children'", "'sitting'", 
                     "'standing'", "'lying'", "'down'", "'left'", "'most'", 
                     "'right'", "'top'", "'above'", "'behind'", "'under'", 
                     "'litter'", "'garbage'", "'trash'", "'waste'", "'debris'", 
                     "'junk'", "'bag'", "'baggage'", "'valise'", "'suitcase'", 
                     "'trolley'", "'taxi'", "'cab'", "'uber'", "'entrance'", 
                     "'door'", "'front'", "'main'", "'rear'", "'out'", "'dump'", 
                     "'clean'", "'up'", "'tidy'", "'op'", "'neaten'", "'order'", 
                     "'serve'", "'arrange'", "'distribute'", "'provide'", 
                     "'contact'", "'face'", "'greet'", "'biggest'", "'largest'", 
                     "'smallest'", "'heaviest'", "'lightest'", "'thinnest'", 
                     "'please'", "'could you'", "'robot please'", "'could you please'", 
                     "'man'", "'woman'", "'boy'", "'girl'", "'men'", "'women'", 
                     "'boys'", "'girls'", "'male'", "'female'", "<INVALID>", 
                     "<INVALID>", "'bring'", "'take'", "'deliver'", "'give'", 
                     "'put'", "'place'", "'get'", "'grasp'", "'pick up'", 
                     "'tell'", "'say'", "'go'", "'navigate'", "'enter'", 
                     "'find'", "'locate'", "'look_for'", "'guide'", "'escort'", 
                     "'lead'", "'accompany'", "'follow'", "','" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "MAN", "WOMAN", "BOY", "GIRL", "MEN", 
                      "WOMEN", "BOYS", "GIRLS", "MALE", "FEMALE", "Answer", 
                      "Whattosay", "BRING", "TAKE", "DELIVER", "GIVE", "PUT", 
                      "PLACE", "GET", "GRASP", "PICK_UP", "TELL", "SAY", 
                      "GO", "NAVIGATE", "ENTER", "FIND", "LOCATE", "LOOK_FOR", 
                      "GUIDE", "ESCORT", "LEAD", "ACCOMPANY", "FOLLOW", 
                      "Comma", "Category", "Object", "Pron", "Gesture", 
                      "Room", "Location_except_room", "Name" ]

    RULE_instruction = 0
    RULE_mainSentence = 1
    RULE_pmain = 2
    RULE_main = 3
    RULE_findp = 4
    RULE_whoWhere = 5
    RULE_man = 6
    RULE_deliver = 7
    RULE_complexman = 8
    RULE_cmancmd = 9
    RULE_cmanobjsrc = 10
    RULE_fndobj = 11
    RULE_fndppl = 12
    RULE_follow = 13
    RULE_fllmeet = 14
    RULE_fllwdest = 15
    RULE_guide = 16
    RULE_gdcmd = 17
    RULE_guideto = 18
    RULE_gdwhere = 19
    RULE_followout = 20
    RULE_incomplete = 21
    RULE_inguidewho = 22
    RULE_partyhost = 23
    RULE_phpeople = 24
    RULE_peopletype = 25
    RULE_phpeopler = 26
    RULE_pgenders = 27
    RULE_pgenderp = 28
    RULE_pose = 29
    RULE_abspos = 30
    RULE_relpos = 31
    RULE_garbage = 32
    RULE_luggage = 33
    RULE_taxi = 34
    RULE_door = 35
    RULE_doorpos = 36
    RULE_vbtakeout = 37
    RULE_vbcleanup = 38
    RULE_vbserve = 39
    RULE_vbmeet = 40
    RULE_someone = 41
    RULE_place = 42
    RULE_oprop = 43
    RULE_goplace = 44
    RULE_gobeacon = 45
    RULE_goroom = 46
    RULE_take = 47
    RULE_takefrom = 48
    RULE_delivme = 49
    RULE_delivto = 50
    RULE_delivat = 51
    RULE_talk = 52
    RULE_speak = 53
    RULE_vbbtake = 54
    RULE_vbplace = 55
    RULE_vbbring = 56
    RULE_vbdeliver = 57
    RULE_vbtake = 58
    RULE_vbspeak = 59
    RULE_vbgopl = 60
    RULE_vbgor = 61
    RULE_vbfind = 62
    RULE_vbguide = 63
    RULE_vbfollow = 64
    RULE_polite = 65
    RULE_object_alike = 66
    RULE_object_known = 67
    RULE_object_alike_obfuscated = 68
    RULE_object_obfuscated = 69
    RULE_beacon = 70
    RULE_placement = 71

    ruleNames =  [ "instruction", "mainSentence", "pmain", "main", "findp", 
                   "whoWhere", "man", "deliver", "complexman", "cmancmd", 
                   "cmanobjsrc", "fndobj", "fndppl", "follow", "fllmeet", 
                   "fllwdest", "guide", "gdcmd", "guideto", "gdwhere", "followout", 
                   "incomplete", "inguidewho", "partyhost", "phpeople", 
                   "peopletype", "phpeopler", "pgenders", "pgenderp", "pose", 
                   "abspos", "relpos", "garbage", "luggage", "taxi", "door", 
                   "doorpos", "vbtakeout", "vbcleanup", "vbserve", "vbmeet", 
                   "someone", "place", "oprop", "goplace", "gobeacon", "goroom", 
                   "take", "takefrom", "delivme", "delivto", "delivat", 
                   "talk", "speak", "vbbtake", "vbplace", "vbbring", "vbdeliver", 
                   "vbtake", "vbspeak", "vbgopl", "vbgor", "vbfind", "vbguide", 
                   "vbfollow", "polite", "object_alike", "object_known", 
                   "object_alike_obfuscated", "object_obfuscated", "beacon", 
                   "placement" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    T__73=74
    T__74=75
    T__75=76
    T__76=77
    T__77=78
    T__78=79
    T__79=80
    T__80=81
    T__81=82
    T__82=83
    T__83=84
    T__84=85
    T__85=86
    T__86=87
    T__87=88
    T__88=89
    T__89=90
    T__90=91
    T__91=92
    T__92=93
    T__93=94
    T__94=95
    T__95=96
    MAN=97
    WOMAN=98
    BOY=99
    GIRL=100
    MEN=101
    WOMEN=102
    BOYS=103
    GIRLS=104
    MALE=105
    FEMALE=106
    Answer=107
    Whattosay=108
    BRING=109
    TAKE=110
    DELIVER=111
    GIVE=112
    PUT=113
    PLACE=114
    GET=115
    GRASP=116
    PICK_UP=117
    TELL=118
    SAY=119
    GO=120
    NAVIGATE=121
    ENTER=122
    FIND=123
    LOCATE=124
    LOOK_FOR=125
    GUIDE=126
    ESCORT=127
    LEAD=128
    ACCOMPANY=129
    FOLLOW=130
    Comma=131
    Category=132
    Object=133
    Pron=134
    Gesture=135
    Room=136
    Location_except_room=137
    Name=138

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class InstructionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mainSentence(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(gpsrParser.MainSentenceContext)
            else:
                return self.getTypedRuleContext(gpsrParser.MainSentenceContext,i)


        def getRuleIndex(self):
            return gpsrParser.RULE_instruction

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInstruction" ):
                return visitor.visitInstruction(self)
            else:
                return visitor.visitChildren(self)




    def instruction(self):

        localctx = gpsrParser.InstructionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_instruction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 145 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 144
                self.mainSentence()
                self.state = 147 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==27 or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & 287667374674427883) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MainSentenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pmain(self):
            return self.getTypedRuleContext(gpsrParser.PmainContext,0)


        def main(self):
            return self.getTypedRuleContext(gpsrParser.MainContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_mainSentence

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMainSentence" ):
                return visitor.visitMainSentence(self)
            else:
                return visitor.visitChildren(self)




    def mainSentence(self):

        localctx = gpsrParser.MainSentenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_mainSentence)
        try:
            self.state = 151
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 149
                self.pmain()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 150
                self.main()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PmainContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def main(self):
            return self.getTypedRuleContext(gpsrParser.MainContext,0)


        def polite(self):
            return self.getTypedRuleContext(gpsrParser.PoliteContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_pmain

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPmain" ):
                return visitor.visitPmain(self)
            else:
                return visitor.visitChildren(self)




    def pmain(self):

        localctx = gpsrParser.PmainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_pmain)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 154
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 15) != 0):
                self.state = 153
                self.polite()


            self.state = 156
            self.main()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MainContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fndppl(self):
            return self.getTypedRuleContext(gpsrParser.FndpplContext,0)


        def fndobj(self):
            return self.getTypedRuleContext(gpsrParser.FndobjContext,0)


        def guide(self):
            return self.getTypedRuleContext(gpsrParser.GuideContext,0)


        def follow(self):
            return self.getTypedRuleContext(gpsrParser.FollowContext,0)


        def followout(self):
            return self.getTypedRuleContext(gpsrParser.FollowoutContext,0)


        def incomplete(self):
            return self.getTypedRuleContext(gpsrParser.IncompleteContext,0)


        def man(self):
            return self.getTypedRuleContext(gpsrParser.ManContext,0)


        def complexman(self):
            return self.getTypedRuleContext(gpsrParser.ComplexmanContext,0)


        def partyhost(self):
            return self.getTypedRuleContext(gpsrParser.PartyhostContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_main

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMain" ):
                return visitor.visitMain(self)
            else:
                return visitor.visitChildren(self)




    def main(self):

        localctx = gpsrParser.MainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_main)
        try:
            self.state = 167
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 158
                self.fndppl()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 159
                self.fndobj()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 160
                self.guide()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 161
                self.follow()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 162
                self.followout()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 163
                self.incomplete()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 164
                self.man()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 165
                self.complexman()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 166
                self.partyhost()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FindpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_findp

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Find_genderContext(FindpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FindpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def vbfind(self):
            return self.getTypedRuleContext(gpsrParser.VbfindContext,0)

        def pgenders(self):
            return self.getTypedRuleContext(gpsrParser.PgendersContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFind_gender" ):
                return visitor.visitFind_gender(self)
            else:
                return visitor.visitChildren(self)


    class Find_gestureContext(FindpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FindpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def vbfind(self):
            return self.getTypedRuleContext(gpsrParser.VbfindContext,0)

        def Gesture(self):
            return self.getToken(gpsrParser.Gesture, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFind_gesture" ):
                return visitor.visitFind_gesture(self)
            else:
                return visitor.visitChildren(self)


    class Find_poseContext(FindpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FindpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def vbfind(self):
            return self.getTypedRuleContext(gpsrParser.VbfindContext,0)

        def pose(self):
            return self.getTypedRuleContext(gpsrParser.PoseContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFind_pose" ):
                return visitor.visitFind_pose(self)
            else:
                return visitor.visitChildren(self)



    def findp(self):

        localctx = gpsrParser.FindpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_findp)
        try:
            self.state = 183
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                localctx = gpsrParser.Find_genderContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 169
                self.vbfind()
                self.state = 170
                self.match(gpsrParser.T__0)
                self.state = 171
                self.pgenders()
                pass

            elif la_ == 2:
                localctx = gpsrParser.Find_gestureContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 173
                self.vbfind()
                self.state = 174
                self.match(gpsrParser.T__0)
                self.state = 175
                self.match(gpsrParser.T__1)
                self.state = 176
                self.match(gpsrParser.Gesture)
                pass

            elif la_ == 3:
                localctx = gpsrParser.Find_poseContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 178
                self.vbfind()
                self.state = 179
                self.match(gpsrParser.T__0)
                self.state = 180
                self.match(gpsrParser.T__1)
                self.state = 181
                self.pose()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhoWhereContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Gesture(self):
            return self.getToken(gpsrParser.Gesture, 0)

        def Room(self):
            return self.getToken(gpsrParser.Room, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_whoWhere

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhoWhere" ):
                return visitor.visitWhoWhere(self)
            else:
                return visitor.visitChildren(self)




    def whoWhere(self):

        localctx = gpsrParser.WhoWhereContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_whoWhere)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 185
            self.match(gpsrParser.T__2)
            self.state = 186
            self.match(gpsrParser.T__1)
            self.state = 187
            self.match(gpsrParser.Gesture)
            self.state = 188
            self.match(gpsrParser.T__3)
            self.state = 189
            self.match(gpsrParser.T__2)
            self.state = 190
            self.match(gpsrParser.Room)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ManContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def deliver(self):
            return self.getTypedRuleContext(gpsrParser.DeliverContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_man

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMan" ):
                return visitor.visitMan(self)
            else:
                return visitor.visitChildren(self)




    def man(self):

        localctx = gpsrParser.ManContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_man)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 192
            self.deliver()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeliverContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def take(self):
            return self.getTypedRuleContext(gpsrParser.TakeContext,0)


        def vbplace(self):
            return self.getTypedRuleContext(gpsrParser.VbplaceContext,0)


        def placement(self):
            return self.getTypedRuleContext(gpsrParser.PlacementContext,0)


        def object_known(self):
            return self.getTypedRuleContext(gpsrParser.Object_knownContext,0)


        def vbbring(self):
            return self.getTypedRuleContext(gpsrParser.VbbringContext,0)


        def vbdeliver(self):
            return self.getTypedRuleContext(gpsrParser.VbdeliverContext,0)


        def someone(self):
            return self.getTypedRuleContext(gpsrParser.SomeoneContext,0)


        def takefrom(self):
            return self.getTypedRuleContext(gpsrParser.TakefromContext,0)


        def goplace(self):
            return self.getTypedRuleContext(gpsrParser.GoplaceContext,0)


        def vbfind(self):
            return self.getTypedRuleContext(gpsrParser.VbfindContext,0)


        def Object(self):
            return self.getToken(gpsrParser.Object, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(gpsrParser.Comma)
            else:
                return self.getToken(gpsrParser.Comma, i)

        def place(self):
            return self.getTypedRuleContext(gpsrParser.PlaceContext,0)


        def vbbtake(self):
            return self.getTypedRuleContext(gpsrParser.VbbtakeContext,0)


        def object_alike(self):
            return self.getTypedRuleContext(gpsrParser.Object_alikeContext,0)


        def Room(self):
            return self.getToken(gpsrParser.Room, 0)

        def delivme(self):
            return self.getTypedRuleContext(gpsrParser.DelivmeContext,0)


        def delivat(self):
            return self.getTypedRuleContext(gpsrParser.DelivatContext,0)


        def luggage(self):
            return self.getTypedRuleContext(gpsrParser.LuggageContext,0)


        def taxi(self):
            return self.getTypedRuleContext(gpsrParser.TaxiContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_deliver

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeliver" ):
                return visitor.visitDeliver(self)
            else:
                return visitor.visitChildren(self)




    def deliver(self):

        localctx = gpsrParser.DeliverContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_deliver)
        self._la = 0 # Token type
        try:
            self.state = 288
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 194
                self.take()
                self.state = 195
                self.match(gpsrParser.T__4)
                self.state = 196
                self.vbplace()
                self.state = 197
                self.match(gpsrParser.T__5)
                self.state = 198
                self.match(gpsrParser.T__6)
                self.state = 199
                self.match(gpsrParser.T__2)
                self.state = 200
                self.placement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 202
                self.vbplace()
                self.state = 203
                self.match(gpsrParser.T__2)
                self.state = 204
                self.object_known()
                self.state = 205
                self.match(gpsrParser.T__6)
                self.state = 206
                self.match(gpsrParser.T__2)
                self.state = 207
                self.placement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 209
                self.vbbring()
                self.state = 210
                self.match(gpsrParser.T__7)
                self.state = 211
                self.match(gpsrParser.T__2)
                self.state = 212
                self.object_known()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 214
                self.vbdeliver()
                self.state = 215
                self.match(gpsrParser.T__2)
                self.state = 216
                self.object_known()
                self.state = 217
                self.match(gpsrParser.T__8)
                self.state = 218
                self.someone()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 220
                self.takefrom()
                self.state = 221
                self.match(gpsrParser.T__4)
                self.state = 222
                self.vbplace()
                self.state = 223
                self.match(gpsrParser.T__5)
                self.state = 224
                self.match(gpsrParser.T__6)
                self.state = 225
                self.match(gpsrParser.T__2)
                self.state = 226
                self.placement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 228
                self.goplace()
                self.state = 230
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==131:
                    self.state = 229
                    self.match(gpsrParser.Comma)


                self.state = 232
                self.vbfind()
                self.state = 233
                self.match(gpsrParser.T__2)
                self.state = 234
                self.match(gpsrParser.Object)
                self.state = 235
                self.match(gpsrParser.T__8)
                self.state = 236
                self.someone()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 238
                self.goplace()
                self.state = 240
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==131:
                    self.state = 239
                    self.match(gpsrParser.Comma)


                self.state = 242
                self.vbfind()
                self.state = 243
                self.match(gpsrParser.T__2)
                self.state = 244
                self.match(gpsrParser.Object)
                self.state = 246
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==131:
                    self.state = 245
                    self.match(gpsrParser.Comma)


                self.state = 248
                self.match(gpsrParser.T__4)
                self.state = 249
                self.place()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 251
                self.vbbtake()
                self.state = 252
                self.match(gpsrParser.T__2)
                self.state = 253
                self.object_alike()
                self.state = 254
                self.match(gpsrParser.T__9)
                self.state = 255
                self.match(gpsrParser.T__2)
                self.state = 256
                self.match(gpsrParser.Room)
                self.state = 257
                self.match(gpsrParser.T__8)
                self.state = 258
                self.match(gpsrParser.T__2)
                self.state = 259
                self.placement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 261
                self.vbbring()
                self.state = 262
                self.match(gpsrParser.T__7)
                self.state = 263
                self.match(gpsrParser.T__2)
                self.state = 264
                self.object_alike()
                self.state = 265
                self.match(gpsrParser.T__9)
                self.state = 266
                self.match(gpsrParser.T__2)
                self.state = 267
                self.placement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 269
                self.takefrom()
                self.state = 270
                self.match(gpsrParser.T__4)
                self.state = 271
                self.delivme()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 273
                self.takefrom()
                self.state = 274
                self.match(gpsrParser.T__4)
                self.state = 275
                self.delivat()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 277
                self.takefrom()
                self.state = 278
                self.match(gpsrParser.T__4)
                self.state = 279
                self.place()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 281
                self.vbbtake()
                self.state = 282
                self.match(gpsrParser.T__10)
                self.state = 283
                self.luggage()
                self.state = 284
                self.match(gpsrParser.T__8)
                self.state = 285
                self.match(gpsrParser.T__2)
                self.state = 286
                self.taxi()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComplexmanContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cmancmd(self):
            return self.getTypedRuleContext(gpsrParser.CmancmdContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_complexman

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComplexman" ):
                return visitor.visitComplexman(self)
            else:
                return visitor.visitChildren(self)




    def complexman(self):

        localctx = gpsrParser.ComplexmanContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_complexman)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 290
            self.cmancmd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CmancmdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbbtake(self):
            return self.getTypedRuleContext(gpsrParser.VbbtakeContext,0)


        def object_known(self):
            return self.getTypedRuleContext(gpsrParser.Object_knownContext,0)


        def placement(self):
            return self.getTypedRuleContext(gpsrParser.PlacementContext,0)


        def vbbring(self):
            return self.getTypedRuleContext(gpsrParser.VbbringContext,0)


        def abspos(self):
            return self.getTypedRuleContext(gpsrParser.AbsposContext,0)


        def cmanobjsrc(self):
            return self.getTypedRuleContext(gpsrParser.CmanobjsrcContext,0)


        def relpos(self):
            return self.getTypedRuleContext(gpsrParser.RelposContext,0)


        def Object(self):
            return self.getToken(gpsrParser.Object, 0)

        def oprop(self):
            return self.getTypedRuleContext(gpsrParser.OpropContext,0)


        def Category(self):
            return self.getToken(gpsrParser.Category, 0)

        def vbcleanup(self):
            return self.getTypedRuleContext(gpsrParser.VbcleanupContext,0)


        def Room(self, i:int=None):
            if i is None:
                return self.getTokens(gpsrParser.Room)
            else:
                return self.getToken(gpsrParser.Room, i)

        def vbtakeout(self):
            return self.getTypedRuleContext(gpsrParser.VbtakeoutContext,0)


        def garbage(self):
            return self.getTypedRuleContext(gpsrParser.GarbageContext,0)


        def beacon(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(gpsrParser.BeaconContext)
            else:
                return self.getTypedRuleContext(gpsrParser.BeaconContext,i)


        def getRuleIndex(self):
            return gpsrParser.RULE_cmancmd

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCmancmd" ):
                return visitor.visitCmancmd(self)
            else:
                return visitor.visitChildren(self)




    def cmancmd(self):

        localctx = gpsrParser.CmancmdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_cmancmd)
        try:
            self.state = 345
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 292
                self.vbbtake()
                self.state = 293
                self.match(gpsrParser.T__2)
                self.state = 294
                self.object_known()
                self.state = 295
                self.match(gpsrParser.T__8)
                self.state = 296
                self.match(gpsrParser.T__2)
                self.state = 297
                self.placement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 299
                self.vbbring()
                self.state = 300
                self.match(gpsrParser.T__7)
                self.state = 301
                self.match(gpsrParser.T__2)
                self.state = 302
                self.abspos()
                self.state = 303
                self.match(gpsrParser.T__11)
                self.state = 304
                self.cmanobjsrc()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 306
                self.vbbring()
                self.state = 307
                self.match(gpsrParser.T__7)
                self.state = 308
                self.match(gpsrParser.T__2)
                self.state = 309
                self.match(gpsrParser.T__11)
                self.state = 310
                self.relpos()
                self.state = 311
                self.match(gpsrParser.T__2)
                self.state = 312
                self.match(gpsrParser.Object)
                self.state = 313
                self.cmanobjsrc()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 315
                self.vbbring()
                self.state = 316
                self.match(gpsrParser.T__7)
                self.state = 317
                self.match(gpsrParser.T__2)
                self.state = 318
                self.oprop()
                self.state = 319
                self.match(gpsrParser.Category)
                self.state = 320
                self.cmanobjsrc()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 322
                self.vbcleanup()
                self.state = 323
                self.match(gpsrParser.T__2)
                self.state = 324
                self.match(gpsrParser.Room)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 326
                self.vbtakeout()
                self.state = 327
                self.match(gpsrParser.T__2)
                self.state = 328
                self.garbage()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 330
                self.vbbring()
                self.state = 331
                self.match(gpsrParser.T__2)
                self.state = 332
                self.match(gpsrParser.Object)
                self.state = 333
                self.match(gpsrParser.T__9)
                self.state = 334
                self.match(gpsrParser.T__2)
                self.state = 337
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [136]:
                    self.state = 335
                    self.match(gpsrParser.Room)
                    pass
                elif token in [137]:
                    self.state = 336
                    self.beacon()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 339
                self.match(gpsrParser.T__8)
                self.state = 340
                self.match(gpsrParser.T__2)
                self.state = 343
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [136]:
                    self.state = 341
                    self.match(gpsrParser.Room)
                    pass
                elif token in [137]:
                    self.state = 342
                    self.beacon()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CmanobjsrcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def placement(self):
            return self.getTypedRuleContext(gpsrParser.PlacementContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_cmanobjsrc

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCmanobjsrc" ):
                return visitor.visitCmanobjsrc(self)
            else:
                return visitor.visitChildren(self)




    def cmanobjsrc(self):

        localctx = gpsrParser.CmanobjsrcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_cmanobjsrc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 347
            self.match(gpsrParser.T__9)
            self.state = 348
            self.match(gpsrParser.T__2)
            self.state = 349
            self.placement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FndobjContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TELL(self):
            return self.getToken(gpsrParser.TELL, 0)

        def Object(self):
            return self.getToken(gpsrParser.Object, 0)

        def placement(self):
            return self.getTypedRuleContext(gpsrParser.PlacementContext,0)


        def vbfind(self):
            return self.getTypedRuleContext(gpsrParser.VbfindContext,0)


        def Room(self):
            return self.getToken(gpsrParser.Room, 0)

        def Category(self):
            return self.getToken(gpsrParser.Category, 0)

        def oprop(self):
            return self.getTypedRuleContext(gpsrParser.OpropContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_fndobj

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFndobj" ):
                return visitor.visitFndobj(self)
            else:
                return visitor.visitChildren(self)




    def fndobj(self):

        localctx = gpsrParser.FndobjContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_fndobj)
        try:
            self.state = 436
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 351
                self.match(gpsrParser.TELL)
                self.state = 352
                self.match(gpsrParser.T__7)
                self.state = 353
                self.match(gpsrParser.T__12)
                self.state = 354
                self.match(gpsrParser.T__13)
                self.state = 355
                self.match(gpsrParser.Object)
                self.state = 356
                self.match(gpsrParser.T__14)
                self.state = 357
                self.match(gpsrParser.T__15)
                self.state = 358
                self.match(gpsrParser.T__6)
                self.state = 359
                self.match(gpsrParser.T__2)
                self.state = 360
                self.placement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 361
                self.vbfind()
                self.state = 362
                self.match(gpsrParser.T__2)
                self.state = 363
                self.match(gpsrParser.Object)
                self.state = 364
                self.match(gpsrParser.T__3)
                self.state = 365
                self.match(gpsrParser.T__2)
                self.state = 366
                self.match(gpsrParser.Room)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 368
                self.match(gpsrParser.TELL)
                self.state = 369
                self.match(gpsrParser.T__7)
                self.state = 370
                self.match(gpsrParser.T__12)
                self.state = 371
                self.match(gpsrParser.T__13)
                self.state = 372
                self.match(gpsrParser.Category)
                self.state = 373
                self.match(gpsrParser.T__14)
                self.state = 374
                self.match(gpsrParser.T__15)
                self.state = 375
                self.match(gpsrParser.T__6)
                self.state = 376
                self.match(gpsrParser.T__2)
                self.state = 377
                self.placement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 378
                self.match(gpsrParser.TELL)
                self.state = 379
                self.match(gpsrParser.T__7)
                self.state = 380
                self.match(gpsrParser.T__16)
                self.state = 381
                self.match(gpsrParser.T__2)
                self.state = 382
                self.oprop()
                self.state = 383
                self.match(gpsrParser.T__11)
                self.state = 384
                self.match(gpsrParser.T__6)
                self.state = 385
                self.match(gpsrParser.T__2)
                self.state = 386
                self.placement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 388
                self.match(gpsrParser.TELL)
                self.state = 389
                self.match(gpsrParser.T__7)
                self.state = 390
                self.match(gpsrParser.T__16)
                self.state = 391
                self.match(gpsrParser.T__2)
                self.state = 392
                self.oprop()
                self.state = 393
                self.match(gpsrParser.Category)
                self.state = 394
                self.match(gpsrParser.T__6)
                self.state = 395
                self.match(gpsrParser.T__2)
                self.state = 396
                self.placement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 398
                self.vbfind()
                self.state = 399
                self.match(gpsrParser.T__2)
                self.state = 400
                self.match(gpsrParser.Category)
                self.state = 401
                self.match(gpsrParser.T__3)
                self.state = 402
                self.match(gpsrParser.T__2)
                self.state = 403
                self.match(gpsrParser.Room)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 405
                self.match(gpsrParser.TELL)
                self.state = 406
                self.match(gpsrParser.T__7)
                self.state = 407
                self.match(gpsrParser.T__17)
                self.state = 408
                self.match(gpsrParser.T__15)
                self.state = 409
                self.match(gpsrParser.T__2)
                self.state = 410
                self.match(gpsrParser.T__18)
                self.state = 411
                self.oprop()
                self.state = 412
                self.match(gpsrParser.T__19)
                self.state = 413
                self.match(gpsrParser.T__6)
                self.state = 414
                self.match(gpsrParser.T__2)
                self.state = 415
                self.placement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 417
                self.match(gpsrParser.TELL)
                self.state = 418
                self.match(gpsrParser.T__7)
                self.state = 419
                self.match(gpsrParser.T__17)
                self.state = 420
                self.match(gpsrParser.T__15)
                self.state = 421
                self.match(gpsrParser.T__2)
                self.state = 422
                self.match(gpsrParser.T__18)
                self.state = 423
                self.oprop()
                self.state = 424
                self.match(gpsrParser.Category)
                self.state = 425
                self.match(gpsrParser.T__6)
                self.state = 426
                self.match(gpsrParser.T__2)
                self.state = 427
                self.placement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 429
                self.vbfind()
                self.state = 430
                self.match(gpsrParser.T__18)
                self.state = 431
                self.match(gpsrParser.Category)
                self.state = 432
                self.match(gpsrParser.T__3)
                self.state = 433
                self.match(gpsrParser.T__2)
                self.state = 434
                self.match(gpsrParser.Room)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FndpplContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_fndppl

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Tell_gender_numberContext(FndpplContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FndpplContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TELL(self):
            return self.getToken(gpsrParser.TELL, 0)
        def Room(self):
            return self.getToken(gpsrParser.Room, 0)
        def pgenderp(self):
            return self.getTypedRuleContext(gpsrParser.PgenderpContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTell_gender_number" ):
                return visitor.visitTell_gender_number(self)
            else:
                return visitor.visitChildren(self)


    class Tell_name_beaconContext(FndpplContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FndpplContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TELL(self):
            return self.getToken(gpsrParser.TELL, 0)
        def beacon(self):
            return self.getTypedRuleContext(gpsrParser.BeaconContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTell_name_beacon" ):
                return visitor.visitTell_name_beacon(self)
            else:
                return visitor.visitChildren(self)


    class Tell_gender_beaconContext(FndpplContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FndpplContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TELL(self):
            return self.getToken(gpsrParser.TELL, 0)
        def beacon(self):
            return self.getTypedRuleContext(gpsrParser.BeaconContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTell_gender_beacon" ):
                return visitor.visitTell_gender_beacon(self)
            else:
                return visitor.visitChildren(self)


    class Tell_pose_roomContext(FndpplContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FndpplContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TELL(self):
            return self.getToken(gpsrParser.TELL, 0)
        def Room(self):
            return self.getToken(gpsrParser.Room, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTell_pose_room" ):
                return visitor.visitTell_pose_room(self)
            else:
                return visitor.visitChildren(self)


    class Find_talk_in_roomContext(FndpplContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FndpplContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def findp(self):
            return self.getTypedRuleContext(gpsrParser.FindpContext,0)

        def Room(self):
            return self.getToken(gpsrParser.Room, 0)
        def talk(self):
            return self.getTypedRuleContext(gpsrParser.TalkContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFind_talk_in_room" ):
                return visitor.visitFind_talk_in_room(self)
            else:
                return visitor.visitChildren(self)


    class Tell_pose_beaconContext(FndpplContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FndpplContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TELL(self):
            return self.getToken(gpsrParser.TELL, 0)
        def beacon(self):
            return self.getTypedRuleContext(gpsrParser.BeaconContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTell_pose_beacon" ):
                return visitor.visitTell_pose_beacon(self)
            else:
                return visitor.visitChildren(self)


    class Tell_name_roomContext(FndpplContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FndpplContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TELL(self):
            return self.getToken(gpsrParser.TELL, 0)
        def Room(self):
            return self.getToken(gpsrParser.Room, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTell_name_room" ):
                return visitor.visitTell_name_room(self)
            else:
                return visitor.visitChildren(self)


    class Tell_pose_numberContext(FndpplContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FndpplContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TELL(self):
            return self.getToken(gpsrParser.TELL, 0)
        def Room(self):
            return self.getToken(gpsrParser.Room, 0)
        def pose(self):
            return self.getTypedRuleContext(gpsrParser.PoseContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTell_pose_number" ):
                return visitor.visitTell_pose_number(self)
            else:
                return visitor.visitChildren(self)


    class Talk_to_whowhereContext(FndpplContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FndpplContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def talk(self):
            return self.getTypedRuleContext(gpsrParser.TalkContext,0)

        def whoWhere(self):
            return self.getTypedRuleContext(gpsrParser.WhoWhereContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTalk_to_whowhere" ):
                return visitor.visitTalk_to_whowhere(self)
            else:
                return visitor.visitChildren(self)


    class Go_room_talkContext(FndpplContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FndpplContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def goroom(self):
            return self.getTypedRuleContext(gpsrParser.GoroomContext,0)

        def findp(self):
            return self.getTypedRuleContext(gpsrParser.FindpContext,0)

        def talk(self):
            return self.getTypedRuleContext(gpsrParser.TalkContext,0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(gpsrParser.Comma)
            else:
                return self.getToken(gpsrParser.Comma, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGo_room_talk" ):
                return visitor.visitGo_room_talk(self)
            else:
                return visitor.visitChildren(self)


    class Tell_gender_roomContext(FndpplContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FndpplContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TELL(self):
            return self.getToken(gpsrParser.TELL, 0)
        def Room(self):
            return self.getToken(gpsrParser.Room, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTell_gender_room" ):
                return visitor.visitTell_gender_room(self)
            else:
                return visitor.visitChildren(self)



    def fndppl(self):

        localctx = gpsrParser.FndpplContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_fndppl)
        self._la = 0 # Token type
        try:
            self.state = 540
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                localctx = gpsrParser.Talk_to_whowhereContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 438
                self.talk()
                self.state = 439
                self.match(gpsrParser.T__8)
                self.state = 440
                self.whoWhere()
                pass

            elif la_ == 2:
                localctx = gpsrParser.Find_talk_in_roomContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 442
                self.findp()
                self.state = 443
                self.match(gpsrParser.T__3)
                self.state = 444
                self.match(gpsrParser.T__2)
                self.state = 445
                self.match(gpsrParser.Room)
                self.state = 446
                self.match(gpsrParser.T__4)
                self.state = 447
                self.talk()
                pass

            elif la_ == 3:
                localctx = gpsrParser.Go_room_talkContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 449
                self.goroom()
                self.state = 451
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==131:
                    self.state = 450
                    self.match(gpsrParser.Comma)


                self.state = 453
                self.findp()
                self.state = 455
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==131:
                    self.state = 454
                    self.match(gpsrParser.Comma)


                self.state = 457
                self.match(gpsrParser.T__4)
                self.state = 458
                self.talk()
                pass

            elif la_ == 4:
                localctx = gpsrParser.Tell_name_beaconContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 460
                self.match(gpsrParser.TELL)
                self.state = 461
                self.match(gpsrParser.T__7)
                self.state = 462
                self.match(gpsrParser.T__2)
                self.state = 463
                self.match(gpsrParser.T__20)
                self.state = 464
                self.match(gpsrParser.T__21)
                self.state = 465
                self.match(gpsrParser.T__2)
                self.state = 466
                self.match(gpsrParser.T__1)
                self.state = 467
                self.match(gpsrParser.T__22)
                self.state = 468
                self.match(gpsrParser.T__2)
                self.state = 469
                self.beacon()
                pass

            elif la_ == 5:
                localctx = gpsrParser.Tell_gender_beaconContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 470
                self.match(gpsrParser.TELL)
                self.state = 471
                self.match(gpsrParser.T__7)
                self.state = 472
                self.match(gpsrParser.T__2)
                self.state = 473
                self.match(gpsrParser.T__23)
                self.state = 474
                self.match(gpsrParser.T__21)
                self.state = 475
                self.match(gpsrParser.T__2)
                self.state = 476
                self.match(gpsrParser.T__1)
                self.state = 477
                self.match(gpsrParser.T__22)
                self.state = 478
                self.match(gpsrParser.T__2)
                self.state = 479
                self.beacon()
                pass

            elif la_ == 6:
                localctx = gpsrParser.Tell_pose_beaconContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 480
                self.match(gpsrParser.TELL)
                self.state = 481
                self.match(gpsrParser.T__7)
                self.state = 482
                self.match(gpsrParser.T__2)
                self.state = 483
                self.match(gpsrParser.T__24)
                self.state = 484
                self.match(gpsrParser.T__21)
                self.state = 485
                self.match(gpsrParser.T__2)
                self.state = 486
                self.match(gpsrParser.T__1)
                self.state = 487
                self.match(gpsrParser.T__22)
                self.state = 488
                self.match(gpsrParser.T__2)
                self.state = 489
                self.beacon()
                pass

            elif la_ == 7:
                localctx = gpsrParser.Tell_name_roomContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 490
                self.match(gpsrParser.TELL)
                self.state = 491
                self.match(gpsrParser.T__7)
                self.state = 492
                self.match(gpsrParser.T__2)
                self.state = 493
                self.match(gpsrParser.T__20)
                self.state = 494
                self.match(gpsrParser.T__21)
                self.state = 495
                self.match(gpsrParser.T__2)
                self.state = 496
                self.match(gpsrParser.T__1)
                self.state = 497
                self.match(gpsrParser.T__3)
                self.state = 498
                self.match(gpsrParser.T__2)
                self.state = 499
                self.match(gpsrParser.Room)
                pass

            elif la_ == 8:
                localctx = gpsrParser.Tell_gender_roomContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 500
                self.match(gpsrParser.TELL)
                self.state = 501
                self.match(gpsrParser.T__7)
                self.state = 502
                self.match(gpsrParser.T__2)
                self.state = 503
                self.match(gpsrParser.T__23)
                self.state = 504
                self.match(gpsrParser.T__21)
                self.state = 505
                self.match(gpsrParser.T__2)
                self.state = 506
                self.match(gpsrParser.T__1)
                self.state = 507
                self.match(gpsrParser.T__3)
                self.state = 508
                self.match(gpsrParser.T__2)
                self.state = 509
                self.match(gpsrParser.Room)
                pass

            elif la_ == 9:
                localctx = gpsrParser.Tell_pose_roomContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 510
                self.match(gpsrParser.TELL)
                self.state = 511
                self.match(gpsrParser.T__7)
                self.state = 512
                self.match(gpsrParser.T__2)
                self.state = 513
                self.match(gpsrParser.T__24)
                self.state = 514
                self.match(gpsrParser.T__21)
                self.state = 515
                self.match(gpsrParser.T__2)
                self.state = 516
                self.match(gpsrParser.T__1)
                self.state = 517
                self.match(gpsrParser.T__3)
                self.state = 518
                self.match(gpsrParser.T__2)
                self.state = 519
                self.match(gpsrParser.Room)
                pass

            elif la_ == 10:
                localctx = gpsrParser.Tell_gender_numberContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 520
                self.match(gpsrParser.TELL)
                self.state = 521
                self.match(gpsrParser.T__7)
                self.state = 522
                self.match(gpsrParser.T__12)
                self.state = 523
                self.match(gpsrParser.T__13)
                self.state = 524
                self.match(gpsrParser.T__25)
                self.state = 525
                self.match(gpsrParser.T__3)
                self.state = 526
                self.match(gpsrParser.T__2)
                self.state = 527
                self.match(gpsrParser.Room)
                self.state = 528
                self.match(gpsrParser.T__15)
                self.state = 529
                self.pgenderp()
                pass

            elif la_ == 11:
                localctx = gpsrParser.Tell_pose_numberContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 530
                self.match(gpsrParser.TELL)
                self.state = 531
                self.match(gpsrParser.T__7)
                self.state = 532
                self.match(gpsrParser.T__12)
                self.state = 533
                self.match(gpsrParser.T__13)
                self.state = 534
                self.match(gpsrParser.T__25)
                self.state = 535
                self.match(gpsrParser.T__3)
                self.state = 536
                self.match(gpsrParser.T__2)
                self.state = 537
                self.match(gpsrParser.Room)
                self.state = 538
                self.match(gpsrParser.T__15)
                self.state = 539
                self.pose()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FollowContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_follow

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class From_beacon_to_whereContext(FollowContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FollowContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def gobeacon(self):
            return self.getTypedRuleContext(gpsrParser.GobeaconContext,0)

        def Name(self):
            return self.getToken(gpsrParser.Name, 0)
        def vbfollow(self):
            return self.getTypedRuleContext(gpsrParser.VbfollowContext,0)

        def Pron(self):
            return self.getToken(gpsrParser.Pron, 0)
        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(gpsrParser.Comma)
            else:
                return self.getToken(gpsrParser.Comma, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrom_beacon_to_where" ):
                return visitor.visitFrom_beacon_to_where(self)
            else:
                return visitor.visitChildren(self)


    class From_beacon_to_roomContext(FollowContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FollowContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def vbfollow(self):
            return self.getTypedRuleContext(gpsrParser.VbfollowContext,0)

        def Name(self):
            return self.getToken(gpsrParser.Name, 0)
        def beacon(self):
            return self.getTypedRuleContext(gpsrParser.BeaconContext,0)

        def Room(self):
            return self.getToken(gpsrParser.Room, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrom_beacon_to_room" ):
                return visitor.visitFrom_beacon_to_room(self)
            else:
                return visitor.visitChildren(self)


    class From_beacon_to_room_indirectContext(FollowContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FollowContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Name(self):
            return self.getToken(gpsrParser.Name, 0)
        def beacon(self):
            return self.getTypedRuleContext(gpsrParser.BeaconContext,0)

        def vbfollow(self):
            return self.getTypedRuleContext(gpsrParser.VbfollowContext,0)

        def Pron(self):
            return self.getToken(gpsrParser.Pron, 0)
        def fllwdest(self):
            return self.getTypedRuleContext(gpsrParser.FllwdestContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrom_beacon_to_room_indirect" ):
                return visitor.visitFrom_beacon_to_room_indirect(self)
            else:
                return visitor.visitChildren(self)



    def follow(self):

        localctx = gpsrParser.FollowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_follow)
        self._la = 0 # Token type
        try:
            self.state = 577
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [130]:
                localctx = gpsrParser.From_beacon_to_roomContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 542
                self.vbfollow()
                self.state = 543
                self.match(gpsrParser.Name)
                self.state = 551
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 544
                    self.match(gpsrParser.T__9)
                    self.state = 545
                    self.match(gpsrParser.T__2)
                    self.state = 546
                    self.beacon()
                    self.state = 547
                    self.match(gpsrParser.T__8)
                    self.state = 548
                    self.match(gpsrParser.T__2)
                    self.state = 549
                    self.match(gpsrParser.Room)


                pass
            elif token in [27]:
                localctx = gpsrParser.From_beacon_to_room_indirectContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 553
                self.match(gpsrParser.T__26)
                self.state = 554
                self.match(gpsrParser.Name)
                self.state = 555
                self.match(gpsrParser.T__22)
                self.state = 556
                self.match(gpsrParser.T__2)
                self.state = 557
                self.beacon()
                self.state = 558
                self.match(gpsrParser.T__4)
                self.state = 559
                self.vbfollow()
                self.state = 560
                self.match(gpsrParser.Pron)
                self.state = 562
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==9:
                    self.state = 561
                    self.fllwdest()


                pass
            elif token in [120, 121]:
                localctx = gpsrParser.From_beacon_to_whereContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 564
                self.gobeacon()
                self.state = 566
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==131:
                    self.state = 565
                    self.match(gpsrParser.Comma)


                self.state = 568
                self.match(gpsrParser.T__26)
                self.state = 569
                self.match(gpsrParser.Name)
                self.state = 571
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==131:
                    self.state = 570
                    self.match(gpsrParser.Comma)


                self.state = 573
                self.match(gpsrParser.T__4)
                self.state = 574
                self.vbfollow()
                self.state = 575
                self.match(gpsrParser.Pron)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FllmeetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Name(self):
            return self.getToken(gpsrParser.Name, 0)

        def FIND(self):
            return self.getToken(gpsrParser.FIND, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_fllmeet

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFllmeet" ):
                return visitor.visitFllmeet(self)
            else:
                return visitor.visitChildren(self)




    def fllmeet(self):

        localctx = gpsrParser.FllmeetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_fllmeet)
        try:
            self.state = 584
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [27]:
                self.enterOuterAlt(localctx, 1)
                self.state = 579
                self.match(gpsrParser.T__26)
                self.state = 580
                self.match(gpsrParser.Name)
                pass
            elif token in [123]:
                self.enterOuterAlt(localctx, 2)
                self.state = 581
                self.match(gpsrParser.FIND)
                self.state = 582
                self.match(gpsrParser.T__0)
                self.state = 583
                self.match(gpsrParser.T__1)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FllwdestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Room(self):
            return self.getToken(gpsrParser.Room, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_fllwdest

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFllwdest" ):
                return visitor.visitFllwdest(self)
            else:
                return visitor.visitChildren(self)




    def fllwdest(self):

        localctx = gpsrParser.FllwdestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_fllwdest)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 586
            self.match(gpsrParser.T__8)
            self.state = 587
            self.match(gpsrParser.T__2)
            self.state = 588
            self.match(gpsrParser.Room)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GuideContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def gdcmd(self):
            return self.getTypedRuleContext(gpsrParser.GdcmdContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_guide

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGuide" ):
                return visitor.visitGuide(self)
            else:
                return visitor.visitChildren(self)




    def guide(self):

        localctx = gpsrParser.GuideContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_guide)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 590
            self.gdcmd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GdcmdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_gdcmd

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Beacon_to_beacon_gobeacon_guidetoContext(GdcmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.GdcmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def gobeacon(self):
            return self.getTypedRuleContext(gpsrParser.GobeaconContext,0)

        def Name(self):
            return self.getToken(gpsrParser.Name, 0)
        def guideto(self):
            return self.getTypedRuleContext(gpsrParser.GuidetoContext,0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(gpsrParser.Comma)
            else:
                return self.getToken(gpsrParser.Comma, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBeacon_to_beacon_gobeacon_guideto" ):
                return visitor.visitBeacon_to_beacon_gobeacon_guideto(self)
            else:
                return visitor.visitChildren(self)


    class Beacon_to_beaconContext(GdcmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.GdcmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def vbguide(self):
            return self.getTypedRuleContext(gpsrParser.VbguideContext,0)

        def Name(self):
            return self.getToken(gpsrParser.Name, 0)
        def beacon(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(gpsrParser.BeaconContext)
            else:
                return self.getTypedRuleContext(gpsrParser.BeaconContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBeacon_to_beacon" ):
                return visitor.visitBeacon_to_beacon(self)
            else:
                return visitor.visitChildren(self)


    class Beacon_to_beacon_guide_toContext(GdcmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.GdcmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Name(self):
            return self.getToken(gpsrParser.Name, 0)
        def beacon(self):
            return self.getTypedRuleContext(gpsrParser.BeaconContext,0)

        def guideto(self):
            return self.getTypedRuleContext(gpsrParser.GuidetoContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBeacon_to_beacon_guide_to" ):
                return visitor.visitBeacon_to_beacon_guide_to(self)
            else:
                return visitor.visitChildren(self)


    class Beacon_to_beacon_gdwhereContext(GdcmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.GdcmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def vbguide(self):
            return self.getTypedRuleContext(gpsrParser.VbguideContext,0)

        def Name(self):
            return self.getToken(gpsrParser.Name, 0)
        def beacon(self):
            return self.getTypedRuleContext(gpsrParser.BeaconContext,0)

        def gdwhere(self):
            return self.getTypedRuleContext(gpsrParser.GdwhereContext,0)

        def Comma(self):
            return self.getToken(gpsrParser.Comma, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBeacon_to_beacon_gdwhere" ):
                return visitor.visitBeacon_to_beacon_gdwhere(self)
            else:
                return visitor.visitChildren(self)



    def gdcmd(self):

        localctx = gpsrParser.GdcmdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_gdcmd)
        self._la = 0 # Token type
        try:
            self.state = 631
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                localctx = gpsrParser.Beacon_to_beaconContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 592
                self.vbguide()
                self.state = 593
                self.match(gpsrParser.Name)
                self.state = 594
                self.match(gpsrParser.T__9)
                self.state = 595
                self.match(gpsrParser.T__2)
                self.state = 596
                self.beacon()
                self.state = 597
                self.match(gpsrParser.T__8)
                self.state = 598
                self.match(gpsrParser.T__2)
                self.state = 599
                self.beacon()
                pass

            elif la_ == 2:
                localctx = gpsrParser.Beacon_to_beacon_guide_toContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 601
                self.match(gpsrParser.T__26)
                self.state = 602
                self.match(gpsrParser.Name)
                self.state = 603
                self.match(gpsrParser.T__22)
                self.state = 604
                self.match(gpsrParser.T__2)
                self.state = 605
                self.beacon()
                self.state = 606
                self.match(gpsrParser.T__4)
                self.state = 607
                self.guideto()
                pass

            elif la_ == 3:
                localctx = gpsrParser.Beacon_to_beacon_gobeacon_guidetoContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 609
                self.gobeacon()
                self.state = 611
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==131:
                    self.state = 610
                    self.match(gpsrParser.Comma)


                self.state = 613
                self.match(gpsrParser.T__26)
                self.state = 614
                self.match(gpsrParser.Name)
                self.state = 616
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==131:
                    self.state = 615
                    self.match(gpsrParser.Comma)


                self.state = 618
                self.match(gpsrParser.T__4)
                self.state = 619
                self.guideto()
                pass

            elif la_ == 4:
                localctx = gpsrParser.Beacon_to_beacon_gdwhereContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 621
                self.vbguide()
                self.state = 622
                self.match(gpsrParser.Name)
                self.state = 623
                self.match(gpsrParser.T__8)
                self.state = 624
                self.match(gpsrParser.T__2)
                self.state = 625
                self.beacon()
                self.state = 627
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==131:
                    self.state = 626
                    self.match(gpsrParser.Comma)


                self.state = 629
                self.gdwhere()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GuidetoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbguide(self):
            return self.getTypedRuleContext(gpsrParser.VbguideContext,0)


        def Pron(self):
            return self.getToken(gpsrParser.Pron, 0)

        def beacon(self):
            return self.getTypedRuleContext(gpsrParser.BeaconContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_guideto

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGuideto" ):
                return visitor.visitGuideto(self)
            else:
                return visitor.visitChildren(self)




    def guideto(self):

        localctx = gpsrParser.GuidetoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_guideto)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 633
            self.vbguide()
            self.state = 634
            self.match(gpsrParser.Pron)
            self.state = 635
            self.match(gpsrParser.T__8)
            self.state = 636
            self.match(gpsrParser.T__2)
            self.state = 637
            self.beacon()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GdwhereContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FIND(self):
            return self.getToken(gpsrParser.FIND, 0)

        def Pron(self):
            return self.getToken(gpsrParser.Pron, 0)

        def beacon(self):
            return self.getTypedRuleContext(gpsrParser.BeaconContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_gdwhere

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGdwhere" ):
                return visitor.visitGdwhere(self)
            else:
                return visitor.visitChildren(self)




    def gdwhere(self):

        localctx = gpsrParser.GdwhereContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_gdwhere)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 639
            self.match(gpsrParser.T__27)
            self.state = 640
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 3758096384) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 641
            self.match(gpsrParser.FIND)
            self.state = 642
            self.match(gpsrParser.Pron)
            self.state = 643
            self.match(gpsrParser.T__22)
            self.state = 644
            self.match(gpsrParser.T__2)
            self.state = 645
            self.beacon()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FollowoutContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_followout

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Beacon_to_roomContext(FollowoutContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FollowoutContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Name(self):
            return self.getToken(gpsrParser.Name, 0)
        def beacon(self):
            return self.getTypedRuleContext(gpsrParser.BeaconContext,0)

        def vbfollow(self):
            return self.getTypedRuleContext(gpsrParser.VbfollowContext,0)

        def Pron(self):
            return self.getToken(gpsrParser.Pron, 0)
        def goroom(self):
            return self.getTypedRuleContext(gpsrParser.GoroomContext,0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(gpsrParser.Comma)
            else:
                return self.getToken(gpsrParser.Comma, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBeacon_to_room" ):
                return visitor.visitBeacon_to_room(self)
            else:
                return visitor.visitChildren(self)


    class Beacon_to_backContext(FollowoutContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FollowoutContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Name(self):
            return self.getToken(gpsrParser.Name, 0)
        def beacon(self):
            return self.getTypedRuleContext(gpsrParser.BeaconContext,0)

        def vbfollow(self):
            return self.getTypedRuleContext(gpsrParser.VbfollowContext,0)

        def Pron(self, i:int=None):
            if i is None:
                return self.getTokens(gpsrParser.Pron)
            else:
                return self.getToken(gpsrParser.Pron, i)
        def vbguide(self):
            return self.getTypedRuleContext(gpsrParser.VbguideContext,0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(gpsrParser.Comma)
            else:
                return self.getToken(gpsrParser.Comma, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBeacon_to_back" ):
                return visitor.visitBeacon_to_back(self)
            else:
                return visitor.visitChildren(self)



    def followout(self):

        localctx = gpsrParser.FollowoutContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_followout)
        self._la = 0 # Token type
        try:
            self.state = 681
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                localctx = gpsrParser.Beacon_to_roomContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 647
                self.match(gpsrParser.T__26)
                self.state = 648
                self.match(gpsrParser.Name)
                self.state = 649
                self.match(gpsrParser.T__22)
                self.state = 650
                self.match(gpsrParser.T__2)
                self.state = 651
                self.beacon()
                self.state = 653
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==131:
                    self.state = 652
                    self.match(gpsrParser.Comma)


                self.state = 655
                self.vbfollow()
                self.state = 656
                self.match(gpsrParser.Pron)
                self.state = 658
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==131:
                    self.state = 657
                    self.match(gpsrParser.Comma)


                self.state = 660
                self.match(gpsrParser.T__4)
                self.state = 661
                self.goroom()
                pass

            elif la_ == 2:
                localctx = gpsrParser.Beacon_to_backContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 663
                self.match(gpsrParser.T__26)
                self.state = 664
                self.match(gpsrParser.Name)
                self.state = 665
                self.match(gpsrParser.T__22)
                self.state = 666
                self.match(gpsrParser.T__2)
                self.state = 667
                self.beacon()
                self.state = 669
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==131:
                    self.state = 668
                    self.match(gpsrParser.Comma)


                self.state = 671
                self.vbfollow()
                self.state = 672
                self.match(gpsrParser.Pron)
                self.state = 674
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==131:
                    self.state = 673
                    self.match(gpsrParser.Comma)


                self.state = 676
                self.match(gpsrParser.T__4)
                self.state = 677
                self.vbguide()
                self.state = 678
                self.match(gpsrParser.Pron)
                self.state = 679
                self.match(gpsrParser.T__31)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IncompleteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbfollow(self):
            return self.getTypedRuleContext(gpsrParser.VbfollowContext,0)


        def Name(self):
            return self.getToken(gpsrParser.Name, 0)

        def vbbring(self):
            return self.getTypedRuleContext(gpsrParser.VbbringContext,0)


        def object_obfuscated(self):
            return self.getTypedRuleContext(gpsrParser.Object_obfuscatedContext,0)


        def vbdeliver(self):
            return self.getTypedRuleContext(gpsrParser.VbdeliverContext,0)


        def someone(self):
            return self.getTypedRuleContext(gpsrParser.SomeoneContext,0)


        def vbguide(self):
            return self.getTypedRuleContext(gpsrParser.VbguideContext,0)


        def beacon(self):
            return self.getTypedRuleContext(gpsrParser.BeaconContext,0)


        def inguidewho(self):
            return self.getTypedRuleContext(gpsrParser.InguidewhoContext,0)


        def Pron(self):
            return self.getToken(gpsrParser.Pron, 0)

        def gobeacon(self):
            return self.getTypedRuleContext(gpsrParser.GobeaconContext,0)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(gpsrParser.Comma)
            else:
                return self.getToken(gpsrParser.Comma, i)

        def getRuleIndex(self):
            return gpsrParser.RULE_incomplete

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIncomplete" ):
                return visitor.visitIncomplete(self)
            else:
                return visitor.visitChildren(self)




    def incomplete(self):

        localctx = gpsrParser.IncompleteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_incomplete)
        self._la = 0 # Token type
        try:
            self.state = 721
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 683
                self.vbfollow()
                self.state = 684
                self.match(gpsrParser.Name)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 686
                self.vbbring()
                self.state = 687
                self.match(gpsrParser.T__7)
                self.state = 688
                self.match(gpsrParser.T__2)
                self.state = 689
                self.object_obfuscated()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 691
                self.vbdeliver()
                self.state = 692
                self.object_obfuscated()
                self.state = 693
                self.match(gpsrParser.T__8)
                self.state = 694
                self.someone()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 696
                self.vbguide()
                self.state = 697
                self.match(gpsrParser.Name)
                self.state = 698
                self.match(gpsrParser.T__8)
                self.state = 699
                self.match(gpsrParser.T__2)
                self.state = 700
                self.beacon()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 702
                self.match(gpsrParser.T__26)
                self.state = 703
                self.inguidewho()
                self.state = 704
                self.match(gpsrParser.T__4)
                self.state = 705
                self.vbguide()
                self.state = 706
                self.match(gpsrParser.Pron)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 708
                self.gobeacon()
                self.state = 710
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==131:
                    self.state = 709
                    self.match(gpsrParser.Comma)


                self.state = 712
                self.match(gpsrParser.T__26)
                self.state = 713
                self.inguidewho()
                self.state = 715
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==131:
                    self.state = 714
                    self.match(gpsrParser.Comma)


                self.state = 717
                self.match(gpsrParser.T__4)
                self.state = 718
                self.vbguide()
                self.state = 719
                self.match(gpsrParser.Pron)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InguidewhoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Name(self):
            return self.getToken(gpsrParser.Name, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_inguidewho

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInguidewho" ):
                return visitor.visitInguidewho(self)
            else:
                return visitor.visitChildren(self)




    def inguidewho(self):

        localctx = gpsrParser.InguidewhoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_inguidewho)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 723
            self.match(gpsrParser.Name)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartyhostContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbserve(self):
            return self.getTypedRuleContext(gpsrParser.VbserveContext,0)


        def phpeopler(self):
            return self.getTypedRuleContext(gpsrParser.PhpeoplerContext,0)


        def vbmeet(self):
            return self.getTypedRuleContext(gpsrParser.VbmeetContext,0)


        def Name(self, i:int=None):
            if i is None:
                return self.getTokens(gpsrParser.Name)
            else:
                return self.getToken(gpsrParser.Name, i)

        def door(self):
            return self.getTypedRuleContext(gpsrParser.DoorContext,0)


        def Pron(self, i:int=None):
            if i is None:
                return self.getTokens(gpsrParser.Pron)
            else:
                return self.getToken(gpsrParser.Pron, i)

        def beacon(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(gpsrParser.BeaconContext)
            else:
                return self.getTypedRuleContext(gpsrParser.BeaconContext,i)


        def vbguide(self):
            return self.getTypedRuleContext(gpsrParser.VbguideContext,0)


        def taxi(self):
            return self.getTypedRuleContext(gpsrParser.TaxiContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_partyhost

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartyhost" ):
                return visitor.visitPartyhost(self)
            else:
                return visitor.visitChildren(self)




    def partyhost(self):

        localctx = gpsrParser.PartyhostContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_partyhost)
        try:
            self.state = 778
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 725
                self.vbserve()
                self.state = 726
                self.match(gpsrParser.T__32)
                self.state = 727
                self.match(gpsrParser.T__8)
                self.state = 728
                self.phpeopler()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 730
                self.vbmeet()
                self.state = 731
                self.match(gpsrParser.Name)
                self.state = 732
                self.match(gpsrParser.T__22)
                self.state = 733
                self.match(gpsrParser.T__2)
                self.state = 734
                self.door()
                self.state = 735
                self.match(gpsrParser.T__4)
                self.state = 736
                self.match(gpsrParser.T__33)
                self.state = 737
                self.match(gpsrParser.Pron)
                self.state = 738
                self.match(gpsrParser.T__8)
                self.state = 739
                self.phpeopler()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 741
                self.vbmeet()
                self.state = 742
                self.match(gpsrParser.Name)
                self.state = 743
                self.match(gpsrParser.T__22)
                self.state = 744
                self.match(gpsrParser.T__2)
                self.state = 745
                self.beacon()
                self.state = 746
                self.match(gpsrParser.T__4)
                self.state = 747
                self.match(gpsrParser.T__34)
                self.state = 748
                self.match(gpsrParser.Pron)
                self.state = 749
                self.match(gpsrParser.T__8)
                self.state = 750
                self.match(gpsrParser.T__35)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 752
                self.vbmeet()
                self.state = 753
                self.match(gpsrParser.Name)
                self.state = 754
                self.match(gpsrParser.T__22)
                self.state = 755
                self.match(gpsrParser.T__2)
                self.state = 756
                self.beacon()
                self.state = 757
                self.match(gpsrParser.T__4)
                self.state = 758
                self.match(gpsrParser.T__33)
                self.state = 759
                self.match(gpsrParser.Pron)
                self.state = 760
                self.match(gpsrParser.T__8)
                self.state = 761
                self.match(gpsrParser.Name)
                self.state = 762
                self.match(gpsrParser.T__22)
                self.state = 763
                self.match(gpsrParser.T__2)
                self.state = 764
                self.beacon()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 766
                self.vbmeet()
                self.state = 767
                self.match(gpsrParser.Name)
                self.state = 768
                self.match(gpsrParser.T__22)
                self.state = 769
                self.match(gpsrParser.T__2)
                self.state = 770
                self.beacon()
                self.state = 771
                self.match(gpsrParser.T__4)
                self.state = 772
                self.vbguide()
                self.state = 773
                self.match(gpsrParser.Pron)
                self.state = 774
                self.match(gpsrParser.T__8)
                self.state = 775
                self.match(gpsrParser.Pron)
                self.state = 776
                self.taxi()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PhpeopleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def peopletype(self):
            return self.getTypedRuleContext(gpsrParser.PeopletypeContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_phpeople

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPhpeople" ):
                return visitor.visitPhpeople(self)
            else:
                return visitor.visitChildren(self)




    def phpeople(self):

        localctx = gpsrParser.PhpeopleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_phpeople)
        try:
            self.state = 784
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [37]:
                self.enterOuterAlt(localctx, 1)
                self.state = 780
                self.match(gpsrParser.T__36)
                pass
            elif token in [38]:
                self.enterOuterAlt(localctx, 2)
                self.state = 781
                self.match(gpsrParser.T__37)
                self.state = 782
                self.match(gpsrParser.T__2)
                self.state = 783
                self.peopletype()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PeopletypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEN(self):
            return self.getToken(gpsrParser.MEN, 0)

        def WOMEN(self):
            return self.getToken(gpsrParser.WOMEN, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_peopletype

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPeopletype" ):
                return visitor.visitPeopletype(self)
            else:
                return visitor.visitChildren(self)




    def peopletype(self):

        localctx = gpsrParser.PeopletypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_peopletype)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 786
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 3848357806080) != 0) or _la==101 or _la==102):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PhpeoplerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def phpeople(self):
            return self.getTypedRuleContext(gpsrParser.PhpeopleContext,0)


        def Room(self):
            return self.getToken(gpsrParser.Room, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_phpeopler

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPhpeopler" ):
                return visitor.visitPhpeopler(self)
            else:
                return visitor.visitChildren(self)




    def phpeopler(self):

        localctx = gpsrParser.PhpeoplerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_phpeopler)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 788
            self.phpeople()
            self.state = 789
            self.match(gpsrParser.T__3)
            self.state = 790
            self.match(gpsrParser.T__2)
            self.state = 791
            self.match(gpsrParser.Room)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PgendersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAN(self):
            return self.getToken(gpsrParser.MAN, 0)

        def WOMAN(self):
            return self.getToken(gpsrParser.WOMAN, 0)

        def BOY(self):
            return self.getToken(gpsrParser.BOY, 0)

        def GIRL(self):
            return self.getToken(gpsrParser.GIRL, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_pgenders

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPgenders" ):
                return visitor.visitPgenders(self)
            else:
                return visitor.visitChildren(self)




    def pgenders(self):

        localctx = gpsrParser.PgendersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_pgenders)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 793
            _la = self._input.LA(1)
            if not(((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & 15) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PgenderpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEN(self):
            return self.getToken(gpsrParser.MEN, 0)

        def WOMEN(self):
            return self.getToken(gpsrParser.WOMEN, 0)

        def BOYS(self):
            return self.getToken(gpsrParser.BOYS, 0)

        def GIRLS(self):
            return self.getToken(gpsrParser.GIRLS, 0)

        def MALE(self):
            return self.getToken(gpsrParser.MALE, 0)

        def FEMALE(self):
            return self.getToken(gpsrParser.FEMALE, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_pgenderp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPgenderp" ):
                return visitor.visitPgenderp(self)
            else:
                return visitor.visitChildren(self)




    def pgenderp(self):

        localctx = gpsrParser.PgenderpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_pgenderp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 795
            _la = self._input.LA(1)
            if not(((((_la - 101)) & ~0x3f) == 0 and ((1 << (_la - 101)) & 63) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PoseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_pose

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPose" ):
                return visitor.visitPose(self)
            else:
                return visitor.visitChildren(self)




    def pose(self):

        localctx = gpsrParser.PoseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_pose)
        try:
            self.state = 801
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [42]:
                self.enterOuterAlt(localctx, 1)
                self.state = 797
                self.match(gpsrParser.T__41)
                pass
            elif token in [43]:
                self.enterOuterAlt(localctx, 2)
                self.state = 798
                self.match(gpsrParser.T__42)
                pass
            elif token in [44]:
                self.enterOuterAlt(localctx, 3)
                self.state = 799
                self.match(gpsrParser.T__43)
                self.state = 800
                self.match(gpsrParser.T__44)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AbsposContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_abspos

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAbspos" ):
                return visitor.visitAbspos(self)
            else:
                return visitor.visitChildren(self)




    def abspos(self):

        localctx = gpsrParser.AbsposContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_abspos)
        try:
            self.state = 807
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [46]:
                self.enterOuterAlt(localctx, 1)
                self.state = 803
                self.match(gpsrParser.T__45)
                self.state = 804
                self.match(gpsrParser.T__46)
                pass
            elif token in [48]:
                self.enterOuterAlt(localctx, 2)
                self.state = 805
                self.match(gpsrParser.T__47)
                self.state = 806
                self.match(gpsrParser.T__46)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelposContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_relpos

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelpos" ):
                return visitor.visitRelpos(self)
            else:
                return visitor.visitChildren(self)




    def relpos(self):

        localctx = gpsrParser.RelposContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_relpos)
        try:
            self.state = 823
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 809
                self.match(gpsrParser.T__22)
                self.state = 810
                self.match(gpsrParser.T__2)
                self.state = 811
                self.match(gpsrParser.T__45)
                self.state = 812
                self.match(gpsrParser.T__21)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 813
                self.match(gpsrParser.T__22)
                self.state = 814
                self.match(gpsrParser.T__2)
                self.state = 815
                self.match(gpsrParser.T__47)
                self.state = 816
                self.match(gpsrParser.T__21)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 817
                self.match(gpsrParser.T__6)
                self.state = 818
                self.match(gpsrParser.T__48)
                self.state = 819
                self.match(gpsrParser.T__21)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 820
                self.match(gpsrParser.T__49)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 821
                self.match(gpsrParser.T__50)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 822
                self.match(gpsrParser.T__51)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GarbageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_garbage

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGarbage" ):
                return visitor.visitGarbage(self)
            else:
                return visitor.visitChildren(self)




    def garbage(self):

        localctx = gpsrParser.GarbageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_garbage)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 825
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 567453553048682496) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LuggageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_luggage

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLuggage" ):
                return visitor.visitLuggage(self)
            else:
                return visitor.visitChildren(self)




    def luggage(self):

        localctx = gpsrParser.LuggageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_luggage)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 827
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -576460752303423488) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TaxiContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_taxi

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTaxi" ):
                return visitor.visitTaxi(self)
            else:
                return visitor.visitChildren(self)




    def taxi(self):

        localctx = gpsrParser.TaxiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_taxi)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 829
            _la = self._input.LA(1)
            if not(((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DoorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def doorpos(self):
            return self.getTypedRuleContext(gpsrParser.DoorposContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_door

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDoor" ):
                return visitor.visitDoor(self)
            else:
                return visitor.visitChildren(self)




    def door(self):

        localctx = gpsrParser.DoorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_door)
        try:
            self.state = 837
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 831
                self.doorpos()
                self.state = 832
                self.match(gpsrParser.T__66)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 834
                self.doorpos()
                self.state = 835
                self.match(gpsrParser.T__67)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DoorposContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_doorpos

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDoorpos" ):
                return visitor.visitDoorpos(self)
            else:
                return visitor.visitChildren(self)




    def doorpos(self):

        localctx = gpsrParser.DoorposContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_doorpos)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 839
            _la = self._input.LA(1)
            if not(((((_la - 32)) & ~0x3f) == 0 and ((1 << (_la - 32)) & 962072674305) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbtakeoutContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TAKE(self):
            return self.getToken(gpsrParser.TAKE, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_vbtakeout

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVbtakeout" ):
                return visitor.visitVbtakeout(self)
            else:
                return visitor.visitChildren(self)




    def vbtakeout(self):

        localctx = gpsrParser.VbtakeoutContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_vbtakeout)
        try:
            self.state = 844
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [110]:
                self.enterOuterAlt(localctx, 1)
                self.state = 841
                self.match(gpsrParser.TAKE)
                self.state = 842
                self.match(gpsrParser.T__71)
                pass
            elif token in [73]:
                self.enterOuterAlt(localctx, 2)
                self.state = 843
                self.match(gpsrParser.T__72)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbcleanupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_vbcleanup

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVbcleanup" ):
                return visitor.visitVbcleanup(self)
            else:
                return visitor.visitChildren(self)




    def vbcleanup(self):

        localctx = gpsrParser.VbcleanupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_vbcleanup)
        try:
            self.state = 854
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 846
                self.match(gpsrParser.T__73)
                self.state = 847
                self.match(gpsrParser.T__71)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 848
                self.match(gpsrParser.T__73)
                self.state = 849
                self.match(gpsrParser.T__74)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 850
                self.match(gpsrParser.T__75)
                self.state = 851
                self.match(gpsrParser.T__76)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 852
                self.match(gpsrParser.T__77)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 853
                self.match(gpsrParser.T__78)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbserveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELIVER(self):
            return self.getToken(gpsrParser.DELIVER, 0)

        def GIVE(self):
            return self.getToken(gpsrParser.GIVE, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_vbserve

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVbserve" ):
                return visitor.visitVbserve(self)
            else:
                return visitor.visitChildren(self)




    def vbserve(self):

        localctx = gpsrParser.VbserveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_vbserve)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 856
            _la = self._input.LA(1)
            if not(((((_la - 80)) & ~0x3f) == 0 and ((1 << (_la - 80)) & 6442450959) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbmeetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FIND(self):
            return self.getToken(gpsrParser.FIND, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_vbmeet

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVbmeet" ):
                return visitor.visitVbmeet(self)
            else:
                return visitor.visitChildren(self)




    def vbmeet(self):

        localctx = gpsrParser.VbmeetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_vbmeet)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 858
            _la = self._input.LA(1)
            if not(((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & 549755813895) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SomeoneContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def whoWhere(self):
            return self.getTypedRuleContext(gpsrParser.WhoWhereContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_someone

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSomeone" ):
                return visitor.visitSomeone(self)
            else:
                return visitor.visitChildren(self)




    def someone(self):

        localctx = gpsrParser.SomeoneContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_someone)
        try:
            self.state = 862
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [8]:
                self.enterOuterAlt(localctx, 1)
                self.state = 860
                self.match(gpsrParser.T__7)
                pass
            elif token in [3]:
                self.enterOuterAlt(localctx, 2)
                self.state = 861
                self.whoWhere()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PlaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbplace(self):
            return self.getTypedRuleContext(gpsrParser.VbplaceContext,0)


        def placement(self):
            return self.getTypedRuleContext(gpsrParser.PlacementContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_place

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPlace" ):
                return visitor.visitPlace(self)
            else:
                return visitor.visitChildren(self)




    def place(self):

        localctx = gpsrParser.PlaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_place)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 864
            self.vbplace()
            self.state = 865
            self.match(gpsrParser.T__5)
            self.state = 866
            self.match(gpsrParser.T__6)
            self.state = 867
            self.match(gpsrParser.T__2)
            self.state = 868
            self.placement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OpropContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_oprop

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOprop" ):
                return visitor.visitOprop(self)
            else:
                return visitor.visitChildren(self)




    def oprop(self):

        localctx = gpsrParser.OpropContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_oprop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 870
            _la = self._input.LA(1)
            if not(((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & 63) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GoplaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbgopl(self):
            return self.getTypedRuleContext(gpsrParser.VbgoplContext,0)


        def placement(self):
            return self.getTypedRuleContext(gpsrParser.PlacementContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_goplace

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGoplace" ):
                return visitor.visitGoplace(self)
            else:
                return visitor.visitChildren(self)




    def goplace(self):

        localctx = gpsrParser.GoplaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_goplace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 872
            self.vbgopl()
            self.state = 873
            self.match(gpsrParser.T__8)
            self.state = 874
            self.match(gpsrParser.T__2)
            self.state = 875
            self.placement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GobeaconContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbgopl(self):
            return self.getTypedRuleContext(gpsrParser.VbgoplContext,0)


        def beacon(self):
            return self.getTypedRuleContext(gpsrParser.BeaconContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_gobeacon

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGobeacon" ):
                return visitor.visitGobeacon(self)
            else:
                return visitor.visitChildren(self)




    def gobeacon(self):

        localctx = gpsrParser.GobeaconContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_gobeacon)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 877
            self.vbgopl()
            self.state = 878
            self.match(gpsrParser.T__8)
            self.state = 879
            self.match(gpsrParser.T__2)
            self.state = 880
            self.beacon()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GoroomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbgopl(self):
            return self.getTypedRuleContext(gpsrParser.VbgoplContext,0)


        def Room(self):
            return self.getToken(gpsrParser.Room, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_goroom

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGoroom" ):
                return visitor.visitGoroom(self)
            else:
                return visitor.visitChildren(self)




    def goroom(self):

        localctx = gpsrParser.GoroomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_goroom)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 882
            self.vbgopl()
            self.state = 883
            self.match(gpsrParser.T__8)
            self.state = 884
            self.match(gpsrParser.T__2)
            self.state = 885
            self.match(gpsrParser.Room)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TakeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbtake(self):
            return self.getTypedRuleContext(gpsrParser.VbtakeContext,0)


        def Object(self):
            return self.getToken(gpsrParser.Object, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_take

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTake" ):
                return visitor.visitTake(self)
            else:
                return visitor.visitChildren(self)




    def take(self):

        localctx = gpsrParser.TakeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_take)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 887
            self.vbtake()
            self.state = 888
            self.match(gpsrParser.T__2)
            self.state = 889
            self.match(gpsrParser.Object)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TakefromContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def take(self):
            return self.getTypedRuleContext(gpsrParser.TakeContext,0)


        def placement(self):
            return self.getTypedRuleContext(gpsrParser.PlacementContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_takefrom

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTakefrom" ):
                return visitor.visitTakefrom(self)
            else:
                return visitor.visitChildren(self)




    def takefrom(self):

        localctx = gpsrParser.TakefromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_takefrom)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 891
            self.take()
            self.state = 892
            self.match(gpsrParser.T__9)
            self.state = 893
            self.match(gpsrParser.T__2)
            self.state = 894
            self.placement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DelivmeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbdeliver(self):
            return self.getTypedRuleContext(gpsrParser.VbdeliverContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_delivme

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDelivme" ):
                return visitor.visitDelivme(self)
            else:
                return visitor.visitChildren(self)




    def delivme(self):

        localctx = gpsrParser.DelivmeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_delivme)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 896
            self.vbdeliver()
            self.state = 897
            self.match(gpsrParser.T__5)
            self.state = 898
            self.match(gpsrParser.T__8)
            self.state = 899
            self.match(gpsrParser.T__7)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DelivtoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbdeliver(self):
            return self.getTypedRuleContext(gpsrParser.VbdeliverContext,0)


        def Name(self):
            return self.getToken(gpsrParser.Name, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_delivto

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDelivto" ):
                return visitor.visitDelivto(self)
            else:
                return visitor.visitChildren(self)




    def delivto(self):

        localctx = gpsrParser.DelivtoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_delivto)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 901
            self.vbdeliver()
            self.state = 902
            self.match(gpsrParser.T__5)
            self.state = 903
            self.match(gpsrParser.T__8)
            self.state = 904
            self.match(gpsrParser.Name)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DelivatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbdeliver(self):
            return self.getTypedRuleContext(gpsrParser.VbdeliverContext,0)


        def Name(self):
            return self.getToken(gpsrParser.Name, 0)

        def beacon(self):
            return self.getTypedRuleContext(gpsrParser.BeaconContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_delivat

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDelivat" ):
                return visitor.visitDelivat(self)
            else:
                return visitor.visitChildren(self)




    def delivat(self):

        localctx = gpsrParser.DelivatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_delivat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 906
            self.vbdeliver()
            self.state = 907
            self.match(gpsrParser.T__5)
            self.state = 908
            self.match(gpsrParser.T__8)
            self.state = 909
            self.match(gpsrParser.Name)
            self.state = 910
            self.match(gpsrParser.T__22)
            self.state = 911
            self.match(gpsrParser.T__2)
            self.state = 912
            self.beacon()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TalkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_talk

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Answer_questionContext(TalkContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.TalkContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Answer(self):
            return self.getToken(gpsrParser.Answer, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnswer_question" ):
                return visitor.visitAnswer_question(self)
            else:
                return visitor.visitChildren(self)


    class Speak_toContext(TalkContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.TalkContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def speak(self):
            return self.getTypedRuleContext(gpsrParser.SpeakContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpeak_to" ):
                return visitor.visitSpeak_to(self)
            else:
                return visitor.visitChildren(self)



    def talk(self):

        localctx = gpsrParser.TalkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_talk)
        try:
            self.state = 916
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [107]:
                localctx = gpsrParser.Answer_questionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 914
                self.match(gpsrParser.Answer)
                pass
            elif token in [118, 119]:
                localctx = gpsrParser.Speak_toContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 915
                self.speak()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpeakContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbspeak(self):
            return self.getTypedRuleContext(gpsrParser.VbspeakContext,0)


        def Whattosay(self):
            return self.getToken(gpsrParser.Whattosay, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_speak

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpeak" ):
                return visitor.visitSpeak(self)
            else:
                return visitor.visitChildren(self)




    def speak(self):

        localctx = gpsrParser.SpeakContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_speak)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 918
            self.vbspeak()
            self.state = 919
            self.match(gpsrParser.Whattosay)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbbtakeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BRING(self):
            return self.getToken(gpsrParser.BRING, 0)

        def TAKE(self):
            return self.getToken(gpsrParser.TAKE, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_vbbtake

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVbbtake" ):
                return visitor.visitVbbtake(self)
            else:
                return visitor.visitChildren(self)




    def vbbtake(self):

        localctx = gpsrParser.VbbtakeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_vbbtake)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 921
            _la = self._input.LA(1)
            if not(_la==109 or _la==110):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbplaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PUT(self):
            return self.getToken(gpsrParser.PUT, 0)

        def PLACE(self):
            return self.getToken(gpsrParser.PLACE, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_vbplace

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVbplace" ):
                return visitor.visitVbplace(self)
            else:
                return visitor.visitChildren(self)




    def vbplace(self):

        localctx = gpsrParser.VbplaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_vbplace)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 923
            _la = self._input.LA(1)
            if not(_la==113 or _la==114):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbbringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BRING(self):
            return self.getToken(gpsrParser.BRING, 0)

        def GIVE(self):
            return self.getToken(gpsrParser.GIVE, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_vbbring

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVbbring" ):
                return visitor.visitVbbring(self)
            else:
                return visitor.visitChildren(self)




    def vbbring(self):

        localctx = gpsrParser.VbbringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_vbbring)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 925
            _la = self._input.LA(1)
            if not(_la==109 or _la==112):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbdeliverContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbbring(self):
            return self.getTypedRuleContext(gpsrParser.VbbringContext,0)


        def DELIVER(self):
            return self.getToken(gpsrParser.DELIVER, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_vbdeliver

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVbdeliver" ):
                return visitor.visitVbdeliver(self)
            else:
                return visitor.visitChildren(self)




    def vbdeliver(self):

        localctx = gpsrParser.VbdeliverContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_vbdeliver)
        try:
            self.state = 929
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [109, 112]:
                self.enterOuterAlt(localctx, 1)
                self.state = 927
                self.vbbring()
                pass
            elif token in [111]:
                self.enterOuterAlt(localctx, 2)
                self.state = 928
                self.match(gpsrParser.DELIVER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbtakeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GET(self):
            return self.getToken(gpsrParser.GET, 0)

        def GRASP(self):
            return self.getToken(gpsrParser.GRASP, 0)

        def TAKE(self):
            return self.getToken(gpsrParser.TAKE, 0)

        def PICK_UP(self):
            return self.getToken(gpsrParser.PICK_UP, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_vbtake

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVbtake" ):
                return visitor.visitVbtake(self)
            else:
                return visitor.visitChildren(self)




    def vbtake(self):

        localctx = gpsrParser.VbtakeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_vbtake)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 931
            _la = self._input.LA(1)
            if not(((((_la - 110)) & ~0x3f) == 0 and ((1 << (_la - 110)) & 225) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbspeakContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TELL(self):
            return self.getToken(gpsrParser.TELL, 0)

        def SAY(self):
            return self.getToken(gpsrParser.SAY, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_vbspeak

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVbspeak" ):
                return visitor.visitVbspeak(self)
            else:
                return visitor.visitChildren(self)




    def vbspeak(self):

        localctx = gpsrParser.VbspeakContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_vbspeak)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 933
            _la = self._input.LA(1)
            if not(_la==118 or _la==119):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbgoplContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GO(self):
            return self.getToken(gpsrParser.GO, 0)

        def NAVIGATE(self):
            return self.getToken(gpsrParser.NAVIGATE, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_vbgopl

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVbgopl" ):
                return visitor.visitVbgopl(self)
            else:
                return visitor.visitChildren(self)




    def vbgopl(self):

        localctx = gpsrParser.VbgoplContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_vbgopl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 935
            _la = self._input.LA(1)
            if not(_la==120 or _la==121):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbgorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbgopl(self):
            return self.getTypedRuleContext(gpsrParser.VbgoplContext,0)


        def ENTER(self):
            return self.getToken(gpsrParser.ENTER, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_vbgor

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVbgor" ):
                return visitor.visitVbgor(self)
            else:
                return visitor.visitChildren(self)




    def vbgor(self):

        localctx = gpsrParser.VbgorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_vbgor)
        try:
            self.state = 939
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [120, 121]:
                self.enterOuterAlt(localctx, 1)
                self.state = 937
                self.vbgopl()
                pass
            elif token in [122]:
                self.enterOuterAlt(localctx, 2)
                self.state = 938
                self.match(gpsrParser.ENTER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbfindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FIND(self):
            return self.getToken(gpsrParser.FIND, 0)

        def LOCATE(self):
            return self.getToken(gpsrParser.LOCATE, 0)

        def LOOK_FOR(self):
            return self.getToken(gpsrParser.LOOK_FOR, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_vbfind

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVbfind" ):
                return visitor.visitVbfind(self)
            else:
                return visitor.visitChildren(self)




    def vbfind(self):

        localctx = gpsrParser.VbfindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_vbfind)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 941
            _la = self._input.LA(1)
            if not(((((_la - 123)) & ~0x3f) == 0 and ((1 << (_la - 123)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbguideContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GUIDE(self):
            return self.getToken(gpsrParser.GUIDE, 0)

        def ESCORT(self):
            return self.getToken(gpsrParser.ESCORT, 0)

        def TAKE(self):
            return self.getToken(gpsrParser.TAKE, 0)

        def LEAD(self):
            return self.getToken(gpsrParser.LEAD, 0)

        def ACCOMPANY(self):
            return self.getToken(gpsrParser.ACCOMPANY, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_vbguide

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVbguide" ):
                return visitor.visitVbguide(self)
            else:
                return visitor.visitChildren(self)




    def vbguide(self):

        localctx = gpsrParser.VbguideContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_vbguide)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 943
            _la = self._input.LA(1)
            if not(((((_la - 110)) & ~0x3f) == 0 and ((1 << (_la - 110)) & 983041) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbfollowContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOLLOW(self):
            return self.getToken(gpsrParser.FOLLOW, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_vbfollow

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVbfollow" ):
                return visitor.visitVbfollow(self)
            else:
                return visitor.visitChildren(self)




    def vbfollow(self):

        localctx = gpsrParser.VbfollowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_vbfollow)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 945
            self.match(gpsrParser.FOLLOW)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PoliteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_polite

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPolite" ):
                return visitor.visitPolite(self)
            else:
                return visitor.visitChildren(self)




    def polite(self):

        localctx = gpsrParser.PoliteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_polite)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 947
            _la = self._input.LA(1)
            if not(((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 15) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_alikeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Object(self):
            return self.getToken(gpsrParser.Object, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_object_alike

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObject_alike" ):
                return visitor.visitObject_alike(self)
            else:
                return visitor.visitChildren(self)




    def object_alike(self):

        localctx = gpsrParser.Object_alikeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_object_alike)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 949
            self.match(gpsrParser.Object)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_knownContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Object(self):
            return self.getToken(gpsrParser.Object, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_object_known

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObject_known" ):
                return visitor.visitObject_known(self)
            else:
                return visitor.visitChildren(self)




    def object_known(self):

        localctx = gpsrParser.Object_knownContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_object_known)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 951
            self.match(gpsrParser.Object)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_alike_obfuscatedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Category(self):
            return self.getToken(gpsrParser.Category, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_object_alike_obfuscated

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObject_alike_obfuscated" ):
                return visitor.visitObject_alike_obfuscated(self)
            else:
                return visitor.visitChildren(self)




    def object_alike_obfuscated(self):

        localctx = gpsrParser.Object_alike_obfuscatedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_object_alike_obfuscated)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 953
            self.match(gpsrParser.Category)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_obfuscatedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Category(self):
            return self.getToken(gpsrParser.Category, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_object_obfuscated

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObject_obfuscated" ):
                return visitor.visitObject_obfuscated(self)
            else:
                return visitor.visitChildren(self)




    def object_obfuscated(self):

        localctx = gpsrParser.Object_obfuscatedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_object_obfuscated)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 955
            self.match(gpsrParser.Category)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BeaconContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Location_except_room(self):
            return self.getToken(gpsrParser.Location_except_room, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_beacon

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBeacon" ):
                return visitor.visitBeacon(self)
            else:
                return visitor.visitChildren(self)




    def beacon(self):

        localctx = gpsrParser.BeaconContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_beacon)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 957
            self.match(gpsrParser.Location_except_room)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PlacementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Location_except_room(self):
            return self.getToken(gpsrParser.Location_except_room, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_placement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPlacement" ):
                return visitor.visitPlacement(self)
            else:
                return visitor.visitChildren(self)




    def placement(self):

        localctx = gpsrParser.PlacementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_placement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 959
            self.match(gpsrParser.Location_except_room)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





