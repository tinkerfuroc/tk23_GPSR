# Generated from gpsr.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,98,866,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
        6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
        2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
        7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,
        2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,
        7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,
        2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,
        7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,
        2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,1,0,
        4,0,120,8,0,11,0,12,0,121,1,1,1,1,3,1,126,8,1,1,2,3,2,129,8,2,1,
        2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,142,8,3,1,4,1,4,1,
        4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,158,8,4,1,5,1,
        5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
        7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
        7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,205,8,7,1,7,1,
        7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,215,8,7,1,7,1,7,1,7,1,7,3,7,221,8,
        7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
        7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
        7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,263,8,7,1,8,1,8,1,9,1,9,1,
        9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,
        9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,
        9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,310,8,9,1,9,1,9,1,9,1,9,3,
        9,316,8,9,3,9,318,8,9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,
        11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
        11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
        11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
        11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
        11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
        11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,405,
        8,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
        1,12,3,12,420,8,12,1,12,1,12,3,12,424,8,12,1,12,1,12,1,12,1,12,1,
        12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
        12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
        12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
        12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
        12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
        12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
        12,3,12,509,8,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,
        13,520,8,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,531,
        8,13,1,13,1,13,3,13,535,8,13,1,13,1,13,1,13,3,13,540,8,13,1,13,1,
        13,1,13,1,13,3,13,546,8,13,1,14,1,14,1,14,3,14,551,8,14,1,15,1,15,
        1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
        1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,578,8,17,
        1,17,1,17,1,17,3,17,583,8,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
        1,17,1,17,3,17,594,8,17,1,17,1,17,3,17,598,8,17,1,18,1,18,1,18,1,
        18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,
        20,1,20,1,20,1,20,3,20,620,8,20,1,20,1,20,1,20,3,20,625,8,20,1,20,
        1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,636,8,20,1,20,1,20,
        1,20,3,20,641,8,20,1,20,1,20,1,20,1,20,1,20,3,20,648,8,20,1,21,1,
        21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,
        21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,
        21,677,8,21,1,21,1,21,1,21,3,21,682,8,21,1,21,1,21,1,21,1,21,3,21,
        688,8,21,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
        1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
        1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
        1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
        1,23,1,23,1,23,1,23,3,23,744,8,23,1,24,1,24,1,24,1,24,3,24,750,8,
        24,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,
        29,1,29,1,29,3,29,767,8,29,1,30,1,30,3,30,771,8,30,1,31,1,31,1,31,
        1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,
        1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,
        1,36,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,39,1,39,
        1,39,1,39,1,39,1,39,1,39,1,39,1,40,1,40,3,40,823,8,40,1,41,1,41,
        1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,3,45,836,8,45,1,46,
        1,46,1,47,1,47,1,48,1,48,1,49,1,49,3,49,846,8,49,1,50,1,50,1,51,
        1,51,1,52,1,52,1,53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,1,57,1,57,
        1,58,1,58,1,58,0,0,59,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,
        32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,
        76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,
        114,116,0,12,1,0,30,32,3,0,26,26,41,43,51,52,1,0,47,50,1,0,51,56,
        1,0,71,72,1,0,73,74,1,0,71,71,2,0,72,72,75,77,1,0,78,79,1,0,80,81,
        2,0,33,33,83,84,2,0,72,72,85,88,897,0,119,1,0,0,0,2,125,1,0,0,0,
        4,128,1,0,0,0,6,141,1,0,0,0,8,157,1,0,0,0,10,159,1,0,0,0,12,166,
        1,0,0,0,14,262,1,0,0,0,16,264,1,0,0,0,18,317,1,0,0,0,20,319,1,0,
        0,0,22,404,1,0,0,0,24,508,1,0,0,0,26,545,1,0,0,0,28,550,1,0,0,0,
        30,552,1,0,0,0,32,556,1,0,0,0,34,597,1,0,0,0,36,599,1,0,0,0,38,605,
        1,0,0,0,40,647,1,0,0,0,42,687,1,0,0,0,44,689,1,0,0,0,46,743,1,0,
        0,0,48,749,1,0,0,0,50,751,1,0,0,0,52,753,1,0,0,0,54,758,1,0,0,0,
        56,760,1,0,0,0,58,766,1,0,0,0,60,770,1,0,0,0,62,772,1,0,0,0,64,778,
        1,0,0,0,66,783,1,0,0,0,68,788,1,0,0,0,70,793,1,0,0,0,72,797,1,0,
        0,0,74,802,1,0,0,0,76,807,1,0,0,0,78,812,1,0,0,0,80,822,1,0,0,0,
        82,824,1,0,0,0,84,827,1,0,0,0,86,829,1,0,0,0,88,831,1,0,0,0,90,835,
        1,0,0,0,92,837,1,0,0,0,94,839,1,0,0,0,96,841,1,0,0,0,98,845,1,0,
        0,0,100,847,1,0,0,0,102,849,1,0,0,0,104,851,1,0,0,0,106,853,1,0,
        0,0,108,855,1,0,0,0,110,857,1,0,0,0,112,859,1,0,0,0,114,861,1,0,
        0,0,116,863,1,0,0,0,118,120,3,2,1,0,119,118,1,0,0,0,120,121,1,0,
        0,0,121,119,1,0,0,0,121,122,1,0,0,0,122,1,1,0,0,0,123,126,3,4,2,
        0,124,126,3,6,3,0,125,123,1,0,0,0,125,124,1,0,0,0,126,3,1,0,0,0,
        127,129,5,90,0,0,128,127,1,0,0,0,128,129,1,0,0,0,129,130,1,0,0,0,
        130,131,3,6,3,0,131,5,1,0,0,0,132,142,3,24,12,0,133,142,3,22,11,
        0,134,142,3,32,16,0,135,142,3,26,13,0,136,142,3,40,20,0,137,142,
        3,42,21,0,138,142,3,12,6,0,139,142,3,16,8,0,140,142,3,46,23,0,141,
        132,1,0,0,0,141,133,1,0,0,0,141,134,1,0,0,0,141,135,1,0,0,0,141,
        136,1,0,0,0,141,137,1,0,0,0,141,138,1,0,0,0,141,139,1,0,0,0,141,
        140,1,0,0,0,142,7,1,0,0,0,143,144,3,100,50,0,144,145,5,1,0,0,145,
        146,3,54,27,0,146,158,1,0,0,0,147,148,3,100,50,0,148,149,5,1,0,0,
        149,150,5,2,0,0,150,151,5,97,0,0,151,158,1,0,0,0,152,153,3,100,50,
        0,153,154,5,1,0,0,154,155,5,2,0,0,155,156,5,57,0,0,156,158,1,0,0,
        0,157,143,1,0,0,0,157,147,1,0,0,0,157,152,1,0,0,0,158,9,1,0,0,0,
        159,160,5,3,0,0,160,161,5,2,0,0,161,162,5,97,0,0,162,163,5,4,0,0,
        163,164,5,3,0,0,164,165,5,92,0,0,165,11,1,0,0,0,166,167,3,14,7,0,
        167,13,1,0,0,0,168,169,3,70,35,0,169,170,5,5,0,0,170,171,3,86,43,
        0,171,172,5,6,0,0,172,173,5,7,0,0,173,174,5,3,0,0,174,175,3,108,
        54,0,175,263,1,0,0,0,176,177,3,86,43,0,177,178,5,3,0,0,178,179,3,
        112,56,0,179,180,5,7,0,0,180,181,5,3,0,0,181,182,3,108,54,0,182,
        263,1,0,0,0,183,184,3,88,44,0,184,185,5,8,0,0,185,186,5,3,0,0,186,
        187,3,112,56,0,187,263,1,0,0,0,188,189,3,90,45,0,189,190,5,3,0,0,
        190,191,3,112,56,0,191,192,5,9,0,0,192,193,3,60,30,0,193,263,1,0,
        0,0,194,195,3,72,36,0,195,196,5,5,0,0,196,197,3,86,43,0,197,198,
        5,6,0,0,198,199,5,7,0,0,199,200,5,3,0,0,200,201,3,108,54,0,201,263,
        1,0,0,0,202,204,3,64,32,0,203,205,5,91,0,0,204,203,1,0,0,0,204,205,
        1,0,0,0,205,206,1,0,0,0,206,207,3,100,50,0,207,208,5,3,0,0,208,209,
        5,95,0,0,209,210,5,9,0,0,210,211,3,60,30,0,211,263,1,0,0,0,212,214,
        3,64,32,0,213,215,5,91,0,0,214,213,1,0,0,0,214,215,1,0,0,0,215,216,
        1,0,0,0,216,217,3,100,50,0,217,218,5,3,0,0,218,220,5,95,0,0,219,
        221,5,91,0,0,220,219,1,0,0,0,220,221,1,0,0,0,221,222,1,0,0,0,222,
        223,5,5,0,0,223,224,3,62,31,0,224,263,1,0,0,0,225,226,3,84,42,0,
        226,227,5,3,0,0,227,228,3,110,55,0,228,229,5,10,0,0,229,230,5,3,
        0,0,230,231,5,92,0,0,231,232,5,9,0,0,232,233,5,3,0,0,233,234,3,108,
        54,0,234,263,1,0,0,0,235,236,3,88,44,0,236,237,5,8,0,0,237,238,5,
        3,0,0,238,239,3,110,55,0,239,240,5,10,0,0,240,241,5,3,0,0,241,242,
        3,108,54,0,242,263,1,0,0,0,243,244,3,72,36,0,244,245,5,5,0,0,245,
        246,3,74,37,0,246,263,1,0,0,0,247,248,3,72,36,0,248,249,5,5,0,0,
        249,250,3,78,39,0,250,263,1,0,0,0,251,252,3,72,36,0,252,253,5,5,
        0,0,253,254,3,62,31,0,254,263,1,0,0,0,255,256,3,84,42,0,256,257,
        5,11,0,0,257,258,5,61,0,0,258,259,5,9,0,0,259,260,5,3,0,0,260,261,
        5,62,0,0,261,263,1,0,0,0,262,168,1,0,0,0,262,176,1,0,0,0,262,183,
        1,0,0,0,262,188,1,0,0,0,262,194,1,0,0,0,262,202,1,0,0,0,262,212,
        1,0,0,0,262,225,1,0,0,0,262,235,1,0,0,0,262,243,1,0,0,0,262,247,
        1,0,0,0,262,251,1,0,0,0,262,255,1,0,0,0,263,15,1,0,0,0,264,265,3,
        18,9,0,265,17,1,0,0,0,266,267,3,84,42,0,267,268,5,3,0,0,268,269,
        3,112,56,0,269,270,5,9,0,0,270,271,5,3,0,0,271,272,3,108,54,0,272,
        318,1,0,0,0,273,274,3,88,44,0,274,275,5,8,0,0,275,276,5,3,0,0,276,
        277,5,58,0,0,277,278,5,12,0,0,278,279,3,20,10,0,279,318,1,0,0,0,
        280,281,3,88,44,0,281,282,5,8,0,0,282,283,5,3,0,0,283,284,5,12,0,
        0,284,285,5,59,0,0,285,286,5,3,0,0,286,287,5,95,0,0,287,288,3,20,
        10,0,288,318,1,0,0,0,289,290,3,88,44,0,290,291,5,8,0,0,291,292,5,
        3,0,0,292,293,5,68,0,0,293,294,5,94,0,0,294,295,3,20,10,0,295,318,
        1,0,0,0,296,297,5,65,0,0,297,298,5,3,0,0,298,318,5,92,0,0,299,300,
        5,64,0,0,300,301,5,3,0,0,301,318,5,60,0,0,302,303,3,88,44,0,303,
        304,5,3,0,0,304,305,5,95,0,0,305,306,5,10,0,0,306,309,5,3,0,0,307,
        310,5,92,0,0,308,310,3,106,53,0,309,307,1,0,0,0,309,308,1,0,0,0,
        310,311,1,0,0,0,311,312,5,9,0,0,312,315,5,3,0,0,313,316,5,92,0,0,
        314,316,3,106,53,0,315,313,1,0,0,0,315,314,1,0,0,0,316,318,1,0,0,
        0,317,266,1,0,0,0,317,273,1,0,0,0,317,280,1,0,0,0,317,289,1,0,0,
        0,317,296,1,0,0,0,317,299,1,0,0,0,317,302,1,0,0,0,318,19,1,0,0,0,
        319,320,5,10,0,0,320,321,5,3,0,0,321,322,3,108,54,0,322,21,1,0,0,
        0,323,324,5,78,0,0,324,325,5,8,0,0,325,326,5,13,0,0,326,327,5,14,
        0,0,327,328,5,95,0,0,328,329,5,15,0,0,329,330,5,16,0,0,330,331,5,
        7,0,0,331,332,5,3,0,0,332,405,3,108,54,0,333,334,3,100,50,0,334,
        335,5,3,0,0,335,336,5,95,0,0,336,337,5,4,0,0,337,338,5,3,0,0,338,
        339,5,92,0,0,339,405,1,0,0,0,340,341,5,78,0,0,341,342,5,8,0,0,342,
        343,5,13,0,0,343,344,5,14,0,0,344,345,5,94,0,0,345,346,5,15,0,0,
        346,347,5,16,0,0,347,348,5,7,0,0,348,349,5,3,0,0,349,405,3,108,54,
        0,350,351,5,78,0,0,351,352,5,8,0,0,352,353,5,17,0,0,353,354,5,3,
        0,0,354,355,5,68,0,0,355,356,5,12,0,0,356,357,5,7,0,0,357,358,5,
        3,0,0,358,405,3,108,54,0,359,360,5,78,0,0,360,361,5,8,0,0,361,362,
        5,17,0,0,362,363,5,3,0,0,363,364,5,68,0,0,364,365,5,94,0,0,365,366,
        5,7,0,0,366,367,5,3,0,0,367,405,3,108,54,0,368,369,3,100,50,0,369,
        370,5,3,0,0,370,371,5,94,0,0,371,372,5,4,0,0,372,373,5,3,0,0,373,
        374,5,92,0,0,374,405,1,0,0,0,375,376,5,78,0,0,376,377,5,8,0,0,377,
        378,5,18,0,0,378,379,5,16,0,0,379,380,5,3,0,0,380,381,5,19,0,0,381,
        382,5,68,0,0,382,383,5,20,0,0,383,384,5,7,0,0,384,385,5,3,0,0,385,
        405,3,108,54,0,386,387,5,78,0,0,387,388,5,8,0,0,388,389,5,18,0,0,
        389,390,5,16,0,0,390,391,5,3,0,0,391,392,5,19,0,0,392,393,5,68,0,
        0,393,394,5,94,0,0,394,395,5,7,0,0,395,396,5,3,0,0,396,405,3,108,
        54,0,397,398,3,100,50,0,398,399,5,19,0,0,399,400,5,94,0,0,400,401,
        5,4,0,0,401,402,5,3,0,0,402,403,5,92,0,0,403,405,1,0,0,0,404,323,
        1,0,0,0,404,333,1,0,0,0,404,340,1,0,0,0,404,350,1,0,0,0,404,359,
        1,0,0,0,404,368,1,0,0,0,404,375,1,0,0,0,404,386,1,0,0,0,404,397,
        1,0,0,0,405,23,1,0,0,0,406,407,3,80,40,0,407,408,5,9,0,0,408,409,
        3,10,5,0,409,509,1,0,0,0,410,411,3,8,4,0,411,412,5,4,0,0,412,413,
        5,3,0,0,413,414,5,92,0,0,414,415,5,5,0,0,415,416,3,80,40,0,416,509,
        1,0,0,0,417,419,3,68,34,0,418,420,5,91,0,0,419,418,1,0,0,0,419,420,
        1,0,0,0,420,421,1,0,0,0,421,423,3,8,4,0,422,424,5,91,0,0,423,422,
        1,0,0,0,423,424,1,0,0,0,424,425,1,0,0,0,425,426,5,5,0,0,426,427,
        3,80,40,0,427,509,1,0,0,0,428,429,5,78,0,0,429,430,5,8,0,0,430,431,
        5,3,0,0,431,432,5,21,0,0,432,433,5,22,0,0,433,434,5,3,0,0,434,435,
        5,2,0,0,435,436,5,23,0,0,436,437,5,3,0,0,437,509,3,106,53,0,438,
        439,5,78,0,0,439,440,5,8,0,0,440,441,5,3,0,0,441,442,5,24,0,0,442,
        443,5,22,0,0,443,444,5,3,0,0,444,445,5,2,0,0,445,446,5,23,0,0,446,
        447,5,3,0,0,447,509,3,106,53,0,448,449,5,78,0,0,449,450,5,8,0,0,
        450,451,5,3,0,0,451,452,5,25,0,0,452,453,5,22,0,0,453,454,5,3,0,
        0,454,455,5,2,0,0,455,456,5,23,0,0,456,457,5,3,0,0,457,509,3,106,
        53,0,458,459,5,78,0,0,459,460,5,8,0,0,460,461,5,3,0,0,461,462,5,
        21,0,0,462,463,5,22,0,0,463,464,5,3,0,0,464,465,5,2,0,0,465,466,
        5,4,0,0,466,467,5,3,0,0,467,509,5,92,0,0,468,469,5,78,0,0,469,470,
        5,8,0,0,470,471,5,3,0,0,471,472,5,24,0,0,472,473,5,22,0,0,473,474,
        5,3,0,0,474,475,5,2,0,0,475,476,5,4,0,0,476,477,5,3,0,0,477,509,
        5,92,0,0,478,479,5,78,0,0,479,480,5,8,0,0,480,481,5,3,0,0,481,482,
        5,25,0,0,482,483,5,22,0,0,483,484,5,3,0,0,484,485,5,2,0,0,485,486,
        5,4,0,0,486,487,5,3,0,0,487,509,5,92,0,0,488,489,5,78,0,0,489,490,
        5,8,0,0,490,491,5,13,0,0,491,492,5,14,0,0,492,493,5,26,0,0,493,494,
        5,4,0,0,494,495,5,3,0,0,495,496,5,92,0,0,496,497,5,16,0,0,497,509,
        3,56,28,0,498,499,5,78,0,0,499,500,5,8,0,0,500,501,5,13,0,0,501,
        502,5,14,0,0,502,503,5,26,0,0,503,504,5,4,0,0,504,505,5,3,0,0,505,
        506,5,92,0,0,506,507,5,16,0,0,507,509,5,57,0,0,508,406,1,0,0,0,508,
        410,1,0,0,0,508,417,1,0,0,0,508,428,1,0,0,0,508,438,1,0,0,0,508,
        448,1,0,0,0,508,458,1,0,0,0,508,468,1,0,0,0,508,478,1,0,0,0,508,
        488,1,0,0,0,508,498,1,0,0,0,509,25,1,0,0,0,510,511,3,104,52,0,511,
        519,5,98,0,0,512,513,5,10,0,0,513,514,5,3,0,0,514,515,3,106,53,0,
        515,516,5,9,0,0,516,517,5,3,0,0,517,518,5,92,0,0,518,520,1,0,0,0,
        519,512,1,0,0,0,519,520,1,0,0,0,520,546,1,0,0,0,521,522,5,27,0,0,
        522,523,5,98,0,0,523,524,5,23,0,0,524,525,5,3,0,0,525,526,3,106,
        53,0,526,527,5,5,0,0,527,528,3,104,52,0,528,530,5,96,0,0,529,531,
        3,30,15,0,530,529,1,0,0,0,530,531,1,0,0,0,531,546,1,0,0,0,532,534,
        3,66,33,0,533,535,5,91,0,0,534,533,1,0,0,0,534,535,1,0,0,0,535,536,
        1,0,0,0,536,537,5,27,0,0,537,539,5,98,0,0,538,540,5,91,0,0,539,538,
        1,0,0,0,539,540,1,0,0,0,540,541,1,0,0,0,541,542,5,5,0,0,542,543,
        3,104,52,0,543,544,5,96,0,0,544,546,1,0,0,0,545,510,1,0,0,0,545,
        521,1,0,0,0,545,532,1,0,0,0,546,27,1,0,0,0,547,548,5,27,0,0,548,
        551,5,98,0,0,549,551,5,28,0,0,550,547,1,0,0,0,550,549,1,0,0,0,551,
        29,1,0,0,0,552,553,5,9,0,0,553,554,5,3,0,0,554,555,5,92,0,0,555,
        31,1,0,0,0,556,557,3,34,17,0,557,33,1,0,0,0,558,559,3,102,51,0,559,
        560,5,98,0,0,560,561,5,10,0,0,561,562,5,3,0,0,562,563,3,106,53,0,
        563,564,5,9,0,0,564,565,5,3,0,0,565,566,3,106,53,0,566,598,1,0,0,
        0,567,568,5,27,0,0,568,569,5,98,0,0,569,570,5,23,0,0,570,571,5,3,
        0,0,571,572,3,106,53,0,572,573,5,5,0,0,573,574,3,36,18,0,574,598,
        1,0,0,0,575,577,3,66,33,0,576,578,5,91,0,0,577,576,1,0,0,0,577,578,
        1,0,0,0,578,579,1,0,0,0,579,580,5,27,0,0,580,582,5,98,0,0,581,583,
        5,91,0,0,582,581,1,0,0,0,582,583,1,0,0,0,583,584,1,0,0,0,584,585,
        5,5,0,0,585,586,3,36,18,0,586,598,1,0,0,0,587,588,3,102,51,0,588,
        589,5,98,0,0,589,590,5,9,0,0,590,591,5,3,0,0,591,593,3,106,53,0,
        592,594,5,91,0,0,593,592,1,0,0,0,593,594,1,0,0,0,594,595,1,0,0,0,
        595,596,3,38,19,0,596,598,1,0,0,0,597,558,1,0,0,0,597,567,1,0,0,
        0,597,575,1,0,0,0,597,587,1,0,0,0,598,35,1,0,0,0,599,600,3,102,51,
        0,600,601,5,96,0,0,601,602,5,9,0,0,602,603,5,3,0,0,603,604,3,106,
        53,0,604,37,1,0,0,0,605,606,5,29,0,0,606,607,7,0,0,0,607,608,5,33,
        0,0,608,609,5,96,0,0,609,610,5,23,0,0,610,611,5,3,0,0,611,612,3,
        106,53,0,612,39,1,0,0,0,613,614,5,27,0,0,614,615,5,98,0,0,615,616,
        5,23,0,0,616,617,5,3,0,0,617,619,3,106,53,0,618,620,5,91,0,0,619,
        618,1,0,0,0,619,620,1,0,0,0,620,621,1,0,0,0,621,622,3,104,52,0,622,
        624,5,96,0,0,623,625,5,91,0,0,624,623,1,0,0,0,624,625,1,0,0,0,625,
        626,1,0,0,0,626,627,5,5,0,0,627,628,3,68,34,0,628,648,1,0,0,0,629,
        630,5,27,0,0,630,631,5,98,0,0,631,632,5,23,0,0,632,633,5,3,0,0,633,
        635,3,106,53,0,634,636,5,91,0,0,635,634,1,0,0,0,635,636,1,0,0,0,
        636,637,1,0,0,0,637,638,3,104,52,0,638,640,5,96,0,0,639,641,5,91,
        0,0,640,639,1,0,0,0,640,641,1,0,0,0,641,642,1,0,0,0,642,643,5,5,
        0,0,643,644,3,102,51,0,644,645,5,96,0,0,645,646,5,34,0,0,646,648,
        1,0,0,0,647,613,1,0,0,0,647,629,1,0,0,0,648,41,1,0,0,0,649,650,3,
        104,52,0,650,651,5,98,0,0,651,688,1,0,0,0,652,653,3,88,44,0,653,
        654,5,8,0,0,654,655,5,3,0,0,655,656,3,116,58,0,656,688,1,0,0,0,657,
        658,3,90,45,0,658,659,3,116,58,0,659,660,5,9,0,0,660,661,3,60,30,
        0,661,688,1,0,0,0,662,663,3,102,51,0,663,664,5,98,0,0,664,665,5,
        9,0,0,665,666,5,3,0,0,666,667,3,106,53,0,667,688,1,0,0,0,668,669,
        5,27,0,0,669,670,3,44,22,0,670,671,5,5,0,0,671,672,3,102,51,0,672,
        673,5,96,0,0,673,688,1,0,0,0,674,676,3,66,33,0,675,677,5,91,0,0,
        676,675,1,0,0,0,676,677,1,0,0,0,677,678,1,0,0,0,678,679,5,27,0,0,
        679,681,3,44,22,0,680,682,5,91,0,0,681,680,1,0,0,0,681,682,1,0,0,
        0,682,683,1,0,0,0,683,684,5,5,0,0,684,685,3,102,51,0,685,686,5,96,
        0,0,686,688,1,0,0,0,687,649,1,0,0,0,687,652,1,0,0,0,687,657,1,0,
        0,0,687,662,1,0,0,0,687,668,1,0,0,0,687,674,1,0,0,0,688,43,1,0,0,
        0,689,690,5,98,0,0,690,45,1,0,0,0,691,692,5,66,0,0,692,693,5,35,
        0,0,693,694,5,9,0,0,694,744,3,52,26,0,695,696,5,67,0,0,696,697,5,
        98,0,0,697,698,5,23,0,0,698,699,5,3,0,0,699,700,3,58,29,0,700,701,
        5,5,0,0,701,702,5,36,0,0,702,703,5,96,0,0,703,704,5,9,0,0,704,705,
        3,52,26,0,705,744,1,0,0,0,706,707,5,67,0,0,707,708,5,98,0,0,708,
        709,5,23,0,0,709,710,5,3,0,0,710,711,3,106,53,0,711,712,5,5,0,0,
        712,713,5,37,0,0,713,714,5,96,0,0,714,715,5,9,0,0,715,716,5,38,0,
        0,716,744,1,0,0,0,717,718,5,67,0,0,718,719,5,98,0,0,719,720,5,23,
        0,0,720,721,5,3,0,0,721,722,3,106,53,0,722,723,5,5,0,0,723,724,5,
        36,0,0,724,725,5,96,0,0,725,726,5,9,0,0,726,727,5,98,0,0,727,728,
        5,23,0,0,728,729,5,3,0,0,729,730,3,106,53,0,730,744,1,0,0,0,731,
        732,5,67,0,0,732,733,5,98,0,0,733,734,5,23,0,0,734,735,5,3,0,0,735,
        736,3,106,53,0,736,737,5,5,0,0,737,738,3,102,51,0,738,739,5,96,0,
        0,739,740,5,9,0,0,740,741,5,96,0,0,741,742,5,62,0,0,742,744,1,0,
        0,0,743,691,1,0,0,0,743,695,1,0,0,0,743,706,1,0,0,0,743,717,1,0,
        0,0,743,731,1,0,0,0,744,47,1,0,0,0,745,750,5,39,0,0,746,747,5,40,
        0,0,747,748,5,3,0,0,748,750,3,50,25,0,749,745,1,0,0,0,749,746,1,
        0,0,0,750,49,1,0,0,0,751,752,7,1,0,0,752,51,1,0,0,0,753,754,3,48,
        24,0,754,755,5,4,0,0,755,756,5,3,0,0,756,757,5,92,0,0,757,53,1,0,
        0,0,758,759,7,2,0,0,759,55,1,0,0,0,760,761,7,3,0,0,761,57,1,0,0,
        0,762,763,5,63,0,0,763,767,5,44,0,0,764,765,5,63,0,0,765,767,5,45,
        0,0,766,762,1,0,0,0,766,764,1,0,0,0,767,59,1,0,0,0,768,771,5,8,0,
        0,769,771,3,10,5,0,770,768,1,0,0,0,770,769,1,0,0,0,771,61,1,0,0,
        0,772,773,3,86,43,0,773,774,5,6,0,0,774,775,5,7,0,0,775,776,5,3,
        0,0,776,777,3,108,54,0,777,63,1,0,0,0,778,779,3,96,48,0,779,780,
        5,9,0,0,780,781,5,3,0,0,781,782,3,108,54,0,782,65,1,0,0,0,783,784,
        3,96,48,0,784,785,5,9,0,0,785,786,5,3,0,0,786,787,3,106,53,0,787,
        67,1,0,0,0,788,789,3,96,48,0,789,790,5,9,0,0,790,791,5,3,0,0,791,
        792,5,92,0,0,792,69,1,0,0,0,793,794,3,92,46,0,794,795,5,3,0,0,795,
        796,5,95,0,0,796,71,1,0,0,0,797,798,3,70,35,0,798,799,5,10,0,0,799,
        800,5,3,0,0,800,801,3,108,54,0,801,73,1,0,0,0,802,803,3,90,45,0,
        803,804,5,6,0,0,804,805,5,9,0,0,805,806,5,8,0,0,806,75,1,0,0,0,807,
        808,3,90,45,0,808,809,5,6,0,0,809,810,5,9,0,0,810,811,5,98,0,0,811,
        77,1,0,0,0,812,813,3,90,45,0,813,814,5,6,0,0,814,815,5,9,0,0,815,
        816,5,98,0,0,816,817,5,23,0,0,817,818,5,3,0,0,818,819,3,106,53,0,
        819,79,1,0,0,0,820,823,5,69,0,0,821,823,3,82,41,0,822,820,1,0,0,
        0,822,821,1,0,0,0,823,81,1,0,0,0,824,825,3,94,47,0,825,826,5,70,
        0,0,826,83,1,0,0,0,827,828,7,4,0,0,828,85,1,0,0,0,829,830,7,5,0,
        0,830,87,1,0,0,0,831,832,7,6,0,0,832,89,1,0,0,0,833,836,3,88,44,
        0,834,836,5,46,0,0,835,833,1,0,0,0,835,834,1,0,0,0,836,91,1,0,0,
        0,837,838,7,7,0,0,838,93,1,0,0,0,839,840,7,8,0,0,840,95,1,0,0,0,
        841,842,7,9,0,0,842,97,1,0,0,0,843,846,3,96,48,0,844,846,5,82,0,
        0,845,843,1,0,0,0,845,844,1,0,0,0,846,99,1,0,0,0,847,848,7,10,0,
        0,848,101,1,0,0,0,849,850,7,11,0,0,850,103,1,0,0,0,851,852,5,89,
        0,0,852,105,1,0,0,0,853,854,5,93,0,0,854,107,1,0,0,0,855,856,5,93,
        0,0,856,109,1,0,0,0,857,858,5,95,0,0,858,111,1,0,0,0,859,860,5,95,
        0,0,860,113,1,0,0,0,861,862,5,94,0,0,862,115,1,0,0,0,863,864,5,94,
        0,0,864,117,1,0,0,0,41,121,125,128,141,157,204,214,220,262,309,315,
        317,404,419,423,508,519,530,534,539,545,550,577,582,593,597,619,
        624,635,640,647,676,681,687,743,749,766,770,822,835,845
    ]

class gpsrParser ( Parser ):

    grammarFileName = "gpsr.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'a'", "'person'", "'the'", "'in'", "'and'", 
                     "'it'", "'on'", "'me'", "'to'", "'from'", "'my'", "'object'", 
                     "'how'", "'many'", "'there'", "'are'", "'what's'", 
                     "'which'", "'three'", "'objects'", "'name'", "'of'", 
                     "'at'", "'gender'", "'Pose'", "'people'", "'meet'", 
                     "'find a person'", "'you'", "'may'", "'can'", "'will'", 
                     "'find'", "'back'", "'drinks'", "'introduce'", "'ask'", 
                     "'leave'", "'everyone'", "'all'", "'guests'", "'elders'", 
                     "'children'", "'entrance'", "'door'", "'diliver'", 
                     "'man'", "'woman'", "'boy'", "'girl'", "'men'", "'women'", 
                     "'boys'", "'girls'", "'male'", "'female'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'answer a question'", 
                     "<INVALID>", "'bring'", "'take'", "'put'", "'place'", 
                     "'get'", "'grasp'", "'pick up'", "'tell'", "'say'", 
                     "'go'", "'navigate'", "'enter'", "'locate'", "'look_for'", 
                     "'guide'", "'escort'", "'lead'", "'accompany'", "'follow'", 
                     "<INVALID>", "','" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "MAN", "WOMAN", 
                      "BOY", "GIRL", "MEN", "WOMEN", "BOYS", "GIRLS", "MALE", 
                      "FEMALE", "Pose", "Abspos", "Relpos", "Garbage", "Luggage", 
                      "Taxi", "Doorpos", "Vbtakeout", "Vbcleanup", "Vbserve", 
                      "Vbmeet", "Oprop", "Answer", "Whattosay", "BRING", 
                      "TAKE", "PUT", "PLACE", "GET", "GRASP", "PICK_UP", 
                      "TELL", "SAY", "GO", "NAVIGATE", "ENTER", "LOCATE", 
                      "LOOK_FOR", "GUIDE", "ESCORT", "LEAD", "ACCOMPANY", 
                      "FOLLOW", "Polite", "Comma", "Room", "Location_except_room", 
                      "Category", "Object", "Pron", "Gesture", "Name" ]

    RULE_instruction = 0
    RULE_mainSentence = 1
    RULE_pmain = 2
    RULE_main = 3
    RULE_findp = 4
    RULE_whoWhere = 5
    RULE_man = 6
    RULE_deliver = 7
    RULE_complexman = 8
    RULE_cmancmd = 9
    RULE_cmanobjsrc = 10
    RULE_fndobj = 11
    RULE_fndppl = 12
    RULE_follow = 13
    RULE_fllmeet = 14
    RULE_fllwdest = 15
    RULE_guide = 16
    RULE_gdcmd = 17
    RULE_guideto = 18
    RULE_gdwhere = 19
    RULE_followout = 20
    RULE_incomplete = 21
    RULE_inguidewho = 22
    RULE_partyhost = 23
    RULE_phpeople = 24
    RULE_peopletype = 25
    RULE_phpeopler = 26
    RULE_pgenders = 27
    RULE_pgenderp = 28
    RULE_door = 29
    RULE_someone = 30
    RULE_place = 31
    RULE_goplace = 32
    RULE_gobeacon = 33
    RULE_goroom = 34
    RULE_take = 35
    RULE_takefrom = 36
    RULE_delivme = 37
    RULE_delivto = 38
    RULE_delivat = 39
    RULE_talk = 40
    RULE_speak = 41
    RULE_vbbtake = 42
    RULE_vbplace = 43
    RULE_vbbring = 44
    RULE_vbdeliver = 45
    RULE_vbtake = 46
    RULE_vbspeak = 47
    RULE_vbgopl = 48
    RULE_vbgor = 49
    RULE_vbfind = 50
    RULE_vbguide = 51
    RULE_vbfollow = 52
    RULE_beacon = 53
    RULE_placement = 54
    RULE_object_alike = 55
    RULE_object_known = 56
    RULE_object_alike_obfuscated = 57
    RULE_object_obfuscated = 58

    ruleNames =  [ "instruction", "mainSentence", "pmain", "main", "findp", 
                   "whoWhere", "man", "deliver", "complexman", "cmancmd", 
                   "cmanobjsrc", "fndobj", "fndppl", "follow", "fllmeet", 
                   "fllwdest", "guide", "gdcmd", "guideto", "gdwhere", "followout", 
                   "incomplete", "inguidewho", "partyhost", "phpeople", 
                   "peopletype", "phpeopler", "pgenders", "pgenderp", "door", 
                   "someone", "place", "goplace", "gobeacon", "goroom", 
                   "take", "takefrom", "delivme", "delivto", "delivat", 
                   "talk", "speak", "vbbtake", "vbplace", "vbbring", "vbdeliver", 
                   "vbtake", "vbspeak", "vbgopl", "vbgor", "vbfind", "vbguide", 
                   "vbfollow", "beacon", "placement", "object_alike", "object_known", 
                   "object_alike_obfuscated", "object_obfuscated" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    MAN=47
    WOMAN=48
    BOY=49
    GIRL=50
    MEN=51
    WOMEN=52
    BOYS=53
    GIRLS=54
    MALE=55
    FEMALE=56
    Pose=57
    Abspos=58
    Relpos=59
    Garbage=60
    Luggage=61
    Taxi=62
    Doorpos=63
    Vbtakeout=64
    Vbcleanup=65
    Vbserve=66
    Vbmeet=67
    Oprop=68
    Answer=69
    Whattosay=70
    BRING=71
    TAKE=72
    PUT=73
    PLACE=74
    GET=75
    GRASP=76
    PICK_UP=77
    TELL=78
    SAY=79
    GO=80
    NAVIGATE=81
    ENTER=82
    LOCATE=83
    LOOK_FOR=84
    GUIDE=85
    ESCORT=86
    LEAD=87
    ACCOMPANY=88
    FOLLOW=89
    Polite=90
    Comma=91
    Room=92
    Location_except_room=93
    Category=94
    Object=95
    Pron=96
    Gesture=97
    Name=98

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class InstructionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mainSentence(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(gpsrParser.MainSentenceContext)
            else:
                return self.getTypedRuleContext(gpsrParser.MainSentenceContext,i)


        def getRuleIndex(self):
            return gpsrParser.RULE_instruction

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInstruction" ):
                return visitor.visitInstruction(self)
            else:
                return visitor.visitChildren(self)




    def instruction(self):

        localctx = gpsrParser.InstructionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_instruction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 119 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 118
                self.mainSentence()
                self.state = 121 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 27)) & ~0x3f) == 0 and ((1 << (_la - 27)) & -36039929573670847) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MainSentenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pmain(self):
            return self.getTypedRuleContext(gpsrParser.PmainContext,0)


        def main(self):
            return self.getTypedRuleContext(gpsrParser.MainContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_mainSentence

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMainSentence" ):
                return visitor.visitMainSentence(self)
            else:
                return visitor.visitChildren(self)




    def mainSentence(self):

        localctx = gpsrParser.MainSentenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_mainSentence)
        try:
            self.state = 125
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 123
                self.pmain()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 124
                self.main()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PmainContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def main(self):
            return self.getTypedRuleContext(gpsrParser.MainContext,0)


        def Polite(self):
            return self.getToken(gpsrParser.Polite, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_pmain

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPmain" ):
                return visitor.visitPmain(self)
            else:
                return visitor.visitChildren(self)




    def pmain(self):

        localctx = gpsrParser.PmainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_pmain)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 128
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==90:
                self.state = 127
                self.match(gpsrParser.Polite)


            self.state = 130
            self.main()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MainContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fndppl(self):
            return self.getTypedRuleContext(gpsrParser.FndpplContext,0)


        def fndobj(self):
            return self.getTypedRuleContext(gpsrParser.FndobjContext,0)


        def guide(self):
            return self.getTypedRuleContext(gpsrParser.GuideContext,0)


        def follow(self):
            return self.getTypedRuleContext(gpsrParser.FollowContext,0)


        def followout(self):
            return self.getTypedRuleContext(gpsrParser.FollowoutContext,0)


        def incomplete(self):
            return self.getTypedRuleContext(gpsrParser.IncompleteContext,0)


        def man(self):
            return self.getTypedRuleContext(gpsrParser.ManContext,0)


        def complexman(self):
            return self.getTypedRuleContext(gpsrParser.ComplexmanContext,0)


        def partyhost(self):
            return self.getTypedRuleContext(gpsrParser.PartyhostContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_main

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMain" ):
                return visitor.visitMain(self)
            else:
                return visitor.visitChildren(self)




    def main(self):

        localctx = gpsrParser.MainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_main)
        try:
            self.state = 141
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 132
                self.fndppl()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 133
                self.fndobj()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 134
                self.guide()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 135
                self.follow()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 136
                self.followout()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 137
                self.incomplete()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 138
                self.man()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 139
                self.complexman()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 140
                self.partyhost()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FindpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_findp

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Find_PoseContext(FindpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FindpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def vbfind(self):
            return self.getTypedRuleContext(gpsrParser.VbfindContext,0)

        def Pose(self):
            return self.getToken(gpsrParser.Pose, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFind_Pose" ):
                return visitor.visitFind_Pose(self)
            else:
                return visitor.visitChildren(self)


    class Find_genderContext(FindpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FindpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def vbfind(self):
            return self.getTypedRuleContext(gpsrParser.VbfindContext,0)

        def pgenders(self):
            return self.getTypedRuleContext(gpsrParser.PgendersContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFind_gender" ):
                return visitor.visitFind_gender(self)
            else:
                return visitor.visitChildren(self)


    class Find_gestureContext(FindpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FindpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def vbfind(self):
            return self.getTypedRuleContext(gpsrParser.VbfindContext,0)

        def Gesture(self):
            return self.getToken(gpsrParser.Gesture, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFind_gesture" ):
                return visitor.visitFind_gesture(self)
            else:
                return visitor.visitChildren(self)



    def findp(self):

        localctx = gpsrParser.FindpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_findp)
        try:
            self.state = 157
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                localctx = gpsrParser.Find_genderContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 143
                self.vbfind()
                self.state = 144
                self.match(gpsrParser.T__0)
                self.state = 145
                self.pgenders()
                pass

            elif la_ == 2:
                localctx = gpsrParser.Find_gestureContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 147
                self.vbfind()
                self.state = 148
                self.match(gpsrParser.T__0)
                self.state = 149
                self.match(gpsrParser.T__1)
                self.state = 150
                self.match(gpsrParser.Gesture)
                pass

            elif la_ == 3:
                localctx = gpsrParser.Find_PoseContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 152
                self.vbfind()
                self.state = 153
                self.match(gpsrParser.T__0)
                self.state = 154
                self.match(gpsrParser.T__1)
                self.state = 155
                self.match(gpsrParser.Pose)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhoWhereContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Gesture(self):
            return self.getToken(gpsrParser.Gesture, 0)

        def Room(self):
            return self.getToken(gpsrParser.Room, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_whoWhere

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhoWhere" ):
                return visitor.visitWhoWhere(self)
            else:
                return visitor.visitChildren(self)




    def whoWhere(self):

        localctx = gpsrParser.WhoWhereContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_whoWhere)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 159
            self.match(gpsrParser.T__2)
            self.state = 160
            self.match(gpsrParser.T__1)
            self.state = 161
            self.match(gpsrParser.Gesture)
            self.state = 162
            self.match(gpsrParser.T__3)
            self.state = 163
            self.match(gpsrParser.T__2)
            self.state = 164
            self.match(gpsrParser.Room)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ManContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def deliver(self):
            return self.getTypedRuleContext(gpsrParser.DeliverContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_man

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMan" ):
                return visitor.visitMan(self)
            else:
                return visitor.visitChildren(self)




    def man(self):

        localctx = gpsrParser.ManContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_man)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 166
            self.deliver()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeliverContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def take(self):
            return self.getTypedRuleContext(gpsrParser.TakeContext,0)


        def vbplace(self):
            return self.getTypedRuleContext(gpsrParser.VbplaceContext,0)


        def placement(self):
            return self.getTypedRuleContext(gpsrParser.PlacementContext,0)


        def object_known(self):
            return self.getTypedRuleContext(gpsrParser.Object_knownContext,0)


        def vbbring(self):
            return self.getTypedRuleContext(gpsrParser.VbbringContext,0)


        def vbdeliver(self):
            return self.getTypedRuleContext(gpsrParser.VbdeliverContext,0)


        def someone(self):
            return self.getTypedRuleContext(gpsrParser.SomeoneContext,0)


        def takefrom(self):
            return self.getTypedRuleContext(gpsrParser.TakefromContext,0)


        def goplace(self):
            return self.getTypedRuleContext(gpsrParser.GoplaceContext,0)


        def vbfind(self):
            return self.getTypedRuleContext(gpsrParser.VbfindContext,0)


        def Object(self):
            return self.getToken(gpsrParser.Object, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(gpsrParser.Comma)
            else:
                return self.getToken(gpsrParser.Comma, i)

        def place(self):
            return self.getTypedRuleContext(gpsrParser.PlaceContext,0)


        def vbbtake(self):
            return self.getTypedRuleContext(gpsrParser.VbbtakeContext,0)


        def object_alike(self):
            return self.getTypedRuleContext(gpsrParser.Object_alikeContext,0)


        def Room(self):
            return self.getToken(gpsrParser.Room, 0)

        def delivme(self):
            return self.getTypedRuleContext(gpsrParser.DelivmeContext,0)


        def delivat(self):
            return self.getTypedRuleContext(gpsrParser.DelivatContext,0)


        def Luggage(self):
            return self.getToken(gpsrParser.Luggage, 0)

        def Taxi(self):
            return self.getToken(gpsrParser.Taxi, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_deliver

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeliver" ):
                return visitor.visitDeliver(self)
            else:
                return visitor.visitChildren(self)




    def deliver(self):

        localctx = gpsrParser.DeliverContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_deliver)
        self._la = 0 # Token type
        try:
            self.state = 262
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 168
                self.take()
                self.state = 169
                self.match(gpsrParser.T__4)
                self.state = 170
                self.vbplace()
                self.state = 171
                self.match(gpsrParser.T__5)
                self.state = 172
                self.match(gpsrParser.T__6)
                self.state = 173
                self.match(gpsrParser.T__2)
                self.state = 174
                self.placement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 176
                self.vbplace()
                self.state = 177
                self.match(gpsrParser.T__2)
                self.state = 178
                self.object_known()
                self.state = 179
                self.match(gpsrParser.T__6)
                self.state = 180
                self.match(gpsrParser.T__2)
                self.state = 181
                self.placement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 183
                self.vbbring()
                self.state = 184
                self.match(gpsrParser.T__7)
                self.state = 185
                self.match(gpsrParser.T__2)
                self.state = 186
                self.object_known()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 188
                self.vbdeliver()
                self.state = 189
                self.match(gpsrParser.T__2)
                self.state = 190
                self.object_known()
                self.state = 191
                self.match(gpsrParser.T__8)
                self.state = 192
                self.someone()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 194
                self.takefrom()
                self.state = 195
                self.match(gpsrParser.T__4)
                self.state = 196
                self.vbplace()
                self.state = 197
                self.match(gpsrParser.T__5)
                self.state = 198
                self.match(gpsrParser.T__6)
                self.state = 199
                self.match(gpsrParser.T__2)
                self.state = 200
                self.placement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 202
                self.goplace()
                self.state = 204
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==91:
                    self.state = 203
                    self.match(gpsrParser.Comma)


                self.state = 206
                self.vbfind()
                self.state = 207
                self.match(gpsrParser.T__2)
                self.state = 208
                self.match(gpsrParser.Object)
                self.state = 209
                self.match(gpsrParser.T__8)
                self.state = 210
                self.someone()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 212
                self.goplace()
                self.state = 214
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==91:
                    self.state = 213
                    self.match(gpsrParser.Comma)


                self.state = 216
                self.vbfind()
                self.state = 217
                self.match(gpsrParser.T__2)
                self.state = 218
                self.match(gpsrParser.Object)
                self.state = 220
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==91:
                    self.state = 219
                    self.match(gpsrParser.Comma)


                self.state = 222
                self.match(gpsrParser.T__4)
                self.state = 223
                self.place()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 225
                self.vbbtake()
                self.state = 226
                self.match(gpsrParser.T__2)
                self.state = 227
                self.object_alike()
                self.state = 228
                self.match(gpsrParser.T__9)
                self.state = 229
                self.match(gpsrParser.T__2)
                self.state = 230
                self.match(gpsrParser.Room)
                self.state = 231
                self.match(gpsrParser.T__8)
                self.state = 232
                self.match(gpsrParser.T__2)
                self.state = 233
                self.placement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 235
                self.vbbring()
                self.state = 236
                self.match(gpsrParser.T__7)
                self.state = 237
                self.match(gpsrParser.T__2)
                self.state = 238
                self.object_alike()
                self.state = 239
                self.match(gpsrParser.T__9)
                self.state = 240
                self.match(gpsrParser.T__2)
                self.state = 241
                self.placement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 243
                self.takefrom()
                self.state = 244
                self.match(gpsrParser.T__4)
                self.state = 245
                self.delivme()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 247
                self.takefrom()
                self.state = 248
                self.match(gpsrParser.T__4)
                self.state = 249
                self.delivat()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 251
                self.takefrom()
                self.state = 252
                self.match(gpsrParser.T__4)
                self.state = 253
                self.place()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 255
                self.vbbtake()
                self.state = 256
                self.match(gpsrParser.T__10)
                self.state = 257
                self.match(gpsrParser.Luggage)
                self.state = 258
                self.match(gpsrParser.T__8)
                self.state = 259
                self.match(gpsrParser.T__2)
                self.state = 260
                self.match(gpsrParser.Taxi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComplexmanContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cmancmd(self):
            return self.getTypedRuleContext(gpsrParser.CmancmdContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_complexman

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComplexman" ):
                return visitor.visitComplexman(self)
            else:
                return visitor.visitChildren(self)




    def complexman(self):

        localctx = gpsrParser.ComplexmanContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_complexman)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 264
            self.cmancmd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CmancmdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbbtake(self):
            return self.getTypedRuleContext(gpsrParser.VbbtakeContext,0)


        def object_known(self):
            return self.getTypedRuleContext(gpsrParser.Object_knownContext,0)


        def placement(self):
            return self.getTypedRuleContext(gpsrParser.PlacementContext,0)


        def vbbring(self):
            return self.getTypedRuleContext(gpsrParser.VbbringContext,0)


        def Abspos(self):
            return self.getToken(gpsrParser.Abspos, 0)

        def cmanobjsrc(self):
            return self.getTypedRuleContext(gpsrParser.CmanobjsrcContext,0)


        def Relpos(self):
            return self.getToken(gpsrParser.Relpos, 0)

        def Object(self):
            return self.getToken(gpsrParser.Object, 0)

        def Oprop(self):
            return self.getToken(gpsrParser.Oprop, 0)

        def Category(self):
            return self.getToken(gpsrParser.Category, 0)

        def Vbcleanup(self):
            return self.getToken(gpsrParser.Vbcleanup, 0)

        def Room(self, i:int=None):
            if i is None:
                return self.getTokens(gpsrParser.Room)
            else:
                return self.getToken(gpsrParser.Room, i)

        def Vbtakeout(self):
            return self.getToken(gpsrParser.Vbtakeout, 0)

        def Garbage(self):
            return self.getToken(gpsrParser.Garbage, 0)

        def beacon(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(gpsrParser.BeaconContext)
            else:
                return self.getTypedRuleContext(gpsrParser.BeaconContext,i)


        def getRuleIndex(self):
            return gpsrParser.RULE_cmancmd

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCmancmd" ):
                return visitor.visitCmancmd(self)
            else:
                return visitor.visitChildren(self)




    def cmancmd(self):

        localctx = gpsrParser.CmancmdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_cmancmd)
        try:
            self.state = 317
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 266
                self.vbbtake()
                self.state = 267
                self.match(gpsrParser.T__2)
                self.state = 268
                self.object_known()
                self.state = 269
                self.match(gpsrParser.T__8)
                self.state = 270
                self.match(gpsrParser.T__2)
                self.state = 271
                self.placement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 273
                self.vbbring()
                self.state = 274
                self.match(gpsrParser.T__7)
                self.state = 275
                self.match(gpsrParser.T__2)
                self.state = 276
                self.match(gpsrParser.Abspos)
                self.state = 277
                self.match(gpsrParser.T__11)
                self.state = 278
                self.cmanobjsrc()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 280
                self.vbbring()
                self.state = 281
                self.match(gpsrParser.T__7)
                self.state = 282
                self.match(gpsrParser.T__2)
                self.state = 283
                self.match(gpsrParser.T__11)
                self.state = 284
                self.match(gpsrParser.Relpos)
                self.state = 285
                self.match(gpsrParser.T__2)
                self.state = 286
                self.match(gpsrParser.Object)
                self.state = 287
                self.cmanobjsrc()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 289
                self.vbbring()
                self.state = 290
                self.match(gpsrParser.T__7)
                self.state = 291
                self.match(gpsrParser.T__2)
                self.state = 292
                self.match(gpsrParser.Oprop)
                self.state = 293
                self.match(gpsrParser.Category)
                self.state = 294
                self.cmanobjsrc()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 296
                self.match(gpsrParser.Vbcleanup)
                self.state = 297
                self.match(gpsrParser.T__2)
                self.state = 298
                self.match(gpsrParser.Room)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 299
                self.match(gpsrParser.Vbtakeout)
                self.state = 300
                self.match(gpsrParser.T__2)
                self.state = 301
                self.match(gpsrParser.Garbage)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 302
                self.vbbring()
                self.state = 303
                self.match(gpsrParser.T__2)
                self.state = 304
                self.match(gpsrParser.Object)
                self.state = 305
                self.match(gpsrParser.T__9)
                self.state = 306
                self.match(gpsrParser.T__2)
                self.state = 309
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [92]:
                    self.state = 307
                    self.match(gpsrParser.Room)
                    pass
                elif token in [93]:
                    self.state = 308
                    self.beacon()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 311
                self.match(gpsrParser.T__8)
                self.state = 312
                self.match(gpsrParser.T__2)
                self.state = 315
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [92]:
                    self.state = 313
                    self.match(gpsrParser.Room)
                    pass
                elif token in [93]:
                    self.state = 314
                    self.beacon()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CmanobjsrcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def placement(self):
            return self.getTypedRuleContext(gpsrParser.PlacementContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_cmanobjsrc

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCmanobjsrc" ):
                return visitor.visitCmanobjsrc(self)
            else:
                return visitor.visitChildren(self)




    def cmanobjsrc(self):

        localctx = gpsrParser.CmanobjsrcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_cmanobjsrc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 319
            self.match(gpsrParser.T__9)
            self.state = 320
            self.match(gpsrParser.T__2)
            self.state = 321
            self.placement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FndobjContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TELL(self):
            return self.getToken(gpsrParser.TELL, 0)

        def Object(self):
            return self.getToken(gpsrParser.Object, 0)

        def placement(self):
            return self.getTypedRuleContext(gpsrParser.PlacementContext,0)


        def vbfind(self):
            return self.getTypedRuleContext(gpsrParser.VbfindContext,0)


        def Room(self):
            return self.getToken(gpsrParser.Room, 0)

        def Category(self):
            return self.getToken(gpsrParser.Category, 0)

        def Oprop(self):
            return self.getToken(gpsrParser.Oprop, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_fndobj

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFndobj" ):
                return visitor.visitFndobj(self)
            else:
                return visitor.visitChildren(self)




    def fndobj(self):

        localctx = gpsrParser.FndobjContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_fndobj)
        try:
            self.state = 404
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 323
                self.match(gpsrParser.TELL)
                self.state = 324
                self.match(gpsrParser.T__7)
                self.state = 325
                self.match(gpsrParser.T__12)
                self.state = 326
                self.match(gpsrParser.T__13)
                self.state = 327
                self.match(gpsrParser.Object)
                self.state = 328
                self.match(gpsrParser.T__14)
                self.state = 329
                self.match(gpsrParser.T__15)
                self.state = 330
                self.match(gpsrParser.T__6)
                self.state = 331
                self.match(gpsrParser.T__2)
                self.state = 332
                self.placement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 333
                self.vbfind()
                self.state = 334
                self.match(gpsrParser.T__2)
                self.state = 335
                self.match(gpsrParser.Object)
                self.state = 336
                self.match(gpsrParser.T__3)
                self.state = 337
                self.match(gpsrParser.T__2)
                self.state = 338
                self.match(gpsrParser.Room)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 340
                self.match(gpsrParser.TELL)
                self.state = 341
                self.match(gpsrParser.T__7)
                self.state = 342
                self.match(gpsrParser.T__12)
                self.state = 343
                self.match(gpsrParser.T__13)
                self.state = 344
                self.match(gpsrParser.Category)
                self.state = 345
                self.match(gpsrParser.T__14)
                self.state = 346
                self.match(gpsrParser.T__15)
                self.state = 347
                self.match(gpsrParser.T__6)
                self.state = 348
                self.match(gpsrParser.T__2)
                self.state = 349
                self.placement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 350
                self.match(gpsrParser.TELL)
                self.state = 351
                self.match(gpsrParser.T__7)
                self.state = 352
                self.match(gpsrParser.T__16)
                self.state = 353
                self.match(gpsrParser.T__2)
                self.state = 354
                self.match(gpsrParser.Oprop)
                self.state = 355
                self.match(gpsrParser.T__11)
                self.state = 356
                self.match(gpsrParser.T__6)
                self.state = 357
                self.match(gpsrParser.T__2)
                self.state = 358
                self.placement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 359
                self.match(gpsrParser.TELL)
                self.state = 360
                self.match(gpsrParser.T__7)
                self.state = 361
                self.match(gpsrParser.T__16)
                self.state = 362
                self.match(gpsrParser.T__2)
                self.state = 363
                self.match(gpsrParser.Oprop)
                self.state = 364
                self.match(gpsrParser.Category)
                self.state = 365
                self.match(gpsrParser.T__6)
                self.state = 366
                self.match(gpsrParser.T__2)
                self.state = 367
                self.placement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 368
                self.vbfind()
                self.state = 369
                self.match(gpsrParser.T__2)
                self.state = 370
                self.match(gpsrParser.Category)
                self.state = 371
                self.match(gpsrParser.T__3)
                self.state = 372
                self.match(gpsrParser.T__2)
                self.state = 373
                self.match(gpsrParser.Room)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 375
                self.match(gpsrParser.TELL)
                self.state = 376
                self.match(gpsrParser.T__7)
                self.state = 377
                self.match(gpsrParser.T__17)
                self.state = 378
                self.match(gpsrParser.T__15)
                self.state = 379
                self.match(gpsrParser.T__2)
                self.state = 380
                self.match(gpsrParser.T__18)
                self.state = 381
                self.match(gpsrParser.Oprop)
                self.state = 382
                self.match(gpsrParser.T__19)
                self.state = 383
                self.match(gpsrParser.T__6)
                self.state = 384
                self.match(gpsrParser.T__2)
                self.state = 385
                self.placement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 386
                self.match(gpsrParser.TELL)
                self.state = 387
                self.match(gpsrParser.T__7)
                self.state = 388
                self.match(gpsrParser.T__17)
                self.state = 389
                self.match(gpsrParser.T__15)
                self.state = 390
                self.match(gpsrParser.T__2)
                self.state = 391
                self.match(gpsrParser.T__18)
                self.state = 392
                self.match(gpsrParser.Oprop)
                self.state = 393
                self.match(gpsrParser.Category)
                self.state = 394
                self.match(gpsrParser.T__6)
                self.state = 395
                self.match(gpsrParser.T__2)
                self.state = 396
                self.placement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 397
                self.vbfind()
                self.state = 398
                self.match(gpsrParser.T__18)
                self.state = 399
                self.match(gpsrParser.Category)
                self.state = 400
                self.match(gpsrParser.T__3)
                self.state = 401
                self.match(gpsrParser.T__2)
                self.state = 402
                self.match(gpsrParser.Room)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FndpplContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_fndppl

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Tell_Pose_roomContext(FndpplContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FndpplContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TELL(self):
            return self.getToken(gpsrParser.TELL, 0)
        def Room(self):
            return self.getToken(gpsrParser.Room, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTell_Pose_room" ):
                return visitor.visitTell_Pose_room(self)
            else:
                return visitor.visitChildren(self)


    class Tell_gender_numberContext(FndpplContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FndpplContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TELL(self):
            return self.getToken(gpsrParser.TELL, 0)
        def Room(self):
            return self.getToken(gpsrParser.Room, 0)
        def pgenderp(self):
            return self.getTypedRuleContext(gpsrParser.PgenderpContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTell_gender_number" ):
                return visitor.visitTell_gender_number(self)
            else:
                return visitor.visitChildren(self)


    class Tell_name_beaconContext(FndpplContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FndpplContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TELL(self):
            return self.getToken(gpsrParser.TELL, 0)
        def beacon(self):
            return self.getTypedRuleContext(gpsrParser.BeaconContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTell_name_beacon" ):
                return visitor.visitTell_name_beacon(self)
            else:
                return visitor.visitChildren(self)


    class Tell_gender_beaconContext(FndpplContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FndpplContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TELL(self):
            return self.getToken(gpsrParser.TELL, 0)
        def beacon(self):
            return self.getTypedRuleContext(gpsrParser.BeaconContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTell_gender_beacon" ):
                return visitor.visitTell_gender_beacon(self)
            else:
                return visitor.visitChildren(self)


    class Tell_Pose_numberContext(FndpplContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FndpplContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TELL(self):
            return self.getToken(gpsrParser.TELL, 0)
        def Room(self):
            return self.getToken(gpsrParser.Room, 0)
        def Pose(self):
            return self.getToken(gpsrParser.Pose, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTell_Pose_number" ):
                return visitor.visitTell_Pose_number(self)
            else:
                return visitor.visitChildren(self)


    class Find_talk_in_roomContext(FndpplContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FndpplContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def findp(self):
            return self.getTypedRuleContext(gpsrParser.FindpContext,0)

        def Room(self):
            return self.getToken(gpsrParser.Room, 0)
        def talk(self):
            return self.getTypedRuleContext(gpsrParser.TalkContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFind_talk_in_room" ):
                return visitor.visitFind_talk_in_room(self)
            else:
                return visitor.visitChildren(self)


    class Tell_name_roomContext(FndpplContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FndpplContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TELL(self):
            return self.getToken(gpsrParser.TELL, 0)
        def Room(self):
            return self.getToken(gpsrParser.Room, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTell_name_room" ):
                return visitor.visitTell_name_room(self)
            else:
                return visitor.visitChildren(self)


    class Talk_to_whowhereContext(FndpplContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FndpplContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def talk(self):
            return self.getTypedRuleContext(gpsrParser.TalkContext,0)

        def whoWhere(self):
            return self.getTypedRuleContext(gpsrParser.WhoWhereContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTalk_to_whowhere" ):
                return visitor.visitTalk_to_whowhere(self)
            else:
                return visitor.visitChildren(self)


    class Go_room_talkContext(FndpplContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FndpplContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def goroom(self):
            return self.getTypedRuleContext(gpsrParser.GoroomContext,0)

        def findp(self):
            return self.getTypedRuleContext(gpsrParser.FindpContext,0)

        def talk(self):
            return self.getTypedRuleContext(gpsrParser.TalkContext,0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(gpsrParser.Comma)
            else:
                return self.getToken(gpsrParser.Comma, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGo_room_talk" ):
                return visitor.visitGo_room_talk(self)
            else:
                return visitor.visitChildren(self)


    class Tell_Pose_beaconContext(FndpplContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FndpplContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TELL(self):
            return self.getToken(gpsrParser.TELL, 0)
        def beacon(self):
            return self.getTypedRuleContext(gpsrParser.BeaconContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTell_Pose_beacon" ):
                return visitor.visitTell_Pose_beacon(self)
            else:
                return visitor.visitChildren(self)


    class Tell_gender_roomContext(FndpplContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FndpplContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TELL(self):
            return self.getToken(gpsrParser.TELL, 0)
        def Room(self):
            return self.getToken(gpsrParser.Room, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTell_gender_room" ):
                return visitor.visitTell_gender_room(self)
            else:
                return visitor.visitChildren(self)



    def fndppl(self):

        localctx = gpsrParser.FndpplContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_fndppl)
        self._la = 0 # Token type
        try:
            self.state = 508
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                localctx = gpsrParser.Talk_to_whowhereContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 406
                self.talk()
                self.state = 407
                self.match(gpsrParser.T__8)
                self.state = 408
                self.whoWhere()
                pass

            elif la_ == 2:
                localctx = gpsrParser.Find_talk_in_roomContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 410
                self.findp()
                self.state = 411
                self.match(gpsrParser.T__3)
                self.state = 412
                self.match(gpsrParser.T__2)
                self.state = 413
                self.match(gpsrParser.Room)
                self.state = 414
                self.match(gpsrParser.T__4)
                self.state = 415
                self.talk()
                pass

            elif la_ == 3:
                localctx = gpsrParser.Go_room_talkContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 417
                self.goroom()
                self.state = 419
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==91:
                    self.state = 418
                    self.match(gpsrParser.Comma)


                self.state = 421
                self.findp()
                self.state = 423
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==91:
                    self.state = 422
                    self.match(gpsrParser.Comma)


                self.state = 425
                self.match(gpsrParser.T__4)
                self.state = 426
                self.talk()
                pass

            elif la_ == 4:
                localctx = gpsrParser.Tell_name_beaconContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 428
                self.match(gpsrParser.TELL)
                self.state = 429
                self.match(gpsrParser.T__7)
                self.state = 430
                self.match(gpsrParser.T__2)
                self.state = 431
                self.match(gpsrParser.T__20)
                self.state = 432
                self.match(gpsrParser.T__21)
                self.state = 433
                self.match(gpsrParser.T__2)
                self.state = 434
                self.match(gpsrParser.T__1)
                self.state = 435
                self.match(gpsrParser.T__22)
                self.state = 436
                self.match(gpsrParser.T__2)
                self.state = 437
                self.beacon()
                pass

            elif la_ == 5:
                localctx = gpsrParser.Tell_gender_beaconContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 438
                self.match(gpsrParser.TELL)
                self.state = 439
                self.match(gpsrParser.T__7)
                self.state = 440
                self.match(gpsrParser.T__2)
                self.state = 441
                self.match(gpsrParser.T__23)
                self.state = 442
                self.match(gpsrParser.T__21)
                self.state = 443
                self.match(gpsrParser.T__2)
                self.state = 444
                self.match(gpsrParser.T__1)
                self.state = 445
                self.match(gpsrParser.T__22)
                self.state = 446
                self.match(gpsrParser.T__2)
                self.state = 447
                self.beacon()
                pass

            elif la_ == 6:
                localctx = gpsrParser.Tell_Pose_beaconContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 448
                self.match(gpsrParser.TELL)
                self.state = 449
                self.match(gpsrParser.T__7)
                self.state = 450
                self.match(gpsrParser.T__2)
                self.state = 451
                self.match(gpsrParser.T__24)
                self.state = 452
                self.match(gpsrParser.T__21)
                self.state = 453
                self.match(gpsrParser.T__2)
                self.state = 454
                self.match(gpsrParser.T__1)
                self.state = 455
                self.match(gpsrParser.T__22)
                self.state = 456
                self.match(gpsrParser.T__2)
                self.state = 457
                self.beacon()
                pass

            elif la_ == 7:
                localctx = gpsrParser.Tell_name_roomContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 458
                self.match(gpsrParser.TELL)
                self.state = 459
                self.match(gpsrParser.T__7)
                self.state = 460
                self.match(gpsrParser.T__2)
                self.state = 461
                self.match(gpsrParser.T__20)
                self.state = 462
                self.match(gpsrParser.T__21)
                self.state = 463
                self.match(gpsrParser.T__2)
                self.state = 464
                self.match(gpsrParser.T__1)
                self.state = 465
                self.match(gpsrParser.T__3)
                self.state = 466
                self.match(gpsrParser.T__2)
                self.state = 467
                self.match(gpsrParser.Room)
                pass

            elif la_ == 8:
                localctx = gpsrParser.Tell_gender_roomContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 468
                self.match(gpsrParser.TELL)
                self.state = 469
                self.match(gpsrParser.T__7)
                self.state = 470
                self.match(gpsrParser.T__2)
                self.state = 471
                self.match(gpsrParser.T__23)
                self.state = 472
                self.match(gpsrParser.T__21)
                self.state = 473
                self.match(gpsrParser.T__2)
                self.state = 474
                self.match(gpsrParser.T__1)
                self.state = 475
                self.match(gpsrParser.T__3)
                self.state = 476
                self.match(gpsrParser.T__2)
                self.state = 477
                self.match(gpsrParser.Room)
                pass

            elif la_ == 9:
                localctx = gpsrParser.Tell_Pose_roomContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 478
                self.match(gpsrParser.TELL)
                self.state = 479
                self.match(gpsrParser.T__7)
                self.state = 480
                self.match(gpsrParser.T__2)
                self.state = 481
                self.match(gpsrParser.T__24)
                self.state = 482
                self.match(gpsrParser.T__21)
                self.state = 483
                self.match(gpsrParser.T__2)
                self.state = 484
                self.match(gpsrParser.T__1)
                self.state = 485
                self.match(gpsrParser.T__3)
                self.state = 486
                self.match(gpsrParser.T__2)
                self.state = 487
                self.match(gpsrParser.Room)
                pass

            elif la_ == 10:
                localctx = gpsrParser.Tell_gender_numberContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 488
                self.match(gpsrParser.TELL)
                self.state = 489
                self.match(gpsrParser.T__7)
                self.state = 490
                self.match(gpsrParser.T__12)
                self.state = 491
                self.match(gpsrParser.T__13)
                self.state = 492
                self.match(gpsrParser.T__25)
                self.state = 493
                self.match(gpsrParser.T__3)
                self.state = 494
                self.match(gpsrParser.T__2)
                self.state = 495
                self.match(gpsrParser.Room)
                self.state = 496
                self.match(gpsrParser.T__15)
                self.state = 497
                self.pgenderp()
                pass

            elif la_ == 11:
                localctx = gpsrParser.Tell_Pose_numberContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 498
                self.match(gpsrParser.TELL)
                self.state = 499
                self.match(gpsrParser.T__7)
                self.state = 500
                self.match(gpsrParser.T__12)
                self.state = 501
                self.match(gpsrParser.T__13)
                self.state = 502
                self.match(gpsrParser.T__25)
                self.state = 503
                self.match(gpsrParser.T__3)
                self.state = 504
                self.match(gpsrParser.T__2)
                self.state = 505
                self.match(gpsrParser.Room)
                self.state = 506
                self.match(gpsrParser.T__15)
                self.state = 507
                self.match(gpsrParser.Pose)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FollowContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_follow

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class From_beacon_to_whereContext(FollowContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FollowContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def gobeacon(self):
            return self.getTypedRuleContext(gpsrParser.GobeaconContext,0)

        def Name(self):
            return self.getToken(gpsrParser.Name, 0)
        def vbfollow(self):
            return self.getTypedRuleContext(gpsrParser.VbfollowContext,0)

        def Pron(self):
            return self.getToken(gpsrParser.Pron, 0)
        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(gpsrParser.Comma)
            else:
                return self.getToken(gpsrParser.Comma, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrom_beacon_to_where" ):
                return visitor.visitFrom_beacon_to_where(self)
            else:
                return visitor.visitChildren(self)


    class From_beacon_to_roomContext(FollowContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FollowContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def vbfollow(self):
            return self.getTypedRuleContext(gpsrParser.VbfollowContext,0)

        def Name(self):
            return self.getToken(gpsrParser.Name, 0)
        def beacon(self):
            return self.getTypedRuleContext(gpsrParser.BeaconContext,0)

        def Room(self):
            return self.getToken(gpsrParser.Room, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrom_beacon_to_room" ):
                return visitor.visitFrom_beacon_to_room(self)
            else:
                return visitor.visitChildren(self)


    class From_beacon_to_room_indirectContext(FollowContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FollowContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Name(self):
            return self.getToken(gpsrParser.Name, 0)
        def beacon(self):
            return self.getTypedRuleContext(gpsrParser.BeaconContext,0)

        def vbfollow(self):
            return self.getTypedRuleContext(gpsrParser.VbfollowContext,0)

        def Pron(self):
            return self.getToken(gpsrParser.Pron, 0)
        def fllwdest(self):
            return self.getTypedRuleContext(gpsrParser.FllwdestContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrom_beacon_to_room_indirect" ):
                return visitor.visitFrom_beacon_to_room_indirect(self)
            else:
                return visitor.visitChildren(self)



    def follow(self):

        localctx = gpsrParser.FollowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_follow)
        self._la = 0 # Token type
        try:
            self.state = 545
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [89]:
                localctx = gpsrParser.From_beacon_to_roomContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 510
                self.vbfollow()
                self.state = 511
                self.match(gpsrParser.Name)
                self.state = 519
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 512
                    self.match(gpsrParser.T__9)
                    self.state = 513
                    self.match(gpsrParser.T__2)
                    self.state = 514
                    self.beacon()
                    self.state = 515
                    self.match(gpsrParser.T__8)
                    self.state = 516
                    self.match(gpsrParser.T__2)
                    self.state = 517
                    self.match(gpsrParser.Room)


                pass
            elif token in [27]:
                localctx = gpsrParser.From_beacon_to_room_indirectContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 521
                self.match(gpsrParser.T__26)
                self.state = 522
                self.match(gpsrParser.Name)
                self.state = 523
                self.match(gpsrParser.T__22)
                self.state = 524
                self.match(gpsrParser.T__2)
                self.state = 525
                self.beacon()
                self.state = 526
                self.match(gpsrParser.T__4)
                self.state = 527
                self.vbfollow()
                self.state = 528
                self.match(gpsrParser.Pron)
                self.state = 530
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==9:
                    self.state = 529
                    self.fllwdest()


                pass
            elif token in [80, 81]:
                localctx = gpsrParser.From_beacon_to_whereContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 532
                self.gobeacon()
                self.state = 534
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==91:
                    self.state = 533
                    self.match(gpsrParser.Comma)


                self.state = 536
                self.match(gpsrParser.T__26)
                self.state = 537
                self.match(gpsrParser.Name)
                self.state = 539
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==91:
                    self.state = 538
                    self.match(gpsrParser.Comma)


                self.state = 541
                self.match(gpsrParser.T__4)
                self.state = 542
                self.vbfollow()
                self.state = 543
                self.match(gpsrParser.Pron)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FllmeetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Name(self):
            return self.getToken(gpsrParser.Name, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_fllmeet

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFllmeet" ):
                return visitor.visitFllmeet(self)
            else:
                return visitor.visitChildren(self)




    def fllmeet(self):

        localctx = gpsrParser.FllmeetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_fllmeet)
        try:
            self.state = 550
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [27]:
                self.enterOuterAlt(localctx, 1)
                self.state = 547
                self.match(gpsrParser.T__26)
                self.state = 548
                self.match(gpsrParser.Name)
                pass
            elif token in [28]:
                self.enterOuterAlt(localctx, 2)
                self.state = 549
                self.match(gpsrParser.T__27)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FllwdestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Room(self):
            return self.getToken(gpsrParser.Room, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_fllwdest

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFllwdest" ):
                return visitor.visitFllwdest(self)
            else:
                return visitor.visitChildren(self)




    def fllwdest(self):

        localctx = gpsrParser.FllwdestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_fllwdest)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 552
            self.match(gpsrParser.T__8)
            self.state = 553
            self.match(gpsrParser.T__2)
            self.state = 554
            self.match(gpsrParser.Room)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GuideContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def gdcmd(self):
            return self.getTypedRuleContext(gpsrParser.GdcmdContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_guide

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGuide" ):
                return visitor.visitGuide(self)
            else:
                return visitor.visitChildren(self)




    def guide(self):

        localctx = gpsrParser.GuideContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_guide)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 556
            self.gdcmd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GdcmdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_gdcmd

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Beacon_to_beacon_gobeacon_guidetoContext(GdcmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.GdcmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def gobeacon(self):
            return self.getTypedRuleContext(gpsrParser.GobeaconContext,0)

        def Name(self):
            return self.getToken(gpsrParser.Name, 0)
        def guideto(self):
            return self.getTypedRuleContext(gpsrParser.GuidetoContext,0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(gpsrParser.Comma)
            else:
                return self.getToken(gpsrParser.Comma, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBeacon_to_beacon_gobeacon_guideto" ):
                return visitor.visitBeacon_to_beacon_gobeacon_guideto(self)
            else:
                return visitor.visitChildren(self)


    class Beacon_to_beaconContext(GdcmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.GdcmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def vbguide(self):
            return self.getTypedRuleContext(gpsrParser.VbguideContext,0)

        def Name(self):
            return self.getToken(gpsrParser.Name, 0)
        def beacon(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(gpsrParser.BeaconContext)
            else:
                return self.getTypedRuleContext(gpsrParser.BeaconContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBeacon_to_beacon" ):
                return visitor.visitBeacon_to_beacon(self)
            else:
                return visitor.visitChildren(self)


    class Beacon_to_beacon_guide_toContext(GdcmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.GdcmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Name(self):
            return self.getToken(gpsrParser.Name, 0)
        def beacon(self):
            return self.getTypedRuleContext(gpsrParser.BeaconContext,0)

        def guideto(self):
            return self.getTypedRuleContext(gpsrParser.GuidetoContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBeacon_to_beacon_guide_to" ):
                return visitor.visitBeacon_to_beacon_guide_to(self)
            else:
                return visitor.visitChildren(self)


    class Beacon_to_beacon_gdwhereContext(GdcmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.GdcmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def vbguide(self):
            return self.getTypedRuleContext(gpsrParser.VbguideContext,0)

        def Name(self):
            return self.getToken(gpsrParser.Name, 0)
        def beacon(self):
            return self.getTypedRuleContext(gpsrParser.BeaconContext,0)

        def gdwhere(self):
            return self.getTypedRuleContext(gpsrParser.GdwhereContext,0)

        def Comma(self):
            return self.getToken(gpsrParser.Comma, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBeacon_to_beacon_gdwhere" ):
                return visitor.visitBeacon_to_beacon_gdwhere(self)
            else:
                return visitor.visitChildren(self)



    def gdcmd(self):

        localctx = gpsrParser.GdcmdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_gdcmd)
        self._la = 0 # Token type
        try:
            self.state = 597
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                localctx = gpsrParser.Beacon_to_beaconContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 558
                self.vbguide()
                self.state = 559
                self.match(gpsrParser.Name)
                self.state = 560
                self.match(gpsrParser.T__9)
                self.state = 561
                self.match(gpsrParser.T__2)
                self.state = 562
                self.beacon()
                self.state = 563
                self.match(gpsrParser.T__8)
                self.state = 564
                self.match(gpsrParser.T__2)
                self.state = 565
                self.beacon()
                pass

            elif la_ == 2:
                localctx = gpsrParser.Beacon_to_beacon_guide_toContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 567
                self.match(gpsrParser.T__26)
                self.state = 568
                self.match(gpsrParser.Name)
                self.state = 569
                self.match(gpsrParser.T__22)
                self.state = 570
                self.match(gpsrParser.T__2)
                self.state = 571
                self.beacon()
                self.state = 572
                self.match(gpsrParser.T__4)
                self.state = 573
                self.guideto()
                pass

            elif la_ == 3:
                localctx = gpsrParser.Beacon_to_beacon_gobeacon_guidetoContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 575
                self.gobeacon()
                self.state = 577
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==91:
                    self.state = 576
                    self.match(gpsrParser.Comma)


                self.state = 579
                self.match(gpsrParser.T__26)
                self.state = 580
                self.match(gpsrParser.Name)
                self.state = 582
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==91:
                    self.state = 581
                    self.match(gpsrParser.Comma)


                self.state = 584
                self.match(gpsrParser.T__4)
                self.state = 585
                self.guideto()
                pass

            elif la_ == 4:
                localctx = gpsrParser.Beacon_to_beacon_gdwhereContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 587
                self.vbguide()
                self.state = 588
                self.match(gpsrParser.Name)
                self.state = 589
                self.match(gpsrParser.T__8)
                self.state = 590
                self.match(gpsrParser.T__2)
                self.state = 591
                self.beacon()
                self.state = 593
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==91:
                    self.state = 592
                    self.match(gpsrParser.Comma)


                self.state = 595
                self.gdwhere()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GuidetoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbguide(self):
            return self.getTypedRuleContext(gpsrParser.VbguideContext,0)


        def Pron(self):
            return self.getToken(gpsrParser.Pron, 0)

        def beacon(self):
            return self.getTypedRuleContext(gpsrParser.BeaconContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_guideto

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGuideto" ):
                return visitor.visitGuideto(self)
            else:
                return visitor.visitChildren(self)




    def guideto(self):

        localctx = gpsrParser.GuidetoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_guideto)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 599
            self.vbguide()
            self.state = 600
            self.match(gpsrParser.Pron)
            self.state = 601
            self.match(gpsrParser.T__8)
            self.state = 602
            self.match(gpsrParser.T__2)
            self.state = 603
            self.beacon()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GdwhereContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Pron(self):
            return self.getToken(gpsrParser.Pron, 0)

        def beacon(self):
            return self.getTypedRuleContext(gpsrParser.BeaconContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_gdwhere

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGdwhere" ):
                return visitor.visitGdwhere(self)
            else:
                return visitor.visitChildren(self)




    def gdwhere(self):

        localctx = gpsrParser.GdwhereContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_gdwhere)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 605
            self.match(gpsrParser.T__28)
            self.state = 606
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 7516192768) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 607
            self.match(gpsrParser.T__32)
            self.state = 608
            self.match(gpsrParser.Pron)
            self.state = 609
            self.match(gpsrParser.T__22)
            self.state = 610
            self.match(gpsrParser.T__2)
            self.state = 611
            self.beacon()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FollowoutContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_followout

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Beacon_to_roomContext(FollowoutContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FollowoutContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Name(self):
            return self.getToken(gpsrParser.Name, 0)
        def beacon(self):
            return self.getTypedRuleContext(gpsrParser.BeaconContext,0)

        def vbfollow(self):
            return self.getTypedRuleContext(gpsrParser.VbfollowContext,0)

        def Pron(self):
            return self.getToken(gpsrParser.Pron, 0)
        def goroom(self):
            return self.getTypedRuleContext(gpsrParser.GoroomContext,0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(gpsrParser.Comma)
            else:
                return self.getToken(gpsrParser.Comma, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBeacon_to_room" ):
                return visitor.visitBeacon_to_room(self)
            else:
                return visitor.visitChildren(self)


    class Beacon_to_backContext(FollowoutContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FollowoutContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Name(self):
            return self.getToken(gpsrParser.Name, 0)
        def beacon(self):
            return self.getTypedRuleContext(gpsrParser.BeaconContext,0)

        def vbfollow(self):
            return self.getTypedRuleContext(gpsrParser.VbfollowContext,0)

        def Pron(self, i:int=None):
            if i is None:
                return self.getTokens(gpsrParser.Pron)
            else:
                return self.getToken(gpsrParser.Pron, i)
        def vbguide(self):
            return self.getTypedRuleContext(gpsrParser.VbguideContext,0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(gpsrParser.Comma)
            else:
                return self.getToken(gpsrParser.Comma, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBeacon_to_back" ):
                return visitor.visitBeacon_to_back(self)
            else:
                return visitor.visitChildren(self)



    def followout(self):

        localctx = gpsrParser.FollowoutContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_followout)
        self._la = 0 # Token type
        try:
            self.state = 647
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                localctx = gpsrParser.Beacon_to_roomContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 613
                self.match(gpsrParser.T__26)
                self.state = 614
                self.match(gpsrParser.Name)
                self.state = 615
                self.match(gpsrParser.T__22)
                self.state = 616
                self.match(gpsrParser.T__2)
                self.state = 617
                self.beacon()
                self.state = 619
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==91:
                    self.state = 618
                    self.match(gpsrParser.Comma)


                self.state = 621
                self.vbfollow()
                self.state = 622
                self.match(gpsrParser.Pron)
                self.state = 624
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==91:
                    self.state = 623
                    self.match(gpsrParser.Comma)


                self.state = 626
                self.match(gpsrParser.T__4)
                self.state = 627
                self.goroom()
                pass

            elif la_ == 2:
                localctx = gpsrParser.Beacon_to_backContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 629
                self.match(gpsrParser.T__26)
                self.state = 630
                self.match(gpsrParser.Name)
                self.state = 631
                self.match(gpsrParser.T__22)
                self.state = 632
                self.match(gpsrParser.T__2)
                self.state = 633
                self.beacon()
                self.state = 635
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==91:
                    self.state = 634
                    self.match(gpsrParser.Comma)


                self.state = 637
                self.vbfollow()
                self.state = 638
                self.match(gpsrParser.Pron)
                self.state = 640
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==91:
                    self.state = 639
                    self.match(gpsrParser.Comma)


                self.state = 642
                self.match(gpsrParser.T__4)
                self.state = 643
                self.vbguide()
                self.state = 644
                self.match(gpsrParser.Pron)
                self.state = 645
                self.match(gpsrParser.T__33)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IncompleteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbfollow(self):
            return self.getTypedRuleContext(gpsrParser.VbfollowContext,0)


        def Name(self):
            return self.getToken(gpsrParser.Name, 0)

        def vbbring(self):
            return self.getTypedRuleContext(gpsrParser.VbbringContext,0)


        def object_obfuscated(self):
            return self.getTypedRuleContext(gpsrParser.Object_obfuscatedContext,0)


        def vbdeliver(self):
            return self.getTypedRuleContext(gpsrParser.VbdeliverContext,0)


        def someone(self):
            return self.getTypedRuleContext(gpsrParser.SomeoneContext,0)


        def vbguide(self):
            return self.getTypedRuleContext(gpsrParser.VbguideContext,0)


        def beacon(self):
            return self.getTypedRuleContext(gpsrParser.BeaconContext,0)


        def inguidewho(self):
            return self.getTypedRuleContext(gpsrParser.InguidewhoContext,0)


        def Pron(self):
            return self.getToken(gpsrParser.Pron, 0)

        def gobeacon(self):
            return self.getTypedRuleContext(gpsrParser.GobeaconContext,0)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(gpsrParser.Comma)
            else:
                return self.getToken(gpsrParser.Comma, i)

        def getRuleIndex(self):
            return gpsrParser.RULE_incomplete

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIncomplete" ):
                return visitor.visitIncomplete(self)
            else:
                return visitor.visitChildren(self)




    def incomplete(self):

        localctx = gpsrParser.IncompleteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_incomplete)
        self._la = 0 # Token type
        try:
            self.state = 687
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 649
                self.vbfollow()
                self.state = 650
                self.match(gpsrParser.Name)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 652
                self.vbbring()
                self.state = 653
                self.match(gpsrParser.T__7)
                self.state = 654
                self.match(gpsrParser.T__2)
                self.state = 655
                self.object_obfuscated()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 657
                self.vbdeliver()
                self.state = 658
                self.object_obfuscated()
                self.state = 659
                self.match(gpsrParser.T__8)
                self.state = 660
                self.someone()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 662
                self.vbguide()
                self.state = 663
                self.match(gpsrParser.Name)
                self.state = 664
                self.match(gpsrParser.T__8)
                self.state = 665
                self.match(gpsrParser.T__2)
                self.state = 666
                self.beacon()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 668
                self.match(gpsrParser.T__26)
                self.state = 669
                self.inguidewho()
                self.state = 670
                self.match(gpsrParser.T__4)
                self.state = 671
                self.vbguide()
                self.state = 672
                self.match(gpsrParser.Pron)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 674
                self.gobeacon()
                self.state = 676
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==91:
                    self.state = 675
                    self.match(gpsrParser.Comma)


                self.state = 678
                self.match(gpsrParser.T__26)
                self.state = 679
                self.inguidewho()
                self.state = 681
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==91:
                    self.state = 680
                    self.match(gpsrParser.Comma)


                self.state = 683
                self.match(gpsrParser.T__4)
                self.state = 684
                self.vbguide()
                self.state = 685
                self.match(gpsrParser.Pron)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InguidewhoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Name(self):
            return self.getToken(gpsrParser.Name, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_inguidewho

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInguidewho" ):
                return visitor.visitInguidewho(self)
            else:
                return visitor.visitChildren(self)




    def inguidewho(self):

        localctx = gpsrParser.InguidewhoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_inguidewho)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 689
            self.match(gpsrParser.Name)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartyhostContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Vbserve(self):
            return self.getToken(gpsrParser.Vbserve, 0)

        def phpeopler(self):
            return self.getTypedRuleContext(gpsrParser.PhpeoplerContext,0)


        def Vbmeet(self):
            return self.getToken(gpsrParser.Vbmeet, 0)

        def Name(self, i:int=None):
            if i is None:
                return self.getTokens(gpsrParser.Name)
            else:
                return self.getToken(gpsrParser.Name, i)

        def door(self):
            return self.getTypedRuleContext(gpsrParser.DoorContext,0)


        def Pron(self, i:int=None):
            if i is None:
                return self.getTokens(gpsrParser.Pron)
            else:
                return self.getToken(gpsrParser.Pron, i)

        def beacon(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(gpsrParser.BeaconContext)
            else:
                return self.getTypedRuleContext(gpsrParser.BeaconContext,i)


        def vbguide(self):
            return self.getTypedRuleContext(gpsrParser.VbguideContext,0)


        def Taxi(self):
            return self.getToken(gpsrParser.Taxi, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_partyhost

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartyhost" ):
                return visitor.visitPartyhost(self)
            else:
                return visitor.visitChildren(self)




    def partyhost(self):

        localctx = gpsrParser.PartyhostContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_partyhost)
        try:
            self.state = 743
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 691
                self.match(gpsrParser.Vbserve)
                self.state = 692
                self.match(gpsrParser.T__34)
                self.state = 693
                self.match(gpsrParser.T__8)
                self.state = 694
                self.phpeopler()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 695
                self.match(gpsrParser.Vbmeet)
                self.state = 696
                self.match(gpsrParser.Name)
                self.state = 697
                self.match(gpsrParser.T__22)
                self.state = 698
                self.match(gpsrParser.T__2)
                self.state = 699
                self.door()
                self.state = 700
                self.match(gpsrParser.T__4)
                self.state = 701
                self.match(gpsrParser.T__35)
                self.state = 702
                self.match(gpsrParser.Pron)
                self.state = 703
                self.match(gpsrParser.T__8)
                self.state = 704
                self.phpeopler()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 706
                self.match(gpsrParser.Vbmeet)
                self.state = 707
                self.match(gpsrParser.Name)
                self.state = 708
                self.match(gpsrParser.T__22)
                self.state = 709
                self.match(gpsrParser.T__2)
                self.state = 710
                self.beacon()
                self.state = 711
                self.match(gpsrParser.T__4)
                self.state = 712
                self.match(gpsrParser.T__36)
                self.state = 713
                self.match(gpsrParser.Pron)
                self.state = 714
                self.match(gpsrParser.T__8)
                self.state = 715
                self.match(gpsrParser.T__37)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 717
                self.match(gpsrParser.Vbmeet)
                self.state = 718
                self.match(gpsrParser.Name)
                self.state = 719
                self.match(gpsrParser.T__22)
                self.state = 720
                self.match(gpsrParser.T__2)
                self.state = 721
                self.beacon()
                self.state = 722
                self.match(gpsrParser.T__4)
                self.state = 723
                self.match(gpsrParser.T__35)
                self.state = 724
                self.match(gpsrParser.Pron)
                self.state = 725
                self.match(gpsrParser.T__8)
                self.state = 726
                self.match(gpsrParser.Name)
                self.state = 727
                self.match(gpsrParser.T__22)
                self.state = 728
                self.match(gpsrParser.T__2)
                self.state = 729
                self.beacon()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 731
                self.match(gpsrParser.Vbmeet)
                self.state = 732
                self.match(gpsrParser.Name)
                self.state = 733
                self.match(gpsrParser.T__22)
                self.state = 734
                self.match(gpsrParser.T__2)
                self.state = 735
                self.beacon()
                self.state = 736
                self.match(gpsrParser.T__4)
                self.state = 737
                self.vbguide()
                self.state = 738
                self.match(gpsrParser.Pron)
                self.state = 739
                self.match(gpsrParser.T__8)
                self.state = 740
                self.match(gpsrParser.Pron)
                self.state = 741
                self.match(gpsrParser.Taxi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PhpeopleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def peopletype(self):
            return self.getTypedRuleContext(gpsrParser.PeopletypeContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_phpeople

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPhpeople" ):
                return visitor.visitPhpeople(self)
            else:
                return visitor.visitChildren(self)




    def phpeople(self):

        localctx = gpsrParser.PhpeopleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_phpeople)
        try:
            self.state = 749
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [39]:
                self.enterOuterAlt(localctx, 1)
                self.state = 745
                self.match(gpsrParser.T__38)
                pass
            elif token in [40]:
                self.enterOuterAlt(localctx, 2)
                self.state = 746
                self.match(gpsrParser.T__39)
                self.state = 747
                self.match(gpsrParser.T__2)
                self.state = 748
                self.peopletype()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PeopletypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEN(self):
            return self.getToken(gpsrParser.MEN, 0)

        def WOMEN(self):
            return self.getToken(gpsrParser.WOMEN, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_peopletype

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPeopletype" ):
                return visitor.visitPeopletype(self)
            else:
                return visitor.visitChildren(self)




    def peopletype(self):

        localctx = gpsrParser.PeopletypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_peopletype)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 751
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 6770792670953472) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PhpeoplerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def phpeople(self):
            return self.getTypedRuleContext(gpsrParser.PhpeopleContext,0)


        def Room(self):
            return self.getToken(gpsrParser.Room, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_phpeopler

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPhpeopler" ):
                return visitor.visitPhpeopler(self)
            else:
                return visitor.visitChildren(self)




    def phpeopler(self):

        localctx = gpsrParser.PhpeoplerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_phpeopler)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 753
            self.phpeople()
            self.state = 754
            self.match(gpsrParser.T__3)
            self.state = 755
            self.match(gpsrParser.T__2)
            self.state = 756
            self.match(gpsrParser.Room)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PgendersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAN(self):
            return self.getToken(gpsrParser.MAN, 0)

        def WOMAN(self):
            return self.getToken(gpsrParser.WOMAN, 0)

        def BOY(self):
            return self.getToken(gpsrParser.BOY, 0)

        def GIRL(self):
            return self.getToken(gpsrParser.GIRL, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_pgenders

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPgenders" ):
                return visitor.visitPgenders(self)
            else:
                return visitor.visitChildren(self)




    def pgenders(self):

        localctx = gpsrParser.PgendersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_pgenders)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 758
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 2111062325329920) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PgenderpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEN(self):
            return self.getToken(gpsrParser.MEN, 0)

        def WOMEN(self):
            return self.getToken(gpsrParser.WOMEN, 0)

        def BOYS(self):
            return self.getToken(gpsrParser.BOYS, 0)

        def GIRLS(self):
            return self.getToken(gpsrParser.GIRLS, 0)

        def MALE(self):
            return self.getToken(gpsrParser.MALE, 0)

        def FEMALE(self):
            return self.getToken(gpsrParser.FEMALE, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_pgenderp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPgenderp" ):
                return visitor.visitPgenderp(self)
            else:
                return visitor.visitChildren(self)




    def pgenderp(self):

        localctx = gpsrParser.PgenderpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_pgenderp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 760
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 141863388262170624) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DoorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Doorpos(self):
            return self.getToken(gpsrParser.Doorpos, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_door

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDoor" ):
                return visitor.visitDoor(self)
            else:
                return visitor.visitChildren(self)




    def door(self):

        localctx = gpsrParser.DoorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_door)
        try:
            self.state = 766
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 762
                self.match(gpsrParser.Doorpos)
                self.state = 763
                self.match(gpsrParser.T__43)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 764
                self.match(gpsrParser.Doorpos)
                self.state = 765
                self.match(gpsrParser.T__44)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SomeoneContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def whoWhere(self):
            return self.getTypedRuleContext(gpsrParser.WhoWhereContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_someone

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSomeone" ):
                return visitor.visitSomeone(self)
            else:
                return visitor.visitChildren(self)




    def someone(self):

        localctx = gpsrParser.SomeoneContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_someone)
        try:
            self.state = 770
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [8]:
                self.enterOuterAlt(localctx, 1)
                self.state = 768
                self.match(gpsrParser.T__7)
                pass
            elif token in [3]:
                self.enterOuterAlt(localctx, 2)
                self.state = 769
                self.whoWhere()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PlaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbplace(self):
            return self.getTypedRuleContext(gpsrParser.VbplaceContext,0)


        def placement(self):
            return self.getTypedRuleContext(gpsrParser.PlacementContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_place

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPlace" ):
                return visitor.visitPlace(self)
            else:
                return visitor.visitChildren(self)




    def place(self):

        localctx = gpsrParser.PlaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_place)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 772
            self.vbplace()
            self.state = 773
            self.match(gpsrParser.T__5)
            self.state = 774
            self.match(gpsrParser.T__6)
            self.state = 775
            self.match(gpsrParser.T__2)
            self.state = 776
            self.placement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GoplaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbgopl(self):
            return self.getTypedRuleContext(gpsrParser.VbgoplContext,0)


        def placement(self):
            return self.getTypedRuleContext(gpsrParser.PlacementContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_goplace

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGoplace" ):
                return visitor.visitGoplace(self)
            else:
                return visitor.visitChildren(self)




    def goplace(self):

        localctx = gpsrParser.GoplaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_goplace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 778
            self.vbgopl()
            self.state = 779
            self.match(gpsrParser.T__8)
            self.state = 780
            self.match(gpsrParser.T__2)
            self.state = 781
            self.placement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GobeaconContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbgopl(self):
            return self.getTypedRuleContext(gpsrParser.VbgoplContext,0)


        def beacon(self):
            return self.getTypedRuleContext(gpsrParser.BeaconContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_gobeacon

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGobeacon" ):
                return visitor.visitGobeacon(self)
            else:
                return visitor.visitChildren(self)




    def gobeacon(self):

        localctx = gpsrParser.GobeaconContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_gobeacon)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 783
            self.vbgopl()
            self.state = 784
            self.match(gpsrParser.T__8)
            self.state = 785
            self.match(gpsrParser.T__2)
            self.state = 786
            self.beacon()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GoroomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbgopl(self):
            return self.getTypedRuleContext(gpsrParser.VbgoplContext,0)


        def Room(self):
            return self.getToken(gpsrParser.Room, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_goroom

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGoroom" ):
                return visitor.visitGoroom(self)
            else:
                return visitor.visitChildren(self)




    def goroom(self):

        localctx = gpsrParser.GoroomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_goroom)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 788
            self.vbgopl()
            self.state = 789
            self.match(gpsrParser.T__8)
            self.state = 790
            self.match(gpsrParser.T__2)
            self.state = 791
            self.match(gpsrParser.Room)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TakeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbtake(self):
            return self.getTypedRuleContext(gpsrParser.VbtakeContext,0)


        def Object(self):
            return self.getToken(gpsrParser.Object, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_take

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTake" ):
                return visitor.visitTake(self)
            else:
                return visitor.visitChildren(self)




    def take(self):

        localctx = gpsrParser.TakeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_take)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 793
            self.vbtake()
            self.state = 794
            self.match(gpsrParser.T__2)
            self.state = 795
            self.match(gpsrParser.Object)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TakefromContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def take(self):
            return self.getTypedRuleContext(gpsrParser.TakeContext,0)


        def placement(self):
            return self.getTypedRuleContext(gpsrParser.PlacementContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_takefrom

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTakefrom" ):
                return visitor.visitTakefrom(self)
            else:
                return visitor.visitChildren(self)




    def takefrom(self):

        localctx = gpsrParser.TakefromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_takefrom)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 797
            self.take()
            self.state = 798
            self.match(gpsrParser.T__9)
            self.state = 799
            self.match(gpsrParser.T__2)
            self.state = 800
            self.placement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DelivmeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbdeliver(self):
            return self.getTypedRuleContext(gpsrParser.VbdeliverContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_delivme

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDelivme" ):
                return visitor.visitDelivme(self)
            else:
                return visitor.visitChildren(self)




    def delivme(self):

        localctx = gpsrParser.DelivmeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_delivme)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 802
            self.vbdeliver()
            self.state = 803
            self.match(gpsrParser.T__5)
            self.state = 804
            self.match(gpsrParser.T__8)
            self.state = 805
            self.match(gpsrParser.T__7)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DelivtoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbdeliver(self):
            return self.getTypedRuleContext(gpsrParser.VbdeliverContext,0)


        def Name(self):
            return self.getToken(gpsrParser.Name, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_delivto

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDelivto" ):
                return visitor.visitDelivto(self)
            else:
                return visitor.visitChildren(self)




    def delivto(self):

        localctx = gpsrParser.DelivtoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_delivto)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 807
            self.vbdeliver()
            self.state = 808
            self.match(gpsrParser.T__5)
            self.state = 809
            self.match(gpsrParser.T__8)
            self.state = 810
            self.match(gpsrParser.Name)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DelivatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbdeliver(self):
            return self.getTypedRuleContext(gpsrParser.VbdeliverContext,0)


        def Name(self):
            return self.getToken(gpsrParser.Name, 0)

        def beacon(self):
            return self.getTypedRuleContext(gpsrParser.BeaconContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_delivat

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDelivat" ):
                return visitor.visitDelivat(self)
            else:
                return visitor.visitChildren(self)




    def delivat(self):

        localctx = gpsrParser.DelivatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_delivat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 812
            self.vbdeliver()
            self.state = 813
            self.match(gpsrParser.T__5)
            self.state = 814
            self.match(gpsrParser.T__8)
            self.state = 815
            self.match(gpsrParser.Name)
            self.state = 816
            self.match(gpsrParser.T__22)
            self.state = 817
            self.match(gpsrParser.T__2)
            self.state = 818
            self.beacon()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TalkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_talk

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Answer_questionContext(TalkContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.TalkContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Answer(self):
            return self.getToken(gpsrParser.Answer, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnswer_question" ):
                return visitor.visitAnswer_question(self)
            else:
                return visitor.visitChildren(self)


    class Speak_toContext(TalkContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.TalkContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def speak(self):
            return self.getTypedRuleContext(gpsrParser.SpeakContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpeak_to" ):
                return visitor.visitSpeak_to(self)
            else:
                return visitor.visitChildren(self)



    def talk(self):

        localctx = gpsrParser.TalkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_talk)
        try:
            self.state = 822
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [69]:
                localctx = gpsrParser.Answer_questionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 820
                self.match(gpsrParser.Answer)
                pass
            elif token in [78, 79]:
                localctx = gpsrParser.Speak_toContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 821
                self.speak()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpeakContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbspeak(self):
            return self.getTypedRuleContext(gpsrParser.VbspeakContext,0)


        def Whattosay(self):
            return self.getToken(gpsrParser.Whattosay, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_speak

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpeak" ):
                return visitor.visitSpeak(self)
            else:
                return visitor.visitChildren(self)




    def speak(self):

        localctx = gpsrParser.SpeakContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_speak)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 824
            self.vbspeak()
            self.state = 825
            self.match(gpsrParser.Whattosay)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbbtakeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BRING(self):
            return self.getToken(gpsrParser.BRING, 0)

        def TAKE(self):
            return self.getToken(gpsrParser.TAKE, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_vbbtake

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVbbtake" ):
                return visitor.visitVbbtake(self)
            else:
                return visitor.visitChildren(self)




    def vbbtake(self):

        localctx = gpsrParser.VbbtakeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_vbbtake)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 827
            _la = self._input.LA(1)
            if not(_la==71 or _la==72):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbplaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PUT(self):
            return self.getToken(gpsrParser.PUT, 0)

        def PLACE(self):
            return self.getToken(gpsrParser.PLACE, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_vbplace

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVbplace" ):
                return visitor.visitVbplace(self)
            else:
                return visitor.visitChildren(self)




    def vbplace(self):

        localctx = gpsrParser.VbplaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_vbplace)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 829
            _la = self._input.LA(1)
            if not(_la==73 or _la==74):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbbringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BRING(self):
            return self.getToken(gpsrParser.BRING, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_vbbring

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVbbring" ):
                return visitor.visitVbbring(self)
            else:
                return visitor.visitChildren(self)




    def vbbring(self):

        localctx = gpsrParser.VbbringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_vbbring)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 831
            _la = self._input.LA(1)
            if not(_la==71):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbdeliverContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbbring(self):
            return self.getTypedRuleContext(gpsrParser.VbbringContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_vbdeliver

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVbdeliver" ):
                return visitor.visitVbdeliver(self)
            else:
                return visitor.visitChildren(self)




    def vbdeliver(self):

        localctx = gpsrParser.VbdeliverContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_vbdeliver)
        try:
            self.state = 835
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [71]:
                self.enterOuterAlt(localctx, 1)
                self.state = 833
                self.vbbring()
                pass
            elif token in [46]:
                self.enterOuterAlt(localctx, 2)
                self.state = 834
                self.match(gpsrParser.T__45)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbtakeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GET(self):
            return self.getToken(gpsrParser.GET, 0)

        def GRASP(self):
            return self.getToken(gpsrParser.GRASP, 0)

        def TAKE(self):
            return self.getToken(gpsrParser.TAKE, 0)

        def PICK_UP(self):
            return self.getToken(gpsrParser.PICK_UP, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_vbtake

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVbtake" ):
                return visitor.visitVbtake(self)
            else:
                return visitor.visitChildren(self)




    def vbtake(self):

        localctx = gpsrParser.VbtakeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_vbtake)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 837
            _la = self._input.LA(1)
            if not(((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 57) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbspeakContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TELL(self):
            return self.getToken(gpsrParser.TELL, 0)

        def SAY(self):
            return self.getToken(gpsrParser.SAY, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_vbspeak

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVbspeak" ):
                return visitor.visitVbspeak(self)
            else:
                return visitor.visitChildren(self)




    def vbspeak(self):

        localctx = gpsrParser.VbspeakContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_vbspeak)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 839
            _la = self._input.LA(1)
            if not(_la==78 or _la==79):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbgoplContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GO(self):
            return self.getToken(gpsrParser.GO, 0)

        def NAVIGATE(self):
            return self.getToken(gpsrParser.NAVIGATE, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_vbgopl

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVbgopl" ):
                return visitor.visitVbgopl(self)
            else:
                return visitor.visitChildren(self)




    def vbgopl(self):

        localctx = gpsrParser.VbgoplContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_vbgopl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 841
            _la = self._input.LA(1)
            if not(_la==80 or _la==81):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbgorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbgopl(self):
            return self.getTypedRuleContext(gpsrParser.VbgoplContext,0)


        def ENTER(self):
            return self.getToken(gpsrParser.ENTER, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_vbgor

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVbgor" ):
                return visitor.visitVbgor(self)
            else:
                return visitor.visitChildren(self)




    def vbgor(self):

        localctx = gpsrParser.VbgorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_vbgor)
        try:
            self.state = 845
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [80, 81]:
                self.enterOuterAlt(localctx, 1)
                self.state = 843
                self.vbgopl()
                pass
            elif token in [82]:
                self.enterOuterAlt(localctx, 2)
                self.state = 844
                self.match(gpsrParser.ENTER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbfindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCATE(self):
            return self.getToken(gpsrParser.LOCATE, 0)

        def LOOK_FOR(self):
            return self.getToken(gpsrParser.LOOK_FOR, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_vbfind

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVbfind" ):
                return visitor.visitVbfind(self)
            else:
                return visitor.visitChildren(self)




    def vbfind(self):

        localctx = gpsrParser.VbfindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_vbfind)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 847
            _la = self._input.LA(1)
            if not(((((_la - 33)) & ~0x3f) == 0 and ((1 << (_la - 33)) & 3377699720527873) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbguideContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GUIDE(self):
            return self.getToken(gpsrParser.GUIDE, 0)

        def ESCORT(self):
            return self.getToken(gpsrParser.ESCORT, 0)

        def TAKE(self):
            return self.getToken(gpsrParser.TAKE, 0)

        def LEAD(self):
            return self.getToken(gpsrParser.LEAD, 0)

        def ACCOMPANY(self):
            return self.getToken(gpsrParser.ACCOMPANY, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_vbguide

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVbguide" ):
                return visitor.visitVbguide(self)
            else:
                return visitor.visitChildren(self)




    def vbguide(self):

        localctx = gpsrParser.VbguideContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_vbguide)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 849
            _la = self._input.LA(1)
            if not(((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 122881) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbfollowContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOLLOW(self):
            return self.getToken(gpsrParser.FOLLOW, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_vbfollow

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVbfollow" ):
                return visitor.visitVbfollow(self)
            else:
                return visitor.visitChildren(self)




    def vbfollow(self):

        localctx = gpsrParser.VbfollowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_vbfollow)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 851
            self.match(gpsrParser.FOLLOW)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BeaconContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Location_except_room(self):
            return self.getToken(gpsrParser.Location_except_room, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_beacon

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBeacon" ):
                return visitor.visitBeacon(self)
            else:
                return visitor.visitChildren(self)




    def beacon(self):

        localctx = gpsrParser.BeaconContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_beacon)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 853
            self.match(gpsrParser.Location_except_room)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PlacementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Location_except_room(self):
            return self.getToken(gpsrParser.Location_except_room, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_placement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPlacement" ):
                return visitor.visitPlacement(self)
            else:
                return visitor.visitChildren(self)




    def placement(self):

        localctx = gpsrParser.PlacementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_placement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 855
            self.match(gpsrParser.Location_except_room)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_alikeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Object(self):
            return self.getToken(gpsrParser.Object, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_object_alike

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObject_alike" ):
                return visitor.visitObject_alike(self)
            else:
                return visitor.visitChildren(self)




    def object_alike(self):

        localctx = gpsrParser.Object_alikeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_object_alike)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 857
            self.match(gpsrParser.Object)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_knownContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Object(self):
            return self.getToken(gpsrParser.Object, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_object_known

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObject_known" ):
                return visitor.visitObject_known(self)
            else:
                return visitor.visitChildren(self)




    def object_known(self):

        localctx = gpsrParser.Object_knownContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_object_known)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 859
            self.match(gpsrParser.Object)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_alike_obfuscatedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Category(self):
            return self.getToken(gpsrParser.Category, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_object_alike_obfuscated

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObject_alike_obfuscated" ):
                return visitor.visitObject_alike_obfuscated(self)
            else:
                return visitor.visitChildren(self)




    def object_alike_obfuscated(self):

        localctx = gpsrParser.Object_alike_obfuscatedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_object_alike_obfuscated)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 861
            self.match(gpsrParser.Category)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_obfuscatedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Category(self):
            return self.getToken(gpsrParser.Category, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_object_obfuscated

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObject_obfuscated" ):
                return visitor.visitObject_obfuscated(self)
            else:
                return visitor.visitChildren(self)




    def object_obfuscated(self):

        localctx = gpsrParser.Object_obfuscatedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_object_obfuscated)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 863
            self.match(gpsrParser.Category)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





