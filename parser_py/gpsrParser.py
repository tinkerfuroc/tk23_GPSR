# Generated from gpsr.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,155,742,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,1,0,4,0,134,8,0,11,0,12,0,135,1,1,1,1,3,1,140,8,1,1,2,3,2,143,
        8,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,156,8,3,1,4,
        1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,170,8,4,1,5,1,5,
        1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,3,7,209,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,219,
        8,7,1,7,1,7,1,7,1,7,3,7,225,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,262,8,7,1,8,1,8,
        1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,
        1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,
        1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,305,8,9,1,10,1,10,1,10,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,3,11,365,8,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
        1,12,1,12,1,12,3,12,379,8,12,1,12,1,12,3,12,383,8,12,1,12,1,12,1,
        12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
        12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,408,8,12,1,13,1,13,1,
        13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,
        13,425,8,13,1,13,1,13,3,13,429,8,13,1,13,1,13,1,13,3,13,434,8,13,
        1,13,1,13,1,13,1,13,3,13,440,8,13,1,14,1,14,1,14,3,14,445,8,14,1,
        15,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
        17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,467,8,17,1,17,1,17,1,17,3,
        17,472,8,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,482,8,17,
        1,17,1,17,3,17,486,8,17,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,
        1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,3,20,505,8,20,1,20,
        1,20,1,20,3,20,510,8,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
        3,20,520,8,20,1,20,1,20,1,20,3,20,525,8,20,1,20,1,20,1,20,1,20,1,
        20,3,20,532,8,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,
        21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,
        21,1,21,1,21,3,21,559,8,21,1,21,1,21,1,21,3,21,564,8,21,1,21,1,21,
        1,21,1,21,3,21,570,8,21,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,
        1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
        1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
        1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,3,23,617,
        8,23,1,24,1,24,1,24,3,24,622,8,24,1,25,1,25,1,26,1,26,1,26,1,26,
        1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,
        1,33,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,3,35,652,8,35,1,36,
        1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,3,41,666,
        8,41,1,42,1,42,1,42,1,42,1,43,1,43,1,44,1,44,1,44,1,44,1,45,1,45,
        1,45,1,45,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,48,1,48,1,48,
        1,48,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,51,
        1,51,1,52,1,52,3,52,709,8,52,1,53,1,53,1,53,1,54,1,54,1,55,1,55,
        1,56,1,56,1,57,1,57,3,57,722,8,57,1,58,1,58,1,59,1,59,1,60,1,60,
        1,61,1,61,3,61,732,8,61,1,62,1,62,1,63,1,63,1,64,1,64,1,65,1,65,
        1,65,0,0,66,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,
        38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,
        82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,
        120,122,124,126,128,130,0,25,1,0,35,37,1,0,46,51,1,0,52,57,2,0,47,
        48,58,61,1,0,62,64,1,0,65,66,1,0,67,72,1,0,73,78,1,0,79,83,1,0,84,
        86,2,0,39,39,89,91,1,0,92,93,1,0,94,98,1,0,99,104,2,0,38,38,105,
        107,1,0,109,114,1,0,117,118,1,0,119,120,2,0,103,103,117,117,2,0,
        118,118,121,123,1,0,124,125,1,0,126,127,2,0,38,38,129,130,2,0,118,
        118,131,134,1,0,136,139,764,0,133,1,0,0,0,2,139,1,0,0,0,4,142,1,
        0,0,0,6,155,1,0,0,0,8,169,1,0,0,0,10,171,1,0,0,0,12,176,1,0,0,0,
        14,261,1,0,0,0,16,263,1,0,0,0,18,304,1,0,0,0,20,306,1,0,0,0,22,364,
        1,0,0,0,24,407,1,0,0,0,26,439,1,0,0,0,28,444,1,0,0,0,30,446,1,0,
        0,0,32,449,1,0,0,0,34,485,1,0,0,0,36,487,1,0,0,0,38,492,1,0,0,0,
        40,531,1,0,0,0,42,569,1,0,0,0,44,571,1,0,0,0,46,616,1,0,0,0,48,621,
        1,0,0,0,50,623,1,0,0,0,52,625,1,0,0,0,54,629,1,0,0,0,56,631,1,0,
        0,0,58,633,1,0,0,0,60,635,1,0,0,0,62,637,1,0,0,0,64,639,1,0,0,0,
        66,641,1,0,0,0,68,643,1,0,0,0,70,651,1,0,0,0,72,653,1,0,0,0,74,655,
        1,0,0,0,76,657,1,0,0,0,78,659,1,0,0,0,80,661,1,0,0,0,82,665,1,0,
        0,0,84,667,1,0,0,0,86,671,1,0,0,0,88,673,1,0,0,0,90,677,1,0,0,0,
        92,681,1,0,0,0,94,685,1,0,0,0,96,689,1,0,0,0,98,693,1,0,0,0,100,
        696,1,0,0,0,102,700,1,0,0,0,104,708,1,0,0,0,106,710,1,0,0,0,108,
        713,1,0,0,0,110,715,1,0,0,0,112,717,1,0,0,0,114,721,1,0,0,0,116,
        723,1,0,0,0,118,725,1,0,0,0,120,727,1,0,0,0,122,731,1,0,0,0,124,
        733,1,0,0,0,126,735,1,0,0,0,128,737,1,0,0,0,130,739,1,0,0,0,132,
        134,3,2,1,0,133,132,1,0,0,0,134,135,1,0,0,0,135,133,1,0,0,0,135,
        136,1,0,0,0,136,1,1,0,0,0,137,140,3,4,2,0,138,140,3,6,3,0,139,137,
        1,0,0,0,139,138,1,0,0,0,140,3,1,0,0,0,141,143,3,130,65,0,142,141,
        1,0,0,0,142,143,1,0,0,0,143,144,1,0,0,0,144,145,3,6,3,0,145,5,1,
        0,0,0,146,156,3,24,12,0,147,156,3,22,11,0,148,156,3,32,16,0,149,
        156,3,26,13,0,150,156,3,40,20,0,151,156,3,42,21,0,152,156,3,12,6,
        0,153,156,3,16,8,0,154,156,3,46,23,0,155,146,1,0,0,0,155,147,1,0,
        0,0,155,148,1,0,0,0,155,149,1,0,0,0,155,150,1,0,0,0,155,151,1,0,
        0,0,155,152,1,0,0,0,155,153,1,0,0,0,155,154,1,0,0,0,156,7,1,0,0,
        0,157,158,3,124,62,0,158,159,5,1,0,0,159,160,3,54,27,0,160,170,1,
        0,0,0,161,162,3,124,62,0,162,163,5,2,0,0,163,164,5,150,0,0,164,170,
        1,0,0,0,165,166,3,124,62,0,166,167,5,2,0,0,167,168,3,58,29,0,168,
        170,1,0,0,0,169,157,1,0,0,0,169,161,1,0,0,0,169,165,1,0,0,0,170,
        9,1,0,0,0,171,172,5,3,0,0,172,173,5,150,0,0,173,174,5,4,0,0,174,
        175,5,151,0,0,175,11,1,0,0,0,176,177,3,14,7,0,177,13,1,0,0,0,178,
        179,3,94,47,0,179,180,5,5,0,0,180,181,3,110,55,0,181,182,5,6,0,0,
        182,183,5,153,0,0,183,262,1,0,0,0,184,185,3,110,55,0,185,186,5,7,
        0,0,186,187,5,146,0,0,187,188,5,8,0,0,188,189,5,153,0,0,189,262,
        1,0,0,0,190,191,3,112,56,0,191,192,5,9,0,0,192,193,5,146,0,0,193,
        262,1,0,0,0,194,195,3,114,57,0,195,196,5,7,0,0,196,197,5,146,0,0,
        197,198,5,10,0,0,198,199,3,82,41,0,199,262,1,0,0,0,200,201,3,96,
        48,0,201,202,5,5,0,0,202,203,3,110,55,0,203,204,5,6,0,0,204,205,
        5,153,0,0,205,262,1,0,0,0,206,208,3,88,44,0,207,209,5,142,0,0,208,
        207,1,0,0,0,208,209,1,0,0,0,209,210,1,0,0,0,210,211,3,124,62,0,211,
        212,5,7,0,0,212,213,5,144,0,0,213,214,5,10,0,0,214,215,3,82,41,0,
        215,262,1,0,0,0,216,218,3,88,44,0,217,219,5,142,0,0,218,217,1,0,
        0,0,218,219,1,0,0,0,219,220,1,0,0,0,220,221,3,124,62,0,221,222,5,
        7,0,0,222,224,5,144,0,0,223,225,5,142,0,0,224,223,1,0,0,0,224,225,
        1,0,0,0,225,226,1,0,0,0,226,227,5,5,0,0,227,228,3,84,42,0,228,262,
        1,0,0,0,229,230,3,108,54,0,230,231,5,7,0,0,231,232,5,145,0,0,232,
        233,5,11,0,0,233,234,5,151,0,0,234,235,5,12,0,0,235,236,5,153,0,
        0,236,262,1,0,0,0,237,238,3,112,56,0,238,239,5,9,0,0,239,240,5,145,
        0,0,240,241,5,11,0,0,241,242,5,153,0,0,242,262,1,0,0,0,243,244,3,
        96,48,0,244,245,5,5,0,0,245,246,3,98,49,0,246,262,1,0,0,0,247,248,
        3,96,48,0,248,249,5,5,0,0,249,250,3,102,51,0,250,262,1,0,0,0,251,
        252,3,96,48,0,252,253,5,5,0,0,253,254,3,84,42,0,254,262,1,0,0,0,
        255,256,3,108,54,0,256,257,5,13,0,0,257,258,3,66,33,0,258,259,5,
        12,0,0,259,260,3,68,34,0,260,262,1,0,0,0,261,178,1,0,0,0,261,184,
        1,0,0,0,261,190,1,0,0,0,261,194,1,0,0,0,261,200,1,0,0,0,261,206,
        1,0,0,0,261,216,1,0,0,0,261,229,1,0,0,0,261,237,1,0,0,0,261,243,
        1,0,0,0,261,247,1,0,0,0,261,251,1,0,0,0,261,255,1,0,0,0,262,15,1,
        0,0,0,263,264,3,18,9,0,264,17,1,0,0,0,265,266,3,108,54,0,266,267,
        5,7,0,0,267,268,5,146,0,0,268,269,5,12,0,0,269,270,5,153,0,0,270,
        305,1,0,0,0,271,272,3,112,56,0,272,273,5,9,0,0,273,274,3,60,30,0,
        274,275,5,14,0,0,275,276,3,20,10,0,276,305,1,0,0,0,277,278,3,112,
        56,0,278,279,5,15,0,0,279,280,3,62,31,0,280,281,5,7,0,0,281,282,
        5,144,0,0,282,283,3,20,10,0,283,305,1,0,0,0,284,285,3,112,56,0,285,
        286,5,9,0,0,286,287,3,86,43,0,287,288,5,14,0,0,288,289,3,20,10,0,
        289,305,1,0,0,0,290,291,3,112,56,0,291,292,5,9,0,0,292,293,3,86,
        43,0,293,294,5,143,0,0,294,295,3,20,10,0,295,305,1,0,0,0,296,297,
        3,76,38,0,297,298,5,7,0,0,298,299,5,151,0,0,299,305,1,0,0,0,300,
        301,3,74,37,0,301,302,5,7,0,0,302,303,3,64,32,0,303,305,1,0,0,0,
        304,265,1,0,0,0,304,271,1,0,0,0,304,277,1,0,0,0,304,284,1,0,0,0,
        304,290,1,0,0,0,304,296,1,0,0,0,304,300,1,0,0,0,305,19,1,0,0,0,306,
        307,5,11,0,0,307,308,5,153,0,0,308,21,1,0,0,0,309,310,5,16,0,0,310,
        311,5,144,0,0,311,312,5,17,0,0,312,365,5,153,0,0,313,314,3,124,62,
        0,314,315,5,7,0,0,315,316,5,144,0,0,316,317,5,4,0,0,317,318,5,151,
        0,0,318,365,1,0,0,0,319,320,3,124,62,0,320,321,5,7,0,0,321,322,5,
        147,0,0,322,323,5,4,0,0,323,324,5,151,0,0,324,365,1,0,0,0,325,326,
        5,16,0,0,326,327,5,143,0,0,327,328,5,17,0,0,328,365,5,153,0,0,329,
        330,5,18,0,0,330,331,3,86,43,0,331,332,5,19,0,0,332,333,5,153,0,
        0,333,365,1,0,0,0,334,335,5,18,0,0,335,336,3,86,43,0,336,337,5,143,
        0,0,337,338,5,8,0,0,338,339,5,153,0,0,339,365,1,0,0,0,340,341,3,
        124,62,0,341,342,5,7,0,0,342,343,5,143,0,0,343,344,5,4,0,0,344,345,
        5,151,0,0,345,365,1,0,0,0,346,347,5,20,0,0,347,348,3,86,43,0,348,
        349,5,21,0,0,349,350,5,8,0,0,350,351,5,153,0,0,351,365,1,0,0,0,352,
        353,5,20,0,0,353,354,3,86,43,0,354,355,5,143,0,0,355,356,5,8,0,0,
        356,357,5,153,0,0,357,365,1,0,0,0,358,359,3,124,62,0,359,360,5,22,
        0,0,360,361,5,143,0,0,361,362,5,4,0,0,362,363,5,151,0,0,363,365,
        1,0,0,0,364,309,1,0,0,0,364,313,1,0,0,0,364,319,1,0,0,0,364,325,
        1,0,0,0,364,329,1,0,0,0,364,334,1,0,0,0,364,340,1,0,0,0,364,346,
        1,0,0,0,364,352,1,0,0,0,364,358,1,0,0,0,365,23,1,0,0,0,366,367,3,
        104,52,0,367,368,5,10,0,0,368,369,3,10,5,0,369,408,1,0,0,0,370,371,
        3,8,4,0,371,372,5,4,0,0,372,373,5,151,0,0,373,374,5,5,0,0,374,375,
        3,104,52,0,375,408,1,0,0,0,376,378,3,92,46,0,377,379,5,142,0,0,378,
        377,1,0,0,0,378,379,1,0,0,0,379,380,1,0,0,0,380,382,3,8,4,0,381,
        383,5,142,0,0,382,381,1,0,0,0,382,383,1,0,0,0,383,384,1,0,0,0,384,
        385,5,5,0,0,385,386,3,104,52,0,386,408,1,0,0,0,387,388,5,23,0,0,
        388,408,5,152,0,0,389,390,5,24,0,0,390,408,5,152,0,0,391,392,5,25,
        0,0,392,408,5,152,0,0,393,394,5,26,0,0,394,408,5,151,0,0,395,396,
        5,27,0,0,396,408,5,151,0,0,397,398,5,28,0,0,398,408,5,151,0,0,399,
        400,5,29,0,0,400,401,5,151,0,0,401,402,5,30,0,0,402,408,3,56,28,
        0,403,404,5,29,0,0,404,405,5,151,0,0,405,406,5,30,0,0,406,408,3,
        58,29,0,407,366,1,0,0,0,407,370,1,0,0,0,407,376,1,0,0,0,407,387,
        1,0,0,0,407,389,1,0,0,0,407,391,1,0,0,0,407,393,1,0,0,0,407,395,
        1,0,0,0,407,397,1,0,0,0,407,399,1,0,0,0,407,403,1,0,0,0,408,25,1,
        0,0,0,409,410,3,128,64,0,410,411,5,155,0,0,411,412,5,11,0,0,412,
        413,5,152,0,0,413,414,5,12,0,0,414,415,5,151,0,0,415,440,1,0,0,0,
        416,417,5,31,0,0,417,418,5,155,0,0,418,419,5,32,0,0,419,420,5,152,
        0,0,420,421,5,5,0,0,421,422,3,128,64,0,422,424,5,149,0,0,423,425,
        3,30,15,0,424,423,1,0,0,0,424,425,1,0,0,0,425,440,1,0,0,0,426,428,
        3,90,45,0,427,429,5,142,0,0,428,427,1,0,0,0,428,429,1,0,0,0,429,
        430,1,0,0,0,430,431,5,31,0,0,431,433,5,155,0,0,432,434,5,142,0,0,
        433,432,1,0,0,0,433,434,1,0,0,0,434,435,1,0,0,0,435,436,5,5,0,0,
        436,437,3,128,64,0,437,438,5,149,0,0,438,440,1,0,0,0,439,409,1,0,
        0,0,439,416,1,0,0,0,439,426,1,0,0,0,440,27,1,0,0,0,441,442,5,31,
        0,0,442,445,5,155,0,0,443,445,5,33,0,0,444,441,1,0,0,0,444,443,1,
        0,0,0,445,29,1,0,0,0,446,447,5,12,0,0,447,448,5,151,0,0,448,31,1,
        0,0,0,449,450,3,34,17,0,450,33,1,0,0,0,451,452,3,126,63,0,452,453,
        5,155,0,0,453,454,5,11,0,0,454,455,5,152,0,0,455,456,5,12,0,0,456,
        457,5,152,0,0,457,486,1,0,0,0,458,459,5,31,0,0,459,460,5,155,0,0,
        460,461,5,32,0,0,461,462,5,152,0,0,462,463,5,5,0,0,463,486,3,36,
        18,0,464,466,3,90,45,0,465,467,5,142,0,0,466,465,1,0,0,0,466,467,
        1,0,0,0,467,468,1,0,0,0,468,469,5,31,0,0,469,471,5,155,0,0,470,472,
        5,142,0,0,471,470,1,0,0,0,471,472,1,0,0,0,472,473,1,0,0,0,473,474,
        5,5,0,0,474,475,3,36,18,0,475,486,1,0,0,0,476,477,3,126,63,0,477,
        478,5,155,0,0,478,479,5,12,0,0,479,481,5,152,0,0,480,482,5,142,0,
        0,481,480,1,0,0,0,481,482,1,0,0,0,482,483,1,0,0,0,483,484,3,38,19,
        0,484,486,1,0,0,0,485,451,1,0,0,0,485,458,1,0,0,0,485,464,1,0,0,
        0,485,476,1,0,0,0,486,35,1,0,0,0,487,488,3,126,63,0,488,489,5,149,
        0,0,489,490,5,12,0,0,490,491,5,152,0,0,491,37,1,0,0,0,492,493,5,
        34,0,0,493,494,7,0,0,0,494,495,5,38,0,0,495,496,5,149,0,0,496,497,
        5,32,0,0,497,498,5,152,0,0,498,39,1,0,0,0,499,500,5,31,0,0,500,501,
        5,155,0,0,501,502,5,32,0,0,502,504,5,152,0,0,503,505,5,142,0,0,504,
        503,1,0,0,0,504,505,1,0,0,0,505,506,1,0,0,0,506,507,3,128,64,0,507,
        509,5,149,0,0,508,510,5,142,0,0,509,508,1,0,0,0,509,510,1,0,0,0,
        510,511,1,0,0,0,511,512,5,5,0,0,512,513,3,92,46,0,513,532,1,0,0,
        0,514,515,5,31,0,0,515,516,5,155,0,0,516,517,5,32,0,0,517,519,5,
        152,0,0,518,520,5,142,0,0,519,518,1,0,0,0,519,520,1,0,0,0,520,521,
        1,0,0,0,521,522,3,128,64,0,522,524,5,149,0,0,523,525,5,142,0,0,524,
        523,1,0,0,0,524,525,1,0,0,0,525,526,1,0,0,0,526,527,5,5,0,0,527,
        528,3,126,63,0,528,529,5,149,0,0,529,530,5,39,0,0,530,532,1,0,0,
        0,531,499,1,0,0,0,531,514,1,0,0,0,532,41,1,0,0,0,533,534,3,128,64,
        0,534,535,5,155,0,0,535,570,1,0,0,0,536,537,3,112,56,0,537,538,5,
        9,0,0,538,539,5,148,0,0,539,570,1,0,0,0,540,541,3,114,57,0,541,542,
        5,148,0,0,542,543,5,10,0,0,543,544,3,82,41,0,544,570,1,0,0,0,545,
        546,3,126,63,0,546,547,5,155,0,0,547,548,5,12,0,0,548,549,5,152,
        0,0,549,570,1,0,0,0,550,551,5,31,0,0,551,552,3,44,22,0,552,553,5,
        5,0,0,553,554,3,126,63,0,554,555,5,149,0,0,555,570,1,0,0,0,556,558,
        3,90,45,0,557,559,5,142,0,0,558,557,1,0,0,0,558,559,1,0,0,0,559,
        560,1,0,0,0,560,561,5,31,0,0,561,563,3,44,22,0,562,564,5,142,0,0,
        563,562,1,0,0,0,563,564,1,0,0,0,564,565,1,0,0,0,565,566,5,5,0,0,
        566,567,3,126,63,0,567,568,5,149,0,0,568,570,1,0,0,0,569,533,1,0,
        0,0,569,536,1,0,0,0,569,540,1,0,0,0,569,545,1,0,0,0,569,550,1,0,
        0,0,569,556,1,0,0,0,570,43,1,0,0,0,571,572,5,155,0,0,572,45,1,0,
        0,0,573,574,3,78,39,0,574,575,5,40,0,0,575,576,3,52,26,0,576,617,
        1,0,0,0,577,578,3,80,40,0,578,579,5,155,0,0,579,580,5,32,0,0,580,
        581,3,70,35,0,581,582,5,41,0,0,582,583,5,149,0,0,583,584,5,10,0,
        0,584,585,3,52,26,0,585,617,1,0,0,0,586,587,3,80,40,0,587,588,5,
        155,0,0,588,589,5,32,0,0,589,590,5,152,0,0,590,591,5,42,0,0,591,
        592,5,149,0,0,592,593,5,43,0,0,593,617,1,0,0,0,594,595,3,80,40,0,
        595,596,5,155,0,0,596,597,5,32,0,0,597,598,5,152,0,0,598,599,5,41,
        0,0,599,600,5,149,0,0,600,601,5,10,0,0,601,602,5,155,0,0,602,603,
        5,32,0,0,603,604,5,152,0,0,604,617,1,0,0,0,605,606,3,80,40,0,606,
        607,5,155,0,0,607,608,5,32,0,0,608,609,5,152,0,0,609,610,5,5,0,0,
        610,611,3,126,63,0,611,612,5,149,0,0,612,613,5,10,0,0,613,614,5,
        149,0,0,614,615,3,68,34,0,615,617,1,0,0,0,616,573,1,0,0,0,616,577,
        1,0,0,0,616,586,1,0,0,0,616,594,1,0,0,0,616,605,1,0,0,0,617,47,1,
        0,0,0,618,622,5,44,0,0,619,620,5,45,0,0,620,622,3,50,25,0,621,618,
        1,0,0,0,621,619,1,0,0,0,622,49,1,0,0,0,623,624,7,1,0,0,624,51,1,
        0,0,0,625,626,3,48,24,0,626,627,5,4,0,0,627,628,5,151,0,0,628,53,
        1,0,0,0,629,630,7,2,0,0,630,55,1,0,0,0,631,632,7,3,0,0,632,57,1,
        0,0,0,633,634,7,4,0,0,634,59,1,0,0,0,635,636,7,5,0,0,636,61,1,0,
        0,0,637,638,7,6,0,0,638,63,1,0,0,0,639,640,7,7,0,0,640,65,1,0,0,
        0,641,642,7,8,0,0,642,67,1,0,0,0,643,644,7,9,0,0,644,69,1,0,0,0,
        645,646,3,72,36,0,646,647,5,87,0,0,647,652,1,0,0,0,648,649,3,72,
        36,0,649,650,5,88,0,0,650,652,1,0,0,0,651,645,1,0,0,0,651,648,1,
        0,0,0,652,71,1,0,0,0,653,654,7,10,0,0,654,73,1,0,0,0,655,656,7,11,
        0,0,656,75,1,0,0,0,657,658,7,12,0,0,658,77,1,0,0,0,659,660,7,13,
        0,0,660,79,1,0,0,0,661,662,7,14,0,0,662,81,1,0,0,0,663,666,5,108,
        0,0,664,666,3,10,5,0,665,663,1,0,0,0,665,664,1,0,0,0,666,83,1,0,
        0,0,667,668,3,110,55,0,668,669,5,6,0,0,669,670,5,153,0,0,670,85,
        1,0,0,0,671,672,7,15,0,0,672,87,1,0,0,0,673,674,3,120,60,0,674,675,
        5,12,0,0,675,676,5,153,0,0,676,89,1,0,0,0,677,678,3,120,60,0,678,
        679,5,12,0,0,679,680,5,152,0,0,680,91,1,0,0,0,681,682,3,120,60,0,
        682,683,5,12,0,0,683,684,5,151,0,0,684,93,1,0,0,0,685,686,3,116,
        58,0,686,687,5,7,0,0,687,688,5,144,0,0,688,95,1,0,0,0,689,690,3,
        94,47,0,690,691,5,11,0,0,691,692,5,153,0,0,692,97,1,0,0,0,693,694,
        3,114,57,0,694,695,5,115,0,0,695,99,1,0,0,0,696,697,3,114,57,0,697,
        698,5,116,0,0,698,699,5,155,0,0,699,101,1,0,0,0,700,701,3,114,57,
        0,701,702,5,116,0,0,702,703,5,155,0,0,703,704,5,32,0,0,704,705,5,
        152,0,0,705,103,1,0,0,0,706,709,5,140,0,0,707,709,3,106,53,0,708,
        706,1,0,0,0,708,707,1,0,0,0,709,105,1,0,0,0,710,711,3,118,59,0,711,
        712,5,141,0,0,712,107,1,0,0,0,713,714,7,16,0,0,714,109,1,0,0,0,715,
        716,7,17,0,0,716,111,1,0,0,0,717,718,7,18,0,0,718,113,1,0,0,0,719,
        722,3,112,56,0,720,722,5,101,0,0,721,719,1,0,0,0,721,720,1,0,0,0,
        722,115,1,0,0,0,723,724,7,19,0,0,724,117,1,0,0,0,725,726,7,20,0,
        0,726,119,1,0,0,0,727,728,7,21,0,0,728,121,1,0,0,0,729,732,3,120,
        60,0,730,732,5,128,0,0,731,729,1,0,0,0,731,730,1,0,0,0,732,123,1,
        0,0,0,733,734,7,22,0,0,734,125,1,0,0,0,735,736,7,23,0,0,736,127,
        1,0,0,0,737,738,5,135,0,0,738,129,1,0,0,0,739,740,7,24,0,0,740,131,
        1,0,0,0,38,135,139,142,155,169,208,218,224,261,304,364,378,382,407,
        424,428,433,439,444,466,471,481,485,504,509,519,524,531,558,563,
        569,616,621,651,665,708,721,731
    ]

class gpsrParser ( Parser ):

    grammarFileName = "gpsr.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'a'", "'a person'", "'the person'", "'in the'", 
                     "'and'", "'it on the'", "'the'", "'on the'", "'me the'", 
                     "'to'", "'from the'", "'to the'", "'my'", "'object'", 
                     "'me the object'", "'tell me how many'", "'there are on the'", 
                     "'tell me what's the'", "'object on the'", "'tell me which are the three'", 
                     "'objects'", "'three'", "'tell me the name of the person at the'", 
                     "'tell me the gender of the person at the'", "'tell me the pose of the person at the'", 
                     "'tell me the name of the person in the'", "'tell me the gender of the person in the'", 
                     "'tell me the pose of the person in the'", "'tell me how many people in the'", 
                     "'are'", "'meet'", "'at the'", "'find a person'", "'you'", 
                     "'may'", "'can'", "'will'", "'find'", "'back'", "'drinks to'", 
                     "'and introduce'", "'and ask'", "'to leave'", "'everyone'", 
                     "'all the'", "'people'", "'men'", "'women'", "'guests'", 
                     "'elders'", "'children'", "'man'", "'woman'", "'boy'", 
                     "'girl'", "'male person'", "'female person'", "'boys'", 
                     "'girls'", "'male'", "'female'", "'sitting'", "'standing'", 
                     "'lying down'", "'left most'", "'right most'", "'at the left of'", 
                     "'at the right of'", "'on top of'", "'above'", "'behind'", 
                     "'under'", "'litter'", "'garbage'", "'trash'", "'waste'", 
                     "'debris'", "'junk'", "'bag'", "'baggage'", "'valise'", 
                     "'suitcase'", "'trolley'", "'taxi'", "'cab'", "'uber'", 
                     "'entrance'", "'door'", "'front'", "'main'", "'rear'", 
                     "'take out'", "'dump'", "'clean out'", "'clean up'", 
                     "'tidy op'", "'neaten'", "'order'", "'serve'", "'arrange'", 
                     "'deliver'", "'distribute'", "'give'", "'provide'", 
                     "'contact'", "'face'", "'greet'", "'me'", "'biggest'", 
                     "'largest'", "'smallest'", "'heaviest'", "'lightest'", 
                     "'thinnest'", "'it to me'", "'it to'", "'bring'", "'take'", 
                     "'put'", "'place'", "'get'", "'grasp'", "'pick up'", 
                     "'tell'", "'say'", "'go'", "'navigate'", "'enter'", 
                     "'locate'", "'look for'", "'guide'", "'escort'", "'lead'", 
                     "'accompany'", "'follow'", "'please'", "'could you'", 
                     "'robot please'", "'could you please'", "'answer a question'", 
                     "<INVALID>", "','" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "Answer", "Whattosay", "Comma", "Category", "Object", 
                      "Object_alike", "Object_known", "Object_alike_obfuscated", 
                      "Object_obfuscated", "Pron", "Gesture", "Room", "Beacon", 
                      "Placement", "Location_except_room", "Name" ]

    RULE_instruction = 0
    RULE_mainSentence = 1
    RULE_pmain = 2
    RULE_main = 3
    RULE_findp = 4
    RULE_whoWhere = 5
    RULE_man = 6
    RULE_deliver = 7
    RULE_complexman = 8
    RULE_cmancmd = 9
    RULE_cmanobjsrc = 10
    RULE_fndobj = 11
    RULE_fndppl = 12
    RULE_follow = 13
    RULE_fllmeet = 14
    RULE_fllwdest = 15
    RULE_guide = 16
    RULE_gdcmd = 17
    RULE_guideto = 18
    RULE_gdwhere = 19
    RULE_followout = 20
    RULE_incomplete = 21
    RULE_inguidewho = 22
    RULE_partyhost = 23
    RULE_phpeople = 24
    RULE_peopletype = 25
    RULE_phpeopler = 26
    RULE_pgenders = 27
    RULE_pgenderp = 28
    RULE_pose = 29
    RULE_abspos = 30
    RULE_relpos = 31
    RULE_garbage = 32
    RULE_luggage = 33
    RULE_taxi = 34
    RULE_door = 35
    RULE_doorpos = 36
    RULE_vbtakeout = 37
    RULE_vbcleanup = 38
    RULE_vbserve = 39
    RULE_vbmeet = 40
    RULE_someone = 41
    RULE_place = 42
    RULE_oprop = 43
    RULE_goplace = 44
    RULE_gobeacon = 45
    RULE_goroom = 46
    RULE_take = 47
    RULE_takefrom = 48
    RULE_delivme = 49
    RULE_delivto = 50
    RULE_delivat = 51
    RULE_talk = 52
    RULE_speak = 53
    RULE_vbbtake = 54
    RULE_vbplace = 55
    RULE_vbbring = 56
    RULE_vbdeliver = 57
    RULE_vbtake = 58
    RULE_vbspeak = 59
    RULE_vbgopl = 60
    RULE_vbgor = 61
    RULE_vbfind = 62
    RULE_vbguide = 63
    RULE_vbfollow = 64
    RULE_polite = 65

    ruleNames =  [ "instruction", "mainSentence", "pmain", "main", "findp", 
                   "whoWhere", "man", "deliver", "complexman", "cmancmd", 
                   "cmanobjsrc", "fndobj", "fndppl", "follow", "fllmeet", 
                   "fllwdest", "guide", "gdcmd", "guideto", "gdwhere", "followout", 
                   "incomplete", "inguidewho", "partyhost", "phpeople", 
                   "peopletype", "phpeopler", "pgenders", "pgenderp", "pose", 
                   "abspos", "relpos", "garbage", "luggage", "taxi", "door", 
                   "doorpos", "vbtakeout", "vbcleanup", "vbserve", "vbmeet", 
                   "someone", "place", "oprop", "goplace", "gobeacon", "goroom", 
                   "take", "takefrom", "delivme", "delivto", "delivat", 
                   "talk", "speak", "vbbtake", "vbplace", "vbbring", "vbdeliver", 
                   "vbtake", "vbspeak", "vbgopl", "vbgor", "vbfind", "vbguide", 
                   "vbfollow", "polite" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    T__73=74
    T__74=75
    T__75=76
    T__76=77
    T__77=78
    T__78=79
    T__79=80
    T__80=81
    T__81=82
    T__82=83
    T__83=84
    T__84=85
    T__85=86
    T__86=87
    T__87=88
    T__88=89
    T__89=90
    T__90=91
    T__91=92
    T__92=93
    T__93=94
    T__94=95
    T__95=96
    T__96=97
    T__97=98
    T__98=99
    T__99=100
    T__100=101
    T__101=102
    T__102=103
    T__103=104
    T__104=105
    T__105=106
    T__106=107
    T__107=108
    T__108=109
    T__109=110
    T__110=111
    T__111=112
    T__112=113
    T__113=114
    T__114=115
    T__115=116
    T__116=117
    T__117=118
    T__118=119
    T__119=120
    T__120=121
    T__121=122
    T__122=123
    T__123=124
    T__124=125
    T__125=126
    T__126=127
    T__127=128
    T__128=129
    T__129=130
    T__130=131
    T__131=132
    T__132=133
    T__133=134
    T__134=135
    T__135=136
    T__136=137
    T__137=138
    T__138=139
    Answer=140
    Whattosay=141
    Comma=142
    Category=143
    Object=144
    Object_alike=145
    Object_known=146
    Object_alike_obfuscated=147
    Object_obfuscated=148
    Pron=149
    Gesture=150
    Room=151
    Beacon=152
    Placement=153
    Location_except_room=154
    Name=155

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class InstructionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mainSentence(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(gpsrParser.MainSentenceContext)
            else:
                return self.getTypedRuleContext(gpsrParser.MainSentenceContext,i)


        def getRuleIndex(self):
            return gpsrParser.RULE_instruction

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInstruction" ):
                return visitor.visitInstruction(self)
            else:
                return visitor.visitChildren(self)




    def instruction(self):

        localctx = gpsrParser.InstructionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_instruction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 133 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 132
                self.mainSentence()
                self.state = 135 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 278092120064) != 0) or ((((_la - 92)) & ~0x3f) == 0 and ((1 << (_la - 92)) & 562881200455679) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MainSentenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pmain(self):
            return self.getTypedRuleContext(gpsrParser.PmainContext,0)


        def main(self):
            return self.getTypedRuleContext(gpsrParser.MainContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_mainSentence

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMainSentence" ):
                return visitor.visitMainSentence(self)
            else:
                return visitor.visitChildren(self)




    def mainSentence(self):

        localctx = gpsrParser.MainSentenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_mainSentence)
        try:
            self.state = 139
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 137
                self.pmain()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 138
                self.main()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PmainContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def main(self):
            return self.getTypedRuleContext(gpsrParser.MainContext,0)


        def polite(self):
            return self.getTypedRuleContext(gpsrParser.PoliteContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_pmain

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPmain" ):
                return visitor.visitPmain(self)
            else:
                return visitor.visitChildren(self)




    def pmain(self):

        localctx = gpsrParser.PmainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_pmain)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 142
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & 15) != 0):
                self.state = 141
                self.polite()


            self.state = 144
            self.main()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MainContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fndppl(self):
            return self.getTypedRuleContext(gpsrParser.FndpplContext,0)


        def fndobj(self):
            return self.getTypedRuleContext(gpsrParser.FndobjContext,0)


        def guide(self):
            return self.getTypedRuleContext(gpsrParser.GuideContext,0)


        def follow(self):
            return self.getTypedRuleContext(gpsrParser.FollowContext,0)


        def followout(self):
            return self.getTypedRuleContext(gpsrParser.FollowoutContext,0)


        def incomplete(self):
            return self.getTypedRuleContext(gpsrParser.IncompleteContext,0)


        def man(self):
            return self.getTypedRuleContext(gpsrParser.ManContext,0)


        def complexman(self):
            return self.getTypedRuleContext(gpsrParser.ComplexmanContext,0)


        def partyhost(self):
            return self.getTypedRuleContext(gpsrParser.PartyhostContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_main

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMain" ):
                return visitor.visitMain(self)
            else:
                return visitor.visitChildren(self)




    def main(self):

        localctx = gpsrParser.MainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_main)
        try:
            self.state = 155
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 146
                self.fndppl()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 147
                self.fndobj()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 148
                self.guide()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 149
                self.follow()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 150
                self.followout()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 151
                self.incomplete()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 152
                self.man()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 153
                self.complexman()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 154
                self.partyhost()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FindpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_findp

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Find_genderContext(FindpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FindpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def vbfind(self):
            return self.getTypedRuleContext(gpsrParser.VbfindContext,0)

        def pgenders(self):
            return self.getTypedRuleContext(gpsrParser.PgendersContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFind_gender" ):
                return visitor.visitFind_gender(self)
            else:
                return visitor.visitChildren(self)


    class Find_gestureContext(FindpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FindpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def vbfind(self):
            return self.getTypedRuleContext(gpsrParser.VbfindContext,0)

        def Gesture(self):
            return self.getToken(gpsrParser.Gesture, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFind_gesture" ):
                return visitor.visitFind_gesture(self)
            else:
                return visitor.visitChildren(self)


    class Find_poseContext(FindpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FindpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def vbfind(self):
            return self.getTypedRuleContext(gpsrParser.VbfindContext,0)

        def pose(self):
            return self.getTypedRuleContext(gpsrParser.PoseContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFind_pose" ):
                return visitor.visitFind_pose(self)
            else:
                return visitor.visitChildren(self)



    def findp(self):

        localctx = gpsrParser.FindpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_findp)
        try:
            self.state = 169
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                localctx = gpsrParser.Find_genderContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 157
                self.vbfind()
                self.state = 158
                self.match(gpsrParser.T__0)
                self.state = 159
                self.pgenders()
                pass

            elif la_ == 2:
                localctx = gpsrParser.Find_gestureContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 161
                self.vbfind()
                self.state = 162
                self.match(gpsrParser.T__1)
                self.state = 163
                self.match(gpsrParser.Gesture)
                pass

            elif la_ == 3:
                localctx = gpsrParser.Find_poseContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 165
                self.vbfind()
                self.state = 166
                self.match(gpsrParser.T__1)
                self.state = 167
                self.pose()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhoWhereContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Gesture(self):
            return self.getToken(gpsrParser.Gesture, 0)

        def Room(self):
            return self.getToken(gpsrParser.Room, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_whoWhere

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhoWhere" ):
                return visitor.visitWhoWhere(self)
            else:
                return visitor.visitChildren(self)




    def whoWhere(self):

        localctx = gpsrParser.WhoWhereContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_whoWhere)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 171
            self.match(gpsrParser.T__2)
            self.state = 172
            self.match(gpsrParser.Gesture)
            self.state = 173
            self.match(gpsrParser.T__3)
            self.state = 174
            self.match(gpsrParser.Room)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ManContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def deliver(self):
            return self.getTypedRuleContext(gpsrParser.DeliverContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_man

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMan" ):
                return visitor.visitMan(self)
            else:
                return visitor.visitChildren(self)




    def man(self):

        localctx = gpsrParser.ManContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_man)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 176
            self.deliver()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeliverContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def take(self):
            return self.getTypedRuleContext(gpsrParser.TakeContext,0)


        def vbplace(self):
            return self.getTypedRuleContext(gpsrParser.VbplaceContext,0)


        def Placement(self):
            return self.getToken(gpsrParser.Placement, 0)

        def Object_known(self):
            return self.getToken(gpsrParser.Object_known, 0)

        def vbbring(self):
            return self.getTypedRuleContext(gpsrParser.VbbringContext,0)


        def vbdeliver(self):
            return self.getTypedRuleContext(gpsrParser.VbdeliverContext,0)


        def someone(self):
            return self.getTypedRuleContext(gpsrParser.SomeoneContext,0)


        def takefrom(self):
            return self.getTypedRuleContext(gpsrParser.TakefromContext,0)


        def goplace(self):
            return self.getTypedRuleContext(gpsrParser.GoplaceContext,0)


        def vbfind(self):
            return self.getTypedRuleContext(gpsrParser.VbfindContext,0)


        def Object(self):
            return self.getToken(gpsrParser.Object, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(gpsrParser.Comma)
            else:
                return self.getToken(gpsrParser.Comma, i)

        def place(self):
            return self.getTypedRuleContext(gpsrParser.PlaceContext,0)


        def vbbtake(self):
            return self.getTypedRuleContext(gpsrParser.VbbtakeContext,0)


        def Object_alike(self):
            return self.getToken(gpsrParser.Object_alike, 0)

        def Room(self):
            return self.getToken(gpsrParser.Room, 0)

        def delivme(self):
            return self.getTypedRuleContext(gpsrParser.DelivmeContext,0)


        def delivat(self):
            return self.getTypedRuleContext(gpsrParser.DelivatContext,0)


        def luggage(self):
            return self.getTypedRuleContext(gpsrParser.LuggageContext,0)


        def taxi(self):
            return self.getTypedRuleContext(gpsrParser.TaxiContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_deliver

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeliver" ):
                return visitor.visitDeliver(self)
            else:
                return visitor.visitChildren(self)




    def deliver(self):

        localctx = gpsrParser.DeliverContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_deliver)
        self._la = 0 # Token type
        try:
            self.state = 261
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 178
                self.take()
                self.state = 179
                self.match(gpsrParser.T__4)
                self.state = 180
                self.vbplace()
                self.state = 181
                self.match(gpsrParser.T__5)
                self.state = 182
                self.match(gpsrParser.Placement)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 184
                self.vbplace()
                self.state = 185
                self.match(gpsrParser.T__6)
                self.state = 186
                self.match(gpsrParser.Object_known)
                self.state = 187
                self.match(gpsrParser.T__7)
                self.state = 188
                self.match(gpsrParser.Placement)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 190
                self.vbbring()
                self.state = 191
                self.match(gpsrParser.T__8)
                self.state = 192
                self.match(gpsrParser.Object_known)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 194
                self.vbdeliver()
                self.state = 195
                self.match(gpsrParser.T__6)
                self.state = 196
                self.match(gpsrParser.Object_known)
                self.state = 197
                self.match(gpsrParser.T__9)
                self.state = 198
                self.someone()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 200
                self.takefrom()
                self.state = 201
                self.match(gpsrParser.T__4)
                self.state = 202
                self.vbplace()
                self.state = 203
                self.match(gpsrParser.T__5)
                self.state = 204
                self.match(gpsrParser.Placement)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 206
                self.goplace()
                self.state = 208
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==142:
                    self.state = 207
                    self.match(gpsrParser.Comma)


                self.state = 210
                self.vbfind()
                self.state = 211
                self.match(gpsrParser.T__6)
                self.state = 212
                self.match(gpsrParser.Object)
                self.state = 213
                self.match(gpsrParser.T__9)
                self.state = 214
                self.someone()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 216
                self.goplace()
                self.state = 218
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==142:
                    self.state = 217
                    self.match(gpsrParser.Comma)


                self.state = 220
                self.vbfind()
                self.state = 221
                self.match(gpsrParser.T__6)
                self.state = 222
                self.match(gpsrParser.Object)
                self.state = 224
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==142:
                    self.state = 223
                    self.match(gpsrParser.Comma)


                self.state = 226
                self.match(gpsrParser.T__4)
                self.state = 227
                self.place()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 229
                self.vbbtake()
                self.state = 230
                self.match(gpsrParser.T__6)
                self.state = 231
                self.match(gpsrParser.Object_alike)
                self.state = 232
                self.match(gpsrParser.T__10)
                self.state = 233
                self.match(gpsrParser.Room)
                self.state = 234
                self.match(gpsrParser.T__11)
                self.state = 235
                self.match(gpsrParser.Placement)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 237
                self.vbbring()
                self.state = 238
                self.match(gpsrParser.T__8)
                self.state = 239
                self.match(gpsrParser.Object_alike)
                self.state = 240
                self.match(gpsrParser.T__10)
                self.state = 241
                self.match(gpsrParser.Placement)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 243
                self.takefrom()
                self.state = 244
                self.match(gpsrParser.T__4)
                self.state = 245
                self.delivme()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 247
                self.takefrom()
                self.state = 248
                self.match(gpsrParser.T__4)
                self.state = 249
                self.delivat()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 251
                self.takefrom()
                self.state = 252
                self.match(gpsrParser.T__4)
                self.state = 253
                self.place()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 255
                self.vbbtake()
                self.state = 256
                self.match(gpsrParser.T__12)
                self.state = 257
                self.luggage()
                self.state = 258
                self.match(gpsrParser.T__11)
                self.state = 259
                self.taxi()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComplexmanContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cmancmd(self):
            return self.getTypedRuleContext(gpsrParser.CmancmdContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_complexman

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComplexman" ):
                return visitor.visitComplexman(self)
            else:
                return visitor.visitChildren(self)




    def complexman(self):

        localctx = gpsrParser.ComplexmanContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_complexman)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 263
            self.cmancmd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CmancmdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbbtake(self):
            return self.getTypedRuleContext(gpsrParser.VbbtakeContext,0)


        def Object_known(self):
            return self.getToken(gpsrParser.Object_known, 0)

        def Placement(self):
            return self.getToken(gpsrParser.Placement, 0)

        def vbbring(self):
            return self.getTypedRuleContext(gpsrParser.VbbringContext,0)


        def abspos(self):
            return self.getTypedRuleContext(gpsrParser.AbsposContext,0)


        def cmanobjsrc(self):
            return self.getTypedRuleContext(gpsrParser.CmanobjsrcContext,0)


        def relpos(self):
            return self.getTypedRuleContext(gpsrParser.RelposContext,0)


        def Object(self):
            return self.getToken(gpsrParser.Object, 0)

        def oprop(self):
            return self.getTypedRuleContext(gpsrParser.OpropContext,0)


        def Category(self):
            return self.getToken(gpsrParser.Category, 0)

        def vbcleanup(self):
            return self.getTypedRuleContext(gpsrParser.VbcleanupContext,0)


        def Room(self):
            return self.getToken(gpsrParser.Room, 0)

        def vbtakeout(self):
            return self.getTypedRuleContext(gpsrParser.VbtakeoutContext,0)


        def garbage(self):
            return self.getTypedRuleContext(gpsrParser.GarbageContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_cmancmd

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCmancmd" ):
                return visitor.visitCmancmd(self)
            else:
                return visitor.visitChildren(self)




    def cmancmd(self):

        localctx = gpsrParser.CmancmdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_cmancmd)
        try:
            self.state = 304
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 265
                self.vbbtake()
                self.state = 266
                self.match(gpsrParser.T__6)
                self.state = 267
                self.match(gpsrParser.Object_known)
                self.state = 268
                self.match(gpsrParser.T__11)
                self.state = 269
                self.match(gpsrParser.Placement)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 271
                self.vbbring()
                self.state = 272
                self.match(gpsrParser.T__8)
                self.state = 273
                self.abspos()
                self.state = 274
                self.match(gpsrParser.T__13)
                self.state = 275
                self.cmanobjsrc()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 277
                self.vbbring()
                self.state = 278
                self.match(gpsrParser.T__14)
                self.state = 279
                self.relpos()
                self.state = 280
                self.match(gpsrParser.T__6)
                self.state = 281
                self.match(gpsrParser.Object)
                self.state = 282
                self.cmanobjsrc()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 284
                self.vbbring()
                self.state = 285
                self.match(gpsrParser.T__8)
                self.state = 286
                self.oprop()
                self.state = 287
                self.match(gpsrParser.T__13)
                self.state = 288
                self.cmanobjsrc()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 290
                self.vbbring()
                self.state = 291
                self.match(gpsrParser.T__8)
                self.state = 292
                self.oprop()
                self.state = 293
                self.match(gpsrParser.Category)
                self.state = 294
                self.cmanobjsrc()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 296
                self.vbcleanup()
                self.state = 297
                self.match(gpsrParser.T__6)
                self.state = 298
                self.match(gpsrParser.Room)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 300
                self.vbtakeout()
                self.state = 301
                self.match(gpsrParser.T__6)
                self.state = 302
                self.garbage()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CmanobjsrcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Placement(self):
            return self.getToken(gpsrParser.Placement, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_cmanobjsrc

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCmanobjsrc" ):
                return visitor.visitCmanobjsrc(self)
            else:
                return visitor.visitChildren(self)




    def cmanobjsrc(self):

        localctx = gpsrParser.CmanobjsrcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_cmanobjsrc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 306
            self.match(gpsrParser.T__10)
            self.state = 307
            self.match(gpsrParser.Placement)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FndobjContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Object(self):
            return self.getToken(gpsrParser.Object, 0)

        def Placement(self):
            return self.getToken(gpsrParser.Placement, 0)

        def vbfind(self):
            return self.getTypedRuleContext(gpsrParser.VbfindContext,0)


        def Room(self):
            return self.getToken(gpsrParser.Room, 0)

        def Object_alike_obfuscated(self):
            return self.getToken(gpsrParser.Object_alike_obfuscated, 0)

        def Category(self):
            return self.getToken(gpsrParser.Category, 0)

        def oprop(self):
            return self.getTypedRuleContext(gpsrParser.OpropContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_fndobj

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFndobj" ):
                return visitor.visitFndobj(self)
            else:
                return visitor.visitChildren(self)




    def fndobj(self):

        localctx = gpsrParser.FndobjContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_fndobj)
        try:
            self.state = 364
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 309
                self.match(gpsrParser.T__15)
                self.state = 310
                self.match(gpsrParser.Object)
                self.state = 311
                self.match(gpsrParser.T__16)
                self.state = 312
                self.match(gpsrParser.Placement)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 313
                self.vbfind()
                self.state = 314
                self.match(gpsrParser.T__6)
                self.state = 315
                self.match(gpsrParser.Object)
                self.state = 316
                self.match(gpsrParser.T__3)
                self.state = 317
                self.match(gpsrParser.Room)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 319
                self.vbfind()
                self.state = 320
                self.match(gpsrParser.T__6)
                self.state = 321
                self.match(gpsrParser.Object_alike_obfuscated)
                self.state = 322
                self.match(gpsrParser.T__3)
                self.state = 323
                self.match(gpsrParser.Room)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 325
                self.match(gpsrParser.T__15)
                self.state = 326
                self.match(gpsrParser.Category)
                self.state = 327
                self.match(gpsrParser.T__16)
                self.state = 328
                self.match(gpsrParser.Placement)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 329
                self.match(gpsrParser.T__17)
                self.state = 330
                self.oprop()
                self.state = 331
                self.match(gpsrParser.T__18)
                self.state = 332
                self.match(gpsrParser.Placement)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 334
                self.match(gpsrParser.T__17)
                self.state = 335
                self.oprop()
                self.state = 336
                self.match(gpsrParser.Category)
                self.state = 337
                self.match(gpsrParser.T__7)
                self.state = 338
                self.match(gpsrParser.Placement)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 340
                self.vbfind()
                self.state = 341
                self.match(gpsrParser.T__6)
                self.state = 342
                self.match(gpsrParser.Category)
                self.state = 343
                self.match(gpsrParser.T__3)
                self.state = 344
                self.match(gpsrParser.Room)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 346
                self.match(gpsrParser.T__19)
                self.state = 347
                self.oprop()
                self.state = 348
                self.match(gpsrParser.T__20)
                self.state = 349
                self.match(gpsrParser.T__7)
                self.state = 350
                self.match(gpsrParser.Placement)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 352
                self.match(gpsrParser.T__19)
                self.state = 353
                self.oprop()
                self.state = 354
                self.match(gpsrParser.Category)
                self.state = 355
                self.match(gpsrParser.T__7)
                self.state = 356
                self.match(gpsrParser.Placement)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 358
                self.vbfind()
                self.state = 359
                self.match(gpsrParser.T__21)
                self.state = 360
                self.match(gpsrParser.Category)
                self.state = 361
                self.match(gpsrParser.T__3)
                self.state = 362
                self.match(gpsrParser.Room)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FndpplContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_fndppl

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Tell_gender_numberContext(FndpplContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FndpplContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Room(self):
            return self.getToken(gpsrParser.Room, 0)
        def pgenderp(self):
            return self.getTypedRuleContext(gpsrParser.PgenderpContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTell_gender_number" ):
                return visitor.visitTell_gender_number(self)
            else:
                return visitor.visitChildren(self)


    class Tell_name_beaconContext(FndpplContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FndpplContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Beacon(self):
            return self.getToken(gpsrParser.Beacon, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTell_name_beacon" ):
                return visitor.visitTell_name_beacon(self)
            else:
                return visitor.visitChildren(self)


    class Tell_gender_beaconContext(FndpplContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FndpplContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Beacon(self):
            return self.getToken(gpsrParser.Beacon, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTell_gender_beacon" ):
                return visitor.visitTell_gender_beacon(self)
            else:
                return visitor.visitChildren(self)


    class Tell_pose_roomContext(FndpplContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FndpplContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Room(self):
            return self.getToken(gpsrParser.Room, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTell_pose_room" ):
                return visitor.visitTell_pose_room(self)
            else:
                return visitor.visitChildren(self)


    class Find_talk_in_roomContext(FndpplContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FndpplContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def findp(self):
            return self.getTypedRuleContext(gpsrParser.FindpContext,0)

        def Room(self):
            return self.getToken(gpsrParser.Room, 0)
        def talk(self):
            return self.getTypedRuleContext(gpsrParser.TalkContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFind_talk_in_room" ):
                return visitor.visitFind_talk_in_room(self)
            else:
                return visitor.visitChildren(self)


    class Tell_pose_beaconContext(FndpplContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FndpplContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Beacon(self):
            return self.getToken(gpsrParser.Beacon, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTell_pose_beacon" ):
                return visitor.visitTell_pose_beacon(self)
            else:
                return visitor.visitChildren(self)


    class Tell_name_roomContext(FndpplContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FndpplContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Room(self):
            return self.getToken(gpsrParser.Room, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTell_name_room" ):
                return visitor.visitTell_name_room(self)
            else:
                return visitor.visitChildren(self)


    class Tell_pose_numberContext(FndpplContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FndpplContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Room(self):
            return self.getToken(gpsrParser.Room, 0)
        def pose(self):
            return self.getTypedRuleContext(gpsrParser.PoseContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTell_pose_number" ):
                return visitor.visitTell_pose_number(self)
            else:
                return visitor.visitChildren(self)


    class Talk_to_whowhereContext(FndpplContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FndpplContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def talk(self):
            return self.getTypedRuleContext(gpsrParser.TalkContext,0)

        def whoWhere(self):
            return self.getTypedRuleContext(gpsrParser.WhoWhereContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTalk_to_whowhere" ):
                return visitor.visitTalk_to_whowhere(self)
            else:
                return visitor.visitChildren(self)


    class Go_room_talkContext(FndpplContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FndpplContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def goroom(self):
            return self.getTypedRuleContext(gpsrParser.GoroomContext,0)

        def findp(self):
            return self.getTypedRuleContext(gpsrParser.FindpContext,0)

        def talk(self):
            return self.getTypedRuleContext(gpsrParser.TalkContext,0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(gpsrParser.Comma)
            else:
                return self.getToken(gpsrParser.Comma, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGo_room_talk" ):
                return visitor.visitGo_room_talk(self)
            else:
                return visitor.visitChildren(self)


    class Tell_gender_roomContext(FndpplContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FndpplContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Room(self):
            return self.getToken(gpsrParser.Room, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTell_gender_room" ):
                return visitor.visitTell_gender_room(self)
            else:
                return visitor.visitChildren(self)



    def fndppl(self):

        localctx = gpsrParser.FndpplContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_fndppl)
        self._la = 0 # Token type
        try:
            self.state = 407
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                localctx = gpsrParser.Talk_to_whowhereContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 366
                self.talk()
                self.state = 367
                self.match(gpsrParser.T__9)
                self.state = 368
                self.whoWhere()
                pass

            elif la_ == 2:
                localctx = gpsrParser.Find_talk_in_roomContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 370
                self.findp()
                self.state = 371
                self.match(gpsrParser.T__3)
                self.state = 372
                self.match(gpsrParser.Room)
                self.state = 373
                self.match(gpsrParser.T__4)
                self.state = 374
                self.talk()
                pass

            elif la_ == 3:
                localctx = gpsrParser.Go_room_talkContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 376
                self.goroom()
                self.state = 378
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==142:
                    self.state = 377
                    self.match(gpsrParser.Comma)


                self.state = 380
                self.findp()
                self.state = 382
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==142:
                    self.state = 381
                    self.match(gpsrParser.Comma)


                self.state = 384
                self.match(gpsrParser.T__4)
                self.state = 385
                self.talk()
                pass

            elif la_ == 4:
                localctx = gpsrParser.Tell_name_beaconContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 387
                self.match(gpsrParser.T__22)
                self.state = 388
                self.match(gpsrParser.Beacon)
                pass

            elif la_ == 5:
                localctx = gpsrParser.Tell_gender_beaconContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 389
                self.match(gpsrParser.T__23)
                self.state = 390
                self.match(gpsrParser.Beacon)
                pass

            elif la_ == 6:
                localctx = gpsrParser.Tell_pose_beaconContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 391
                self.match(gpsrParser.T__24)
                self.state = 392
                self.match(gpsrParser.Beacon)
                pass

            elif la_ == 7:
                localctx = gpsrParser.Tell_name_roomContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 393
                self.match(gpsrParser.T__25)
                self.state = 394
                self.match(gpsrParser.Room)
                pass

            elif la_ == 8:
                localctx = gpsrParser.Tell_gender_roomContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 395
                self.match(gpsrParser.T__26)
                self.state = 396
                self.match(gpsrParser.Room)
                pass

            elif la_ == 9:
                localctx = gpsrParser.Tell_pose_roomContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 397
                self.match(gpsrParser.T__27)
                self.state = 398
                self.match(gpsrParser.Room)
                pass

            elif la_ == 10:
                localctx = gpsrParser.Tell_gender_numberContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 399
                self.match(gpsrParser.T__28)
                self.state = 400
                self.match(gpsrParser.Room)
                self.state = 401
                self.match(gpsrParser.T__29)
                self.state = 402
                self.pgenderp()
                pass

            elif la_ == 11:
                localctx = gpsrParser.Tell_pose_numberContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 403
                self.match(gpsrParser.T__28)
                self.state = 404
                self.match(gpsrParser.Room)
                self.state = 405
                self.match(gpsrParser.T__29)
                self.state = 406
                self.pose()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FollowContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_follow

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class From_beacon_to_whereContext(FollowContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FollowContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def gobeacon(self):
            return self.getTypedRuleContext(gpsrParser.GobeaconContext,0)

        def Name(self):
            return self.getToken(gpsrParser.Name, 0)
        def vbfollow(self):
            return self.getTypedRuleContext(gpsrParser.VbfollowContext,0)

        def Pron(self):
            return self.getToken(gpsrParser.Pron, 0)
        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(gpsrParser.Comma)
            else:
                return self.getToken(gpsrParser.Comma, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrom_beacon_to_where" ):
                return visitor.visitFrom_beacon_to_where(self)
            else:
                return visitor.visitChildren(self)


    class From_beacon_to_roomContext(FollowContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FollowContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def vbfollow(self):
            return self.getTypedRuleContext(gpsrParser.VbfollowContext,0)

        def Name(self):
            return self.getToken(gpsrParser.Name, 0)
        def Beacon(self):
            return self.getToken(gpsrParser.Beacon, 0)
        def Room(self):
            return self.getToken(gpsrParser.Room, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrom_beacon_to_room" ):
                return visitor.visitFrom_beacon_to_room(self)
            else:
                return visitor.visitChildren(self)


    class From_beacon_to_room_indirectContext(FollowContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FollowContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Name(self):
            return self.getToken(gpsrParser.Name, 0)
        def Beacon(self):
            return self.getToken(gpsrParser.Beacon, 0)
        def vbfollow(self):
            return self.getTypedRuleContext(gpsrParser.VbfollowContext,0)

        def Pron(self):
            return self.getToken(gpsrParser.Pron, 0)
        def fllwdest(self):
            return self.getTypedRuleContext(gpsrParser.FllwdestContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrom_beacon_to_room_indirect" ):
                return visitor.visitFrom_beacon_to_room_indirect(self)
            else:
                return visitor.visitChildren(self)



    def follow(self):

        localctx = gpsrParser.FollowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_follow)
        self._la = 0 # Token type
        try:
            self.state = 439
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [135]:
                localctx = gpsrParser.From_beacon_to_roomContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 409
                self.vbfollow()
                self.state = 410
                self.match(gpsrParser.Name)
                self.state = 411
                self.match(gpsrParser.T__10)
                self.state = 412
                self.match(gpsrParser.Beacon)
                self.state = 413
                self.match(gpsrParser.T__11)
                self.state = 414
                self.match(gpsrParser.Room)
                pass
            elif token in [31]:
                localctx = gpsrParser.From_beacon_to_room_indirectContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 416
                self.match(gpsrParser.T__30)
                self.state = 417
                self.match(gpsrParser.Name)
                self.state = 418
                self.match(gpsrParser.T__31)
                self.state = 419
                self.match(gpsrParser.Beacon)
                self.state = 420
                self.match(gpsrParser.T__4)
                self.state = 421
                self.vbfollow()
                self.state = 422
                self.match(gpsrParser.Pron)
                self.state = 424
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==12:
                    self.state = 423
                    self.fllwdest()


                pass
            elif token in [126, 127]:
                localctx = gpsrParser.From_beacon_to_whereContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 426
                self.gobeacon()
                self.state = 428
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==142:
                    self.state = 427
                    self.match(gpsrParser.Comma)


                self.state = 430
                self.match(gpsrParser.T__30)
                self.state = 431
                self.match(gpsrParser.Name)
                self.state = 433
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==142:
                    self.state = 432
                    self.match(gpsrParser.Comma)


                self.state = 435
                self.match(gpsrParser.T__4)
                self.state = 436
                self.vbfollow()
                self.state = 437
                self.match(gpsrParser.Pron)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FllmeetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Name(self):
            return self.getToken(gpsrParser.Name, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_fllmeet

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFllmeet" ):
                return visitor.visitFllmeet(self)
            else:
                return visitor.visitChildren(self)




    def fllmeet(self):

        localctx = gpsrParser.FllmeetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_fllmeet)
        try:
            self.state = 444
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [31]:
                self.enterOuterAlt(localctx, 1)
                self.state = 441
                self.match(gpsrParser.T__30)
                self.state = 442
                self.match(gpsrParser.Name)
                pass
            elif token in [33]:
                self.enterOuterAlt(localctx, 2)
                self.state = 443
                self.match(gpsrParser.T__32)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FllwdestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Room(self):
            return self.getToken(gpsrParser.Room, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_fllwdest

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFllwdest" ):
                return visitor.visitFllwdest(self)
            else:
                return visitor.visitChildren(self)




    def fllwdest(self):

        localctx = gpsrParser.FllwdestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_fllwdest)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 446
            self.match(gpsrParser.T__11)
            self.state = 447
            self.match(gpsrParser.Room)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GuideContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def gdcmd(self):
            return self.getTypedRuleContext(gpsrParser.GdcmdContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_guide

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGuide" ):
                return visitor.visitGuide(self)
            else:
                return visitor.visitChildren(self)




    def guide(self):

        localctx = gpsrParser.GuideContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_guide)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 449
            self.gdcmd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GdcmdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_gdcmd

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Beacon_to_beacon_gobeacon_guidetoContext(GdcmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.GdcmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def gobeacon(self):
            return self.getTypedRuleContext(gpsrParser.GobeaconContext,0)

        def Name(self):
            return self.getToken(gpsrParser.Name, 0)
        def guideto(self):
            return self.getTypedRuleContext(gpsrParser.GuidetoContext,0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(gpsrParser.Comma)
            else:
                return self.getToken(gpsrParser.Comma, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBeacon_to_beacon_gobeacon_guideto" ):
                return visitor.visitBeacon_to_beacon_gobeacon_guideto(self)
            else:
                return visitor.visitChildren(self)


    class Beacon_to_beaconContext(GdcmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.GdcmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def vbguide(self):
            return self.getTypedRuleContext(gpsrParser.VbguideContext,0)

        def Name(self):
            return self.getToken(gpsrParser.Name, 0)
        def Beacon(self, i:int=None):
            if i is None:
                return self.getTokens(gpsrParser.Beacon)
            else:
                return self.getToken(gpsrParser.Beacon, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBeacon_to_beacon" ):
                return visitor.visitBeacon_to_beacon(self)
            else:
                return visitor.visitChildren(self)


    class Beacon_to_beacon_guide_toContext(GdcmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.GdcmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Name(self):
            return self.getToken(gpsrParser.Name, 0)
        def Beacon(self):
            return self.getToken(gpsrParser.Beacon, 0)
        def guideto(self):
            return self.getTypedRuleContext(gpsrParser.GuidetoContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBeacon_to_beacon_guide_to" ):
                return visitor.visitBeacon_to_beacon_guide_to(self)
            else:
                return visitor.visitChildren(self)


    class Beacon_to_beacon_gdwhereContext(GdcmdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.GdcmdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def vbguide(self):
            return self.getTypedRuleContext(gpsrParser.VbguideContext,0)

        def Name(self):
            return self.getToken(gpsrParser.Name, 0)
        def Beacon(self):
            return self.getToken(gpsrParser.Beacon, 0)
        def gdwhere(self):
            return self.getTypedRuleContext(gpsrParser.GdwhereContext,0)

        def Comma(self):
            return self.getToken(gpsrParser.Comma, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBeacon_to_beacon_gdwhere" ):
                return visitor.visitBeacon_to_beacon_gdwhere(self)
            else:
                return visitor.visitChildren(self)



    def gdcmd(self):

        localctx = gpsrParser.GdcmdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_gdcmd)
        self._la = 0 # Token type
        try:
            self.state = 485
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                localctx = gpsrParser.Beacon_to_beaconContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 451
                self.vbguide()
                self.state = 452
                self.match(gpsrParser.Name)
                self.state = 453
                self.match(gpsrParser.T__10)
                self.state = 454
                self.match(gpsrParser.Beacon)
                self.state = 455
                self.match(gpsrParser.T__11)
                self.state = 456
                self.match(gpsrParser.Beacon)
                pass

            elif la_ == 2:
                localctx = gpsrParser.Beacon_to_beacon_guide_toContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 458
                self.match(gpsrParser.T__30)
                self.state = 459
                self.match(gpsrParser.Name)
                self.state = 460
                self.match(gpsrParser.T__31)
                self.state = 461
                self.match(gpsrParser.Beacon)
                self.state = 462
                self.match(gpsrParser.T__4)
                self.state = 463
                self.guideto()
                pass

            elif la_ == 3:
                localctx = gpsrParser.Beacon_to_beacon_gobeacon_guidetoContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 464
                self.gobeacon()
                self.state = 466
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==142:
                    self.state = 465
                    self.match(gpsrParser.Comma)


                self.state = 468
                self.match(gpsrParser.T__30)
                self.state = 469
                self.match(gpsrParser.Name)
                self.state = 471
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==142:
                    self.state = 470
                    self.match(gpsrParser.Comma)


                self.state = 473
                self.match(gpsrParser.T__4)
                self.state = 474
                self.guideto()
                pass

            elif la_ == 4:
                localctx = gpsrParser.Beacon_to_beacon_gdwhereContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 476
                self.vbguide()
                self.state = 477
                self.match(gpsrParser.Name)
                self.state = 478
                self.match(gpsrParser.T__11)
                self.state = 479
                self.match(gpsrParser.Beacon)
                self.state = 481
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==142:
                    self.state = 480
                    self.match(gpsrParser.Comma)


                self.state = 483
                self.gdwhere()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GuidetoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbguide(self):
            return self.getTypedRuleContext(gpsrParser.VbguideContext,0)


        def Pron(self):
            return self.getToken(gpsrParser.Pron, 0)

        def Beacon(self):
            return self.getToken(gpsrParser.Beacon, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_guideto

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGuideto" ):
                return visitor.visitGuideto(self)
            else:
                return visitor.visitChildren(self)




    def guideto(self):

        localctx = gpsrParser.GuidetoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_guideto)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 487
            self.vbguide()
            self.state = 488
            self.match(gpsrParser.Pron)
            self.state = 489
            self.match(gpsrParser.T__11)
            self.state = 490
            self.match(gpsrParser.Beacon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GdwhereContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Pron(self):
            return self.getToken(gpsrParser.Pron, 0)

        def Beacon(self):
            return self.getToken(gpsrParser.Beacon, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_gdwhere

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGdwhere" ):
                return visitor.visitGdwhere(self)
            else:
                return visitor.visitChildren(self)




    def gdwhere(self):

        localctx = gpsrParser.GdwhereContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_gdwhere)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 492
            self.match(gpsrParser.T__33)
            self.state = 493
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 240518168576) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 494
            self.match(gpsrParser.T__37)
            self.state = 495
            self.match(gpsrParser.Pron)
            self.state = 496
            self.match(gpsrParser.T__31)
            self.state = 497
            self.match(gpsrParser.Beacon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FollowoutContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_followout

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Beacon_to_roomContext(FollowoutContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FollowoutContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Name(self):
            return self.getToken(gpsrParser.Name, 0)
        def Beacon(self):
            return self.getToken(gpsrParser.Beacon, 0)
        def vbfollow(self):
            return self.getTypedRuleContext(gpsrParser.VbfollowContext,0)

        def Pron(self):
            return self.getToken(gpsrParser.Pron, 0)
        def goroom(self):
            return self.getTypedRuleContext(gpsrParser.GoroomContext,0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(gpsrParser.Comma)
            else:
                return self.getToken(gpsrParser.Comma, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBeacon_to_room" ):
                return visitor.visitBeacon_to_room(self)
            else:
                return visitor.visitChildren(self)


    class Beacon_to_backContext(FollowoutContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.FollowoutContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Name(self):
            return self.getToken(gpsrParser.Name, 0)
        def Beacon(self):
            return self.getToken(gpsrParser.Beacon, 0)
        def vbfollow(self):
            return self.getTypedRuleContext(gpsrParser.VbfollowContext,0)

        def Pron(self, i:int=None):
            if i is None:
                return self.getTokens(gpsrParser.Pron)
            else:
                return self.getToken(gpsrParser.Pron, i)
        def vbguide(self):
            return self.getTypedRuleContext(gpsrParser.VbguideContext,0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(gpsrParser.Comma)
            else:
                return self.getToken(gpsrParser.Comma, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBeacon_to_back" ):
                return visitor.visitBeacon_to_back(self)
            else:
                return visitor.visitChildren(self)



    def followout(self):

        localctx = gpsrParser.FollowoutContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_followout)
        self._la = 0 # Token type
        try:
            self.state = 531
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                localctx = gpsrParser.Beacon_to_roomContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 499
                self.match(gpsrParser.T__30)
                self.state = 500
                self.match(gpsrParser.Name)
                self.state = 501
                self.match(gpsrParser.T__31)
                self.state = 502
                self.match(gpsrParser.Beacon)
                self.state = 504
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==142:
                    self.state = 503
                    self.match(gpsrParser.Comma)


                self.state = 506
                self.vbfollow()
                self.state = 507
                self.match(gpsrParser.Pron)
                self.state = 509
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==142:
                    self.state = 508
                    self.match(gpsrParser.Comma)


                self.state = 511
                self.match(gpsrParser.T__4)
                self.state = 512
                self.goroom()
                pass

            elif la_ == 2:
                localctx = gpsrParser.Beacon_to_backContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 514
                self.match(gpsrParser.T__30)
                self.state = 515
                self.match(gpsrParser.Name)
                self.state = 516
                self.match(gpsrParser.T__31)
                self.state = 517
                self.match(gpsrParser.Beacon)
                self.state = 519
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==142:
                    self.state = 518
                    self.match(gpsrParser.Comma)


                self.state = 521
                self.vbfollow()
                self.state = 522
                self.match(gpsrParser.Pron)
                self.state = 524
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==142:
                    self.state = 523
                    self.match(gpsrParser.Comma)


                self.state = 526
                self.match(gpsrParser.T__4)
                self.state = 527
                self.vbguide()
                self.state = 528
                self.match(gpsrParser.Pron)
                self.state = 529
                self.match(gpsrParser.T__38)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IncompleteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbfollow(self):
            return self.getTypedRuleContext(gpsrParser.VbfollowContext,0)


        def Name(self):
            return self.getToken(gpsrParser.Name, 0)

        def vbbring(self):
            return self.getTypedRuleContext(gpsrParser.VbbringContext,0)


        def Object_obfuscated(self):
            return self.getToken(gpsrParser.Object_obfuscated, 0)

        def vbdeliver(self):
            return self.getTypedRuleContext(gpsrParser.VbdeliverContext,0)


        def someone(self):
            return self.getTypedRuleContext(gpsrParser.SomeoneContext,0)


        def vbguide(self):
            return self.getTypedRuleContext(gpsrParser.VbguideContext,0)


        def Beacon(self):
            return self.getToken(gpsrParser.Beacon, 0)

        def inguidewho(self):
            return self.getTypedRuleContext(gpsrParser.InguidewhoContext,0)


        def Pron(self):
            return self.getToken(gpsrParser.Pron, 0)

        def gobeacon(self):
            return self.getTypedRuleContext(gpsrParser.GobeaconContext,0)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(gpsrParser.Comma)
            else:
                return self.getToken(gpsrParser.Comma, i)

        def getRuleIndex(self):
            return gpsrParser.RULE_incomplete

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIncomplete" ):
                return visitor.visitIncomplete(self)
            else:
                return visitor.visitChildren(self)




    def incomplete(self):

        localctx = gpsrParser.IncompleteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_incomplete)
        self._la = 0 # Token type
        try:
            self.state = 569
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 533
                self.vbfollow()
                self.state = 534
                self.match(gpsrParser.Name)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 536
                self.vbbring()
                self.state = 537
                self.match(gpsrParser.T__8)
                self.state = 538
                self.match(gpsrParser.Object_obfuscated)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 540
                self.vbdeliver()
                self.state = 541
                self.match(gpsrParser.Object_obfuscated)
                self.state = 542
                self.match(gpsrParser.T__9)
                self.state = 543
                self.someone()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 545
                self.vbguide()
                self.state = 546
                self.match(gpsrParser.Name)
                self.state = 547
                self.match(gpsrParser.T__11)
                self.state = 548
                self.match(gpsrParser.Beacon)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 550
                self.match(gpsrParser.T__30)
                self.state = 551
                self.inguidewho()
                self.state = 552
                self.match(gpsrParser.T__4)
                self.state = 553
                self.vbguide()
                self.state = 554
                self.match(gpsrParser.Pron)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 556
                self.gobeacon()
                self.state = 558
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==142:
                    self.state = 557
                    self.match(gpsrParser.Comma)


                self.state = 560
                self.match(gpsrParser.T__30)
                self.state = 561
                self.inguidewho()
                self.state = 563
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==142:
                    self.state = 562
                    self.match(gpsrParser.Comma)


                self.state = 565
                self.match(gpsrParser.T__4)
                self.state = 566
                self.vbguide()
                self.state = 567
                self.match(gpsrParser.Pron)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InguidewhoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Name(self):
            return self.getToken(gpsrParser.Name, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_inguidewho

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInguidewho" ):
                return visitor.visitInguidewho(self)
            else:
                return visitor.visitChildren(self)




    def inguidewho(self):

        localctx = gpsrParser.InguidewhoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_inguidewho)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 571
            self.match(gpsrParser.Name)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartyhostContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbserve(self):
            return self.getTypedRuleContext(gpsrParser.VbserveContext,0)


        def phpeopler(self):
            return self.getTypedRuleContext(gpsrParser.PhpeoplerContext,0)


        def vbmeet(self):
            return self.getTypedRuleContext(gpsrParser.VbmeetContext,0)


        def Name(self, i:int=None):
            if i is None:
                return self.getTokens(gpsrParser.Name)
            else:
                return self.getToken(gpsrParser.Name, i)

        def door(self):
            return self.getTypedRuleContext(gpsrParser.DoorContext,0)


        def Pron(self, i:int=None):
            if i is None:
                return self.getTokens(gpsrParser.Pron)
            else:
                return self.getToken(gpsrParser.Pron, i)

        def Beacon(self, i:int=None):
            if i is None:
                return self.getTokens(gpsrParser.Beacon)
            else:
                return self.getToken(gpsrParser.Beacon, i)

        def vbguide(self):
            return self.getTypedRuleContext(gpsrParser.VbguideContext,0)


        def taxi(self):
            return self.getTypedRuleContext(gpsrParser.TaxiContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_partyhost

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartyhost" ):
                return visitor.visitPartyhost(self)
            else:
                return visitor.visitChildren(self)




    def partyhost(self):

        localctx = gpsrParser.PartyhostContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_partyhost)
        try:
            self.state = 616
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 573
                self.vbserve()
                self.state = 574
                self.match(gpsrParser.T__39)
                self.state = 575
                self.phpeopler()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 577
                self.vbmeet()
                self.state = 578
                self.match(gpsrParser.Name)
                self.state = 579
                self.match(gpsrParser.T__31)
                self.state = 580
                self.door()
                self.state = 581
                self.match(gpsrParser.T__40)
                self.state = 582
                self.match(gpsrParser.Pron)
                self.state = 583
                self.match(gpsrParser.T__9)
                self.state = 584
                self.phpeopler()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 586
                self.vbmeet()
                self.state = 587
                self.match(gpsrParser.Name)
                self.state = 588
                self.match(gpsrParser.T__31)
                self.state = 589
                self.match(gpsrParser.Beacon)
                self.state = 590
                self.match(gpsrParser.T__41)
                self.state = 591
                self.match(gpsrParser.Pron)
                self.state = 592
                self.match(gpsrParser.T__42)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 594
                self.vbmeet()
                self.state = 595
                self.match(gpsrParser.Name)
                self.state = 596
                self.match(gpsrParser.T__31)
                self.state = 597
                self.match(gpsrParser.Beacon)
                self.state = 598
                self.match(gpsrParser.T__40)
                self.state = 599
                self.match(gpsrParser.Pron)
                self.state = 600
                self.match(gpsrParser.T__9)
                self.state = 601
                self.match(gpsrParser.Name)
                self.state = 602
                self.match(gpsrParser.T__31)
                self.state = 603
                self.match(gpsrParser.Beacon)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 605
                self.vbmeet()
                self.state = 606
                self.match(gpsrParser.Name)
                self.state = 607
                self.match(gpsrParser.T__31)
                self.state = 608
                self.match(gpsrParser.Beacon)
                self.state = 609
                self.match(gpsrParser.T__4)
                self.state = 610
                self.vbguide()
                self.state = 611
                self.match(gpsrParser.Pron)
                self.state = 612
                self.match(gpsrParser.T__9)
                self.state = 613
                self.match(gpsrParser.Pron)
                self.state = 614
                self.taxi()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PhpeopleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def peopletype(self):
            return self.getTypedRuleContext(gpsrParser.PeopletypeContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_phpeople

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPhpeople" ):
                return visitor.visitPhpeople(self)
            else:
                return visitor.visitChildren(self)




    def phpeople(self):

        localctx = gpsrParser.PhpeopleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_phpeople)
        try:
            self.state = 621
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [44]:
                self.enterOuterAlt(localctx, 1)
                self.state = 618
                self.match(gpsrParser.T__43)
                pass
            elif token in [45]:
                self.enterOuterAlt(localctx, 2)
                self.state = 619
                self.match(gpsrParser.T__44)
                self.state = 620
                self.peopletype()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PeopletypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_peopletype

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPeopletype" ):
                return visitor.visitPeopletype(self)
            else:
                return visitor.visitChildren(self)




    def peopletype(self):

        localctx = gpsrParser.PeopletypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_peopletype)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 623
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4433230883192832) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PhpeoplerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def phpeople(self):
            return self.getTypedRuleContext(gpsrParser.PhpeopleContext,0)


        def Room(self):
            return self.getToken(gpsrParser.Room, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_phpeopler

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPhpeopler" ):
                return visitor.visitPhpeopler(self)
            else:
                return visitor.visitChildren(self)




    def phpeopler(self):

        localctx = gpsrParser.PhpeoplerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_phpeopler)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 625
            self.phpeople()
            self.state = 626
            self.match(gpsrParser.T__3)
            self.state = 627
            self.match(gpsrParser.Room)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PgendersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_pgenders

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPgenders" ):
                return visitor.visitPgenders(self)
            else:
                return visitor.visitChildren(self)




    def pgenders(self):

        localctx = gpsrParser.PgendersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_pgenders)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 629
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 283726776524341248) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PgenderpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_pgenderp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPgenderp" ):
                return visitor.visitPgenderp(self)
            else:
                return visitor.visitChildren(self)




    def pgenderp(self):

        localctx = gpsrParser.PgenderpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_pgenderp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 631
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4323877854740742144) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PoseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_pose

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPose" ):
                return visitor.visitPose(self)
            else:
                return visitor.visitChildren(self)




    def pose(self):

        localctx = gpsrParser.PoseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_pose)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 633
            _la = self._input.LA(1)
            if not(((((_la - 62)) & ~0x3f) == 0 and ((1 << (_la - 62)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AbsposContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_abspos

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAbspos" ):
                return visitor.visitAbspos(self)
            else:
                return visitor.visitChildren(self)




    def abspos(self):

        localctx = gpsrParser.AbsposContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_abspos)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 635
            _la = self._input.LA(1)
            if not(_la==65 or _la==66):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelposContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_relpos

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelpos" ):
                return visitor.visitRelpos(self)
            else:
                return visitor.visitChildren(self)




    def relpos(self):

        localctx = gpsrParser.RelposContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_relpos)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 637
            _la = self._input.LA(1)
            if not(((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 63) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GarbageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_garbage

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGarbage" ):
                return visitor.visitGarbage(self)
            else:
                return visitor.visitChildren(self)




    def garbage(self):

        localctx = gpsrParser.GarbageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_garbage)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 639
            _la = self._input.LA(1)
            if not(((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & 63) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LuggageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_luggage

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLuggage" ):
                return visitor.visitLuggage(self)
            else:
                return visitor.visitChildren(self)




    def luggage(self):

        localctx = gpsrParser.LuggageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_luggage)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 641
            _la = self._input.LA(1)
            if not(((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 31) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TaxiContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_taxi

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTaxi" ):
                return visitor.visitTaxi(self)
            else:
                return visitor.visitChildren(self)




    def taxi(self):

        localctx = gpsrParser.TaxiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_taxi)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 643
            _la = self._input.LA(1)
            if not(((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DoorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def doorpos(self):
            return self.getTypedRuleContext(gpsrParser.DoorposContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_door

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDoor" ):
                return visitor.visitDoor(self)
            else:
                return visitor.visitChildren(self)




    def door(self):

        localctx = gpsrParser.DoorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_door)
        try:
            self.state = 651
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 645
                self.doorpos()
                self.state = 646
                self.match(gpsrParser.T__86)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 648
                self.doorpos()
                self.state = 649
                self.match(gpsrParser.T__87)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DoorposContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_doorpos

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDoorpos" ):
                return visitor.visitDoorpos(self)
            else:
                return visitor.visitChildren(self)




    def doorpos(self):

        localctx = gpsrParser.DoorposContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_doorpos)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 653
            _la = self._input.LA(1)
            if not(((((_la - 39)) & ~0x3f) == 0 and ((1 << (_la - 39)) & 7881299347898369) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbtakeoutContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_vbtakeout

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVbtakeout" ):
                return visitor.visitVbtakeout(self)
            else:
                return visitor.visitChildren(self)




    def vbtakeout(self):

        localctx = gpsrParser.VbtakeoutContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_vbtakeout)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 655
            _la = self._input.LA(1)
            if not(_la==92 or _la==93):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbcleanupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_vbcleanup

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVbcleanup" ):
                return visitor.visitVbcleanup(self)
            else:
                return visitor.visitChildren(self)




    def vbcleanup(self):

        localctx = gpsrParser.VbcleanupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_vbcleanup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 657
            _la = self._input.LA(1)
            if not(((((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & 31) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbserveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_vbserve

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVbserve" ):
                return visitor.visitVbserve(self)
            else:
                return visitor.visitChildren(self)




    def vbserve(self):

        localctx = gpsrParser.VbserveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_vbserve)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 659
            _la = self._input.LA(1)
            if not(((((_la - 99)) & ~0x3f) == 0 and ((1 << (_la - 99)) & 63) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbmeetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_vbmeet

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVbmeet" ):
                return visitor.visitVbmeet(self)
            else:
                return visitor.visitChildren(self)




    def vbmeet(self):

        localctx = gpsrParser.VbmeetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_vbmeet)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 661
            _la = self._input.LA(1)
            if not(_la==38 or ((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SomeoneContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def whoWhere(self):
            return self.getTypedRuleContext(gpsrParser.WhoWhereContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_someone

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSomeone" ):
                return visitor.visitSomeone(self)
            else:
                return visitor.visitChildren(self)




    def someone(self):

        localctx = gpsrParser.SomeoneContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_someone)
        try:
            self.state = 665
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [108]:
                self.enterOuterAlt(localctx, 1)
                self.state = 663
                self.match(gpsrParser.T__107)
                pass
            elif token in [3]:
                self.enterOuterAlt(localctx, 2)
                self.state = 664
                self.whoWhere()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PlaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbplace(self):
            return self.getTypedRuleContext(gpsrParser.VbplaceContext,0)


        def Placement(self):
            return self.getToken(gpsrParser.Placement, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_place

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPlace" ):
                return visitor.visitPlace(self)
            else:
                return visitor.visitChildren(self)




    def place(self):

        localctx = gpsrParser.PlaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_place)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 667
            self.vbplace()
            self.state = 668
            self.match(gpsrParser.T__5)
            self.state = 669
            self.match(gpsrParser.Placement)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OpropContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_oprop

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOprop" ):
                return visitor.visitOprop(self)
            else:
                return visitor.visitChildren(self)




    def oprop(self):

        localctx = gpsrParser.OpropContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_oprop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 671
            _la = self._input.LA(1)
            if not(((((_la - 109)) & ~0x3f) == 0 and ((1 << (_la - 109)) & 63) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GoplaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbgopl(self):
            return self.getTypedRuleContext(gpsrParser.VbgoplContext,0)


        def Placement(self):
            return self.getToken(gpsrParser.Placement, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_goplace

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGoplace" ):
                return visitor.visitGoplace(self)
            else:
                return visitor.visitChildren(self)




    def goplace(self):

        localctx = gpsrParser.GoplaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_goplace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 673
            self.vbgopl()
            self.state = 674
            self.match(gpsrParser.T__11)
            self.state = 675
            self.match(gpsrParser.Placement)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GobeaconContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbgopl(self):
            return self.getTypedRuleContext(gpsrParser.VbgoplContext,0)


        def Beacon(self):
            return self.getToken(gpsrParser.Beacon, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_gobeacon

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGobeacon" ):
                return visitor.visitGobeacon(self)
            else:
                return visitor.visitChildren(self)




    def gobeacon(self):

        localctx = gpsrParser.GobeaconContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_gobeacon)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 677
            self.vbgopl()
            self.state = 678
            self.match(gpsrParser.T__11)
            self.state = 679
            self.match(gpsrParser.Beacon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GoroomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbgopl(self):
            return self.getTypedRuleContext(gpsrParser.VbgoplContext,0)


        def Room(self):
            return self.getToken(gpsrParser.Room, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_goroom

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGoroom" ):
                return visitor.visitGoroom(self)
            else:
                return visitor.visitChildren(self)




    def goroom(self):

        localctx = gpsrParser.GoroomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_goroom)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 681
            self.vbgopl()
            self.state = 682
            self.match(gpsrParser.T__11)
            self.state = 683
            self.match(gpsrParser.Room)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TakeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbtake(self):
            return self.getTypedRuleContext(gpsrParser.VbtakeContext,0)


        def Object(self):
            return self.getToken(gpsrParser.Object, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_take

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTake" ):
                return visitor.visitTake(self)
            else:
                return visitor.visitChildren(self)




    def take(self):

        localctx = gpsrParser.TakeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_take)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 685
            self.vbtake()
            self.state = 686
            self.match(gpsrParser.T__6)
            self.state = 687
            self.match(gpsrParser.Object)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TakefromContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def take(self):
            return self.getTypedRuleContext(gpsrParser.TakeContext,0)


        def Placement(self):
            return self.getToken(gpsrParser.Placement, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_takefrom

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTakefrom" ):
                return visitor.visitTakefrom(self)
            else:
                return visitor.visitChildren(self)




    def takefrom(self):

        localctx = gpsrParser.TakefromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_takefrom)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 689
            self.take()
            self.state = 690
            self.match(gpsrParser.T__10)
            self.state = 691
            self.match(gpsrParser.Placement)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DelivmeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbdeliver(self):
            return self.getTypedRuleContext(gpsrParser.VbdeliverContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_delivme

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDelivme" ):
                return visitor.visitDelivme(self)
            else:
                return visitor.visitChildren(self)




    def delivme(self):

        localctx = gpsrParser.DelivmeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_delivme)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 693
            self.vbdeliver()
            self.state = 694
            self.match(gpsrParser.T__114)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DelivtoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbdeliver(self):
            return self.getTypedRuleContext(gpsrParser.VbdeliverContext,0)


        def Name(self):
            return self.getToken(gpsrParser.Name, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_delivto

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDelivto" ):
                return visitor.visitDelivto(self)
            else:
                return visitor.visitChildren(self)




    def delivto(self):

        localctx = gpsrParser.DelivtoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_delivto)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 696
            self.vbdeliver()
            self.state = 697
            self.match(gpsrParser.T__115)
            self.state = 698
            self.match(gpsrParser.Name)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DelivatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbdeliver(self):
            return self.getTypedRuleContext(gpsrParser.VbdeliverContext,0)


        def Name(self):
            return self.getToken(gpsrParser.Name, 0)

        def Beacon(self):
            return self.getToken(gpsrParser.Beacon, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_delivat

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDelivat" ):
                return visitor.visitDelivat(self)
            else:
                return visitor.visitChildren(self)




    def delivat(self):

        localctx = gpsrParser.DelivatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_delivat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 700
            self.vbdeliver()
            self.state = 701
            self.match(gpsrParser.T__115)
            self.state = 702
            self.match(gpsrParser.Name)
            self.state = 703
            self.match(gpsrParser.T__31)
            self.state = 704
            self.match(gpsrParser.Beacon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TalkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_talk

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Answer_questionContext(TalkContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.TalkContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Answer(self):
            return self.getToken(gpsrParser.Answer, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnswer_question" ):
                return visitor.visitAnswer_question(self)
            else:
                return visitor.visitChildren(self)


    class Speak_toContext(TalkContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a gpsrParser.TalkContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def speak(self):
            return self.getTypedRuleContext(gpsrParser.SpeakContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpeak_to" ):
                return visitor.visitSpeak_to(self)
            else:
                return visitor.visitChildren(self)



    def talk(self):

        localctx = gpsrParser.TalkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_talk)
        try:
            self.state = 708
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [140]:
                localctx = gpsrParser.Answer_questionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 706
                self.match(gpsrParser.Answer)
                pass
            elif token in [124, 125]:
                localctx = gpsrParser.Speak_toContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 707
                self.speak()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpeakContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbspeak(self):
            return self.getTypedRuleContext(gpsrParser.VbspeakContext,0)


        def Whattosay(self):
            return self.getToken(gpsrParser.Whattosay, 0)

        def getRuleIndex(self):
            return gpsrParser.RULE_speak

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpeak" ):
                return visitor.visitSpeak(self)
            else:
                return visitor.visitChildren(self)




    def speak(self):

        localctx = gpsrParser.SpeakContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_speak)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 710
            self.vbspeak()
            self.state = 711
            self.match(gpsrParser.Whattosay)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbbtakeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_vbbtake

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVbbtake" ):
                return visitor.visitVbbtake(self)
            else:
                return visitor.visitChildren(self)




    def vbbtake(self):

        localctx = gpsrParser.VbbtakeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_vbbtake)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 713
            _la = self._input.LA(1)
            if not(_la==117 or _la==118):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbplaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_vbplace

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVbplace" ):
                return visitor.visitVbplace(self)
            else:
                return visitor.visitChildren(self)




    def vbplace(self):

        localctx = gpsrParser.VbplaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_vbplace)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 715
            _la = self._input.LA(1)
            if not(_la==119 or _la==120):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbbringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_vbbring

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVbbring" ):
                return visitor.visitVbbring(self)
            else:
                return visitor.visitChildren(self)




    def vbbring(self):

        localctx = gpsrParser.VbbringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_vbbring)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 717
            _la = self._input.LA(1)
            if not(_la==103 or _la==117):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbdeliverContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbbring(self):
            return self.getTypedRuleContext(gpsrParser.VbbringContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_vbdeliver

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVbdeliver" ):
                return visitor.visitVbdeliver(self)
            else:
                return visitor.visitChildren(self)




    def vbdeliver(self):

        localctx = gpsrParser.VbdeliverContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_vbdeliver)
        try:
            self.state = 721
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [103, 117]:
                self.enterOuterAlt(localctx, 1)
                self.state = 719
                self.vbbring()
                pass
            elif token in [101]:
                self.enterOuterAlt(localctx, 2)
                self.state = 720
                self.match(gpsrParser.T__100)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbtakeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_vbtake

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVbtake" ):
                return visitor.visitVbtake(self)
            else:
                return visitor.visitChildren(self)




    def vbtake(self):

        localctx = gpsrParser.VbtakeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_vbtake)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 723
            _la = self._input.LA(1)
            if not(((((_la - 118)) & ~0x3f) == 0 and ((1 << (_la - 118)) & 57) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbspeakContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_vbspeak

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVbspeak" ):
                return visitor.visitVbspeak(self)
            else:
                return visitor.visitChildren(self)




    def vbspeak(self):

        localctx = gpsrParser.VbspeakContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_vbspeak)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 725
            _la = self._input.LA(1)
            if not(_la==124 or _la==125):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbgoplContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_vbgopl

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVbgopl" ):
                return visitor.visitVbgopl(self)
            else:
                return visitor.visitChildren(self)




    def vbgopl(self):

        localctx = gpsrParser.VbgoplContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_vbgopl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 727
            _la = self._input.LA(1)
            if not(_la==126 or _la==127):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbgorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vbgopl(self):
            return self.getTypedRuleContext(gpsrParser.VbgoplContext,0)


        def getRuleIndex(self):
            return gpsrParser.RULE_vbgor

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVbgor" ):
                return visitor.visitVbgor(self)
            else:
                return visitor.visitChildren(self)




    def vbgor(self):

        localctx = gpsrParser.VbgorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_vbgor)
        try:
            self.state = 731
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [126, 127]:
                self.enterOuterAlt(localctx, 1)
                self.state = 729
                self.vbgopl()
                pass
            elif token in [128]:
                self.enterOuterAlt(localctx, 2)
                self.state = 730
                self.match(gpsrParser.T__127)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbfindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_vbfind

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVbfind" ):
                return visitor.visitVbfind(self)
            else:
                return visitor.visitChildren(self)




    def vbfind(self):

        localctx = gpsrParser.VbfindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_vbfind)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 733
            _la = self._input.LA(1)
            if not(_la==38 or _la==129 or _la==130):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbguideContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_vbguide

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVbguide" ):
                return visitor.visitVbguide(self)
            else:
                return visitor.visitChildren(self)




    def vbguide(self):

        localctx = gpsrParser.VbguideContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_vbguide)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 735
            _la = self._input.LA(1)
            if not(((((_la - 118)) & ~0x3f) == 0 and ((1 << (_la - 118)) & 122881) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VbfollowContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_vbfollow

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVbfollow" ):
                return visitor.visitVbfollow(self)
            else:
                return visitor.visitChildren(self)




    def vbfollow(self):

        localctx = gpsrParser.VbfollowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_vbfollow)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 737
            self.match(gpsrParser.T__134)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PoliteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return gpsrParser.RULE_polite

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPolite" ):
                return visitor.visitPolite(self)
            else:
                return visitor.visitChildren(self)




    def polite(self):

        localctx = gpsrParser.PoliteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_polite)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 739
            _la = self._input.LA(1)
            if not(((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & 15) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





